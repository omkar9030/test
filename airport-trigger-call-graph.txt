=== Method Definitions ===

Method: com.honeywell.coreptdu.global.forms.AlertDetail.getCurrent
  currentAlert += 1
  return currentAlert

Method: com.honeywell.coreptdu.pkg.spec.IDisplayAlert.moreButtons

Method: com.honeywell.coreptdu.utils.oracleutils.OracleHelpers.ResponseMapper
  try {     java.lang.Object obj = com.honeywell.coreptdu.utils.oracleutils.OracleHelpers.nameIn(targetObj, "blocks");     if (obj != null) {         java.lang.reflect.Method intBlockMethod = com.honeywell.coreptdu.utils.oracleutils.OracleHelpers.getMethod(obj, "initBlocks");         if (intBlockMethod != null) {             intBlockMethod.setAccessible(true);             intBlockMethod.invoke(obj);         }         org.springframework.beans.BeanUtils.copyProperties(sourceObj, obj);     }     org.springframework.beans.BeanUtils.copyProperties(sourceObj, targetObj); } catch (java.lang.Exception e) {     log.error("ResponseMapper --> " + e.getMessage()); }

Method: com.honeywell.coreptdu.global.forms.AlertDetail.createNewRecord
  totalAlert = currentAlert
  currentAlert = 0
  com.honeywell.coreptdu.global.forms.InnerAlertDetail in = new com.honeywell.coreptdu.global.forms.InnerAlertDetail()
  in.setAlertName(alertName)
  alerts.add(in)

Method: com.honeywell.coreptdu.global.forms.AlertDetail.getAlertValue
  if (alerts.get(index - 1).getAlertName().equals(alertName)) {     return alerts.get(index - 1).getValue(); }
  return 0

Method: com.honeywell.coreptdu.datatypes.airport.serviceimpl.AirportTriggerServiceImpl.validateBeforeCommit
  int oldIndex = system.getCursorRecordIndex()
  com.honeywell.coreptdu.utils.oracleutils.Block<?> recs = ((com.honeywell.coreptdu.utils.oracleutils.Block<?>) (nameIn(this, system.getCursorBlock())))
  system.setCursorRecordIndex(0)
  for (java.lang.Object rec : recs.getData()) {     if (java.util.Objects.equals(nameIn(rec, "recordStatus"), "INSERT")) {         system.setRecordStatus(com.honeywell.coreptdu.global.forms.FormConstant.INSERT);         preInsert();         whenValidateRecordBL();     }     system.setCursorRecordIndex(system.getCursorRecordIndex() + 1); }
  system.setCursorRecordIndex(0)
  for (java.lang.Object rec : recs.getData()) {     if (java.util.Objects.equals(nameIn(rec, "recordStatus"), "CHANGED")) {         preUpdate();         whenValidateRecordBL();     }     system.setCursorRecordIndex(system.getCursorRecordIndex() + 1); }
  system.setCursorRecordIndex(oldIndex)
  whenValidateRecordBL()

Method: com.honeywell.coreptdu.utils.oracleutils.GenericTemplateForm.commitForm
  try {     int value = alertDetails.checkRecordLockAlertValue();     if ((value == 0) || (value == 1)) {         genericNativeQueryHelper.commitEntities(obj);     } else if (value == 2) {         throw new com.honeywell.coreptdu.exception.FormTriggerFailureException();     } } catch (java.lang.Exception e) {     if (e instanceof com.honeywell.coreptdu.exception.RecordLockedException) {         alertDetails.getCurrent();         moreButtons("S", "Forms", "Could not reserve the record. Keep trying?", "Yes", "No", null);         alertDetails.createOrRecreateRecord("RecordLock");         throw new com.honeywell.coreptdu.exception.AlertException(event, alertDetails);     } else if (e instanceof com.honeywell.coreptdu.exception.NoDataFoundException) {         com.honeywell.coreptdu.utils.oracleutils.PropertyHelpers.setAlertProperty(event, "dsp_msg", "caution", "Error", "FRM-40504: Record has been updated or deleted by another user.\nRe-query to see change.", "ALERT_MESSAGE_TEXT", "OK", "", "");         com.honeywell.coreptdu.utils.oracleutils.PropertyHelpers.setShowAlert(event, "dsp_msg", false);         throw new com.honeywell.coreptdu.exception.FormTriggerFailureException();     }     throw e; }

Method: com.honeywell.coreptdu.utils.oracleutils.GenericTemplateForm.sendUpdatedRowIdDetails
  genericNativeQueryHelper.sendUpdatedRowIdDetails(system.getFormName(), system.getUserSessionId(), rowid)

Method: com.honeywell.coreptdu.utils.oracleutils.GenericTemplateForm.setBlockProperty
  if (argBlockProperty.equals("defaultWhere") || argBlockProperty.equals("default_where")) {     try {         copy(hashUtils.encrypt(argPropertyValue), argBlockName + ".defaultWhere");         // defaultWhere(argBlockName,argPropertyValue);     } catch (java.lang.NoSuchFieldException | java.lang.IllegalAccessException e) {         log.error(e.getMessage());     } }
  if (argBlockName.contains("_")) {     argBlockName = com.honeywell.coreptdu.utils.oracleutils.HoneyWellUtils.toCamelCase(argBlockName); }
  com.honeywell.coreptdu.utils.oracleutils.PropertyHelpers.setBlockProperty(event, argBlockName, argBlockProperty, argPropertyValue, null, 0, 0)

Method: com.honeywell.coreptdu.utils.oracleutils.GenericTemplateForm.nameIn
  itemName = com.honeywell.coreptdu.utils.oracleutils.HoneyWellUtils.toCamelCase(itemName)
  return com.honeywell.coreptdu.utils.oracleutils.OracleHelpers.nameIn(object, itemName, system.getCursorRecordIndex(), type)

Method: com.honeywell.coreptdu.utils.oracleutils.GenericTemplateForm.message
  com.honeywell.coreptdu.utils.oracleutils.PropertyHelpers.message(event, message)

Method: com.honeywell.coreptdu.utils.oracleutils.GenericTemplateForm.getGroupRowCount
  return com.honeywell.coreptdu.utils.oracleutils.GroupUtils.getGroupRowCount(group)

Method: com.honeywell.coreptdu.utils.oracleutils.GenericTemplateForm.findGroup
  return com.honeywell.coreptdu.utils.oracleutils.GroupUtils.findGroup(groups, com.honeywell.coreptdu.utils.oracleutils.HoneyWellUtils.toCamelCase(name))

Method: com.honeywell.coreptdu.pkg.spec.IRefreshMasterLibrary.refreshRecords

Method: com.honeywell.coreptdu.utils.oracleutils.GenericTemplateForm.clearMessage
  com.honeywell.coreptdu.utils.oracleutils.PropertyHelpers.clearMessage(event)

Method: com.honeywell.coreptdu.utils.oracleutils.GenericTemplateForm.exitForm
  com.honeywell.coreptdu.utils.oracleutils.PropertyHelpers.exitForm(event, formName, commitMode, rollbackMode)

Method: com.honeywell.coreptdu.utils.oracleutils.GenericTemplateForm.setApplicationProperty
  return com.honeywell.coreptdu.utils.oracleutils.OracleHelpers.setApplicationProperty(baseInstance, argProperty, argValue)

Method: com.honeywell.coreptdu.pkg.spec.IRefreshMasterLibrary.ifRefresh

Method: com.honeywell.coreptdu.utils.oracleutils.OracleHelpers.bulkClassMapper
  try {     java.lang.Object obj = com.honeywell.coreptdu.utils.oracleutils.OracleHelpers.nameIn(sourceObj, "blocks");     // Block Supplier loader     if (obj != null) {         java.lang.reflect.Method intBlockMethod = com.honeywell.coreptdu.utils.oracleutils.OracleHelpers.getMethod(obj, "initBlocks");         if (intBlockMethod != null) {             intBlockMethod.setAccessible(true);             intBlockMethod.invoke(obj);         }         // Blocks mapping         org.springframework.beans.BeanUtils.copyProperties(obj, com.honeywell.coreptdu.utils.oracleutils.OracleHelpers.getTargetObject(targetObj));     }     // Global Value Mapping     org.springframework.beans.BeanUtils.copyProperties(sourceObj, com.honeywell.coreptdu.utils.oracleutils.OracleHelpers.getTargetObject(targetObj));     // update app instance     java.lang.reflect.Method appInstanceMethod = com.honeywell.coreptdu.utils.oracleutils.OracleHelpers.getMethod(com.honeywell.coreptdu.utils.oracleutils.OracleHelpers.getTargetObject(targetObj), "updateAppInstance");     if (appInstanceMethod != null) {         appInstanceMethod.invoke(com.honeywell.coreptdu.utils.oracleutils.OracleHelpers.getTargetObject(targetObj));     } } catch (java.lang.Exception e) {     log.error("bulkClassMapper --> " + e.getMessage()); }

Method: com.honeywell.coreptdu.global.dto.BaseResponse.render
  if (response.getErrorCode() != null) {     com.honeywell.coreptdu.global.dto.ResponseDto<T> errorResponse = new com.honeywell.coreptdu.global.dto.ResponseDto<T>(response.getErrorCode(), response.getMessage());     return renderError(errorResponse); }
  com.honeywell.coreptdu.global.dto.ResponseDto<T> successResponse = new com.honeywell.coreptdu.global.dto.ResponseDto<T>(response.getMessage(), response.getPayload(), response.getQueryCount(), response.getLastQuery())
  return renderSuccess(successResponse)

Method: com.honeywell.coreptdu.global.dto.BaseResponse.formSuccessResponse
  return new com.honeywell.coreptdu.global.dto.ResponseDto<>(message, result, count, lastQuery)

Method: com.honeywell.coreptdu.exception.ExceptionUtils.handleException
  com.honeywell.coreptdu.global.dto.ResponseDto<T> responseDto
  if (e instanceof com.honeywell.coreptdu.exception.FormTriggerFailureException) {     responseDto = new com.honeywell.coreptdu.global.dto.ResponseDto<>(100, "Form triggered Failure.", resDto);// Assuming a success message      return org.springframework.http.ResponseEntity.status(HttpStatus.OK).body(responseDto); } else if (e instanceof com.honeywell.coreptdu.exception.ExitFormException) {     responseDto = new com.honeywell.coreptdu.global.dto.ResponseDto<>(e.getMessage(), resDto);     return org.springframework.http.ResponseEntity.status(HttpStatus.BAD_REQUEST).body(responseDto); } else if (e instanceof com.honeywell.coreptdu.exception.AlertException) {     responseDto = new com.honeywell.coreptdu.global.dto.ResponseDto<>(e.getMessage(), resDto);     return org.springframework.http.ResponseEntity.status(HttpStatus.OK).body(responseDto); } else if (e instanceof com.honeywell.coreptdu.exception.FileOpenException) {     responseDto = new com.honeywell.coreptdu.global.dto.ResponseDto<>(300, e.getMessage(), resDto);     return org.springframework.http.ResponseEntity.status(HttpStatus.OK).body(responseDto); } else if (e instanceof com.honeywell.coreptdu.exception.UpdateFailureException) {     responseDto = new com.honeywell.coreptdu.global.dto.ResponseDto<>(40509, e.getMessage(), resDto);     return org.springframework.http.ResponseEntity.status(HttpStatus.BAD_REQUEST).body(responseDto); } else if (e instanceof com.honeywell.coreptdu.exception.RecordLockedException) {     responseDto = new com.honeywell.coreptdu.global.dto.ResponseDto<>(e.getMessage(), resDto);     return org.springframework.http.ResponseEntity.status(HttpStatus.OK).body(responseDto); } else {     java.lang.Throwable cause = e.getCause();     boolean isConstraintViolation = (((cause instanceof org.hibernate.exception.ConstraintViolationException) || (cause instanceof org.springframework.dao.DataIntegrityViolationException)) || (cause instanceof org.hibernate.NonUniqueObjectException)) || (cause instanceof jakarta.persistence.EntityExistsException);     if (isConstraintViolation) {         java.util.List<com.honeywell.coreptdu.global.forms.Event> event = new java.util.ArrayList<>();         com.honeywell.coreptdu.utils.oracleutils.PropertyHelpers.setAlertProperty(event, "dsp_msg", "ALERT_MESSAGE_TEXT", "");         com.honeywell.coreptdu.utils.oracleutils.PropertyHelpers.setShowAlert(event, "dsp_msg", false);         responseDto = new com.honeywell.coreptdu.global.dto.ResponseDto<>(40508, e.getMessage(), resDto);         return org.springframework.http.ResponseEntity.status(HttpStatus.OK).body(responseDto);     }     throw e; }

Method: com.honeywell.coreptdu.utils.oracleutils.GenericTemplateForm.deleteGroupRow
  com.honeywell.coreptdu.utils.oracleutils.GroupUtils.deleteGroupRow(findGroup(group), mode)

Method: com.honeywell.coreptdu.datatypes.airport.serviceimpl.AirportTriggerServiceImpl.deleteDcrNo
  log.info("deleteDcrNo Executing")
  try {     java.lang.Integer lsLength = 0;     java.lang.String lsDcr1 = null;     java.lang.String lsDcr2 = null;     lsLength = instr(("," + global.getNewDcrNo()) + ",", ("," + toInteger(plTldAirportMr.getRow(system.getCursorRecordIndex()).getCreateDcrNumber())) + ",");     if (java.util.Objects.equals(lsLength, 1)) {         lsDcr1 = null;     } else {         lsDcr1 = rtrim(ltrim(substr(global.getNewDcrNo(), 1, lsLength - 2), ", "), ", ");     }     lsDcr2 = rtrim(ltrim(substr(global.getNewDcrNo(), 1), ", "), ", ");     global.setNewDcrNo(ltrim((lsDcr1 + ",") + lsDcr2, ", "));     log.info("deleteDcrNo Executed Successfully"); } catch (java.lang.Exception e) {     log.error("Error while executing deleteDcrNo" + e.getMessage());     throw e; }

Method: com.honeywell.coreptdu.utils.oracleutils.GenericTemplateForm.goBlock
  blockName = com.honeywell.coreptdu.utils.oracleutils.HoneyWellUtils.toCamelCase(blockName)
  itemName = com.honeywell.coreptdu.utils.oracleutils.HoneyWellUtils.toCamelCase(itemName)
  com.honeywell.coreptdu.utils.oracleutils.PropertyHelpers.goBlock(event, blockName, itemName)
  // Updated by tools team
  // system.setCurrentBlock(blockName);
  // system.setCursorBlock(blockName);

Method: com.honeywell.coreptdu.utils.oracleutils.Block.getRow
  // Custom behavior before calling super.get if (data.size() > index) {     // Call the superclass method to get the actual element     E element = data.get(index);     return element; }
  try {     if (paramClass == null) {         if (!data.isEmpty()) {             // E _element = super.get(0);             // paramClass = () -> _element.getClass();             log.info("Block Supplier null");             return null;         } else {             return null;         }     }     // data.add(paramClass.get());     // return data.get(index);     return paramClass.get(); } catch (java.lang.Exception e) {     log.error(e.getMessage());     return null; }

Method: com.honeywell.coreptdu.utils.oracleutils.GenericTemplateForm.addGroupRow
  com.honeywell.coreptdu.utils.oracleutils.GroupUtils.addGroupRow(group, index)

Method: com.honeywell.coreptdu.utils.oracleutils.GenericTemplateForm.rtrim
  return com.honeywell.coreptdu.utils.oracleutils.OracleStringUtils.rtrim(str, replaceChar)

Method: com.honeywell.coreptdu.utils.oracleutils.GenericTemplateForm.ltrim
  return com.honeywell.coreptdu.utils.oracleutils.OracleStringUtils.ltrim(str, replaceChar)

Method: com.honeywell.coreptdu.utils.oracleutils.GenericTemplateForm.toInteger
  return com.honeywell.coreptdu.utils.oracleutils.OracleHelpers.toInteger(string1)

Method: com.honeywell.coreptdu.utils.oracleutils.GenericTemplateForm.nextRecord
  com.honeywell.coreptdu.utils.oracleutils.PropertyHelpers.nextRecord(event, blockName)

Method: com.honeywell.coreptdu.utils.oracleutils.GenericTemplateForm.clearRecord
  com.honeywell.coreptdu.utils.oracleutils.PropertyHelpers.clearRecord(event, blockName)

Method: com.honeywell.coreptdu.utils.oracleutils.OracleHelpers.isNullorEmpty
  if ((bool == null) || bool.isEmpty()) {     return true; }
  return false

Method: com.honeywell.coreptdu.utils.common.HashUtils.decrypt
  if (encryptedPassword == null) {     return null; }
  byte[] encryptedWithIV = java.util.Base64.getDecoder().decode(new java.lang.String(encryptedPassword))
  // Arrays.fill(encryptedPassword, '\0'); byte[] iv = java.util.Arrays.copyOfRange(encryptedWithIV, 0, com.honeywell.coreptdu.utils.common.HashUtils.IV_LENGTH)
  byte[] encryptedBytes = java.util.Arrays.copyOfRange(encryptedWithIV, com.honeywell.coreptdu.utils.common.HashUtils.IV_LENGTH, encryptedWithIV.length)
  java.util.Arrays.fill(encryptedWithIV, ((byte) (0)))
  javax.crypto.Cipher cipher = javax.crypto.Cipher.getInstance(com.honeywell.coreptdu.utils.common.HashUtils.ALGORITHM)
  cipher.init(javax.crypto.Cipher.DECRYPT_MODE, getKeySpec(encryptionKey), new javax.crypto.spec.GCMParameterSpec(com.honeywell.coreptdu.utils.common.HashUtils.TAG_LENGTH, iv))
  byte[] decryptedBytes = cipher.doFinal(encryptedBytes)
  java.util.Arrays.fill(encryptedBytes, ((byte) (0)))
  char[] decryptedChars = byteArrayToCharArray(decryptedBytes)
  java.util.Arrays.fill(decryptedBytes, ((byte) (0)))
  java.lang.String decryptString = new java.lang.String(decryptedChars)
  java.util.Arrays.fill(decryptedChars, '\u0000')
  java.util.Arrays.fill(decryptedBytes, ((byte) (0)))
  return decryptString

Method: com.honeywell.coreptdu.utils.oracleutils.GenericTemplateForm.instr
  return com.honeywell.coreptdu.utils.oracleutils.OracleStringUtils.instr(value, findchar)

Method: com.honeywell.coreptdu.utils.oracleutils.GenericTemplateForm.substr
  return com.honeywell.coreptdu.utils.oracleutils.OracleStringUtils.substr(input, startIndex, len)

Method: com.honeywell.coreptdu.pll.CoreptLib.dspMsg
  // PropertyHelpers.setAlertProperty(event, "dsp_msg", "ALERT_MESSAGE_TEXT", // msg); com.honeywell.coreptdu.utils.oracleutils.PropertyHelpers.setAlertProperty(event, "dsp_msg", "note", "Forms", msg, "ALERT_MESSAGE_TEXT", "&O.K.", null, null)
  com.honeywell.coreptdu.utils.oracleutils.PropertyHelpers.setShowAlert(event, "dsp_msg", false)

Method: com.honeywell.coreptdu.utils.dbutils.IApplication.executeProcedure

Method: com.honeywell.coreptdu.utils.oracleutils.GenericTemplateForm.like
  return com.honeywell.coreptdu.utils.oracleutils.OracleStringUtils.sqlLike(value, pattern)

Method: com.honeywell.coreptdu.utils.oracleutils.GenericTemplateForm.toChar
  return com.honeywell.coreptdu.utils.oracleutils.OracleHelpers.toString(intVal)

Method: com.honeywell.coreptdu.utils.oracleutils.GenericTemplateForm.createPlot
  com.honeywell.coreptdu.utils.oracleutils.PropertyHelpers.createPlot(event, url)

Method: com.honeywell.coreptdu.datatypes.airport.serviceimpl.AirportTriggerServiceImpl.populateRecord
  log.info("populateRecord Executing")
  try {     if (java.util.Objects.equals(upper(pBlock), "PL_STD_AIRPORT_MR")) {         pRecord.setRecordType(parameter.getRecordType());         pRecord.setAirportElevation(toChar(plStdAirportMr.getRow(system.getCursorRecordIndex()).getAirportElevation()));         pRecord.setAirportIcao(plStdAirportMr.getRow(system.getCursorRecordIndex()).getAirportIcao());         pRecord.setAirportIdent(plStdAirportMr.getRow(system.getCursorRecordIndex()).getAirportIdent());         pRecord.setAirportName(plStdAirportMr.getRow(system.getCursorRecordIndex()).getAirportName());         pRecord.setAptRefPtLatitude(plStdAirportMr.getRow(system.getCursorRecordIndex()).getAptRefPtLatitude());         pRecord.setAptRefPtLongitude(plStdAirportMr.getRow(system.getCursorRecordIndex()).getAptRefPtLongitude());         pRecord.setCustAreaCode(plStdAirportMr.getRow(system.getCursorRecordIndex()).getAreaCode());         pRecord.setAtaIataDesignator(rpad(nvl(plStdAirportMr.getRow(system.getCursorRecordIndex()).getAtaIataDesignator(), ' '), 3));         pRecord.setCycleData(plStdAirportMr.getRow(system.getCursorRecordIndex()).getCycleData());         pRecord.setDatumCode(rpad(nvl(plStdAirportMr.getRow(system.getCursorRecordIndex()).getDatumCode(), " "), 3));         pRecord.setDaylightInd(nvl(plStdAirportMr.getRow(system.getCursorRecordIndex()).getDaylightInd(), " "));         pRecord.setFileRecno(lpad(toChar(plStdAirportMr.getRow(system.getCursorRecordIndex()).getFileRecno()), 5, '0'));         pRecord.setIfrCapability(nvl(plStdAirportMr.getRow(system.getCursorRecordIndex()).getIfrCapability(), " "));         pRecord.setLongestRunway(nvl(lpad(toChar(plStdAirportMr.getRow(system.getCursorRecordIndex()).getLongestRunway()), 3, '0'), "   "));         pRecord.setLongestRunwaySurfaceCode(nvl(plStdAirportMr.getRow(system.getCursorRecordIndex()).getLongestRunwaySurfaceCode(), " "));         pRecord.setMagneticTrueInd(nvl(plStdAirportMr.getRow(system.getCursorRecordIndex()).getMagneticTrueInd(), " "));         pRecord.setMagneticVariation(rpad(nvl(plStdAirportMr.getRow(system.getCursorRecordIndex()).getMagneticVariation(), " "), 5));         pRecord.setPublicMilitaryInd(nvl(plStdAirportMr.getRow(system.getCursorRecordIndex()).getPublicMilitaryInd(), " "));         pRecord.setRecommendedNavaidIcaoCode(plStdAirportMr.getRow(system.getCursorRecordIndex()).getRecommendedNavaidIcaoCode());         pRecord.setRecommendedNavaidIdent(plStdAirportMr.getRow(system.getCursorRecordIndex()).getRecommendedNavaidIdent());         pRecord.setSpeedLimit(nvl(lpad(toChar(plStdAirportMr.getRow(system.getCursorRecordIndex()).getSpeedLimit()), 3, '0'), "   "));         pRecord.setSpeedLimitAltitude(rpad(nvl(plStdAirportMr.getRow(system.getCursorRecordIndex()).getSpeedLimitAltitude(), " "), 5));         pRecord.setTimeZone(rpad(nvl(plStdAirportMr.getRow(system.getCursorRecordIndex()).getTimeZone(), " "), 3));         pRecord.setTransitionAltitude(nvl(lpad(toChar(plStdAirportMr.getRow(system.getCursorRecordIndex()).getTransitionAltitude()), 5, '0'), "     "));         pRecord.setTransitionLevel(nvl(lpad(toChar(plStdAirportMr.getRow(system.getCursorRecordIndex()).getTransitionLevel()), 5, '0'), "     "));         pRecord.setCtldArspInd(nvl(plStdAirportMr.getRow(system.getCursorRecordIndex()).getCtldArspInd(), " "));     } else if (java.util.Objects.equals(upper(pBlock), "PL_TLD_AIRPORT_MR")) {         pRecord.setRecordType(parameter.getRecordType());         pRecord.setAirportElevation(toChar(plTldAirportMr.getRow(system.getCursorRecordIndex()).getAirportElevation()));         pRecord.setAirportIcao(plTldAirportMr.getRow(system.getCursorRecordIndex()).getAirportIcao());         pRecord.setAirportIdent(plTldAirportMr.getRow(system.getCursorRecordIndex()).getAirportIdent());         pRecord.setAirportName(plTldAirportMr.getRow(system.getCursorRecordIndex()).getAirportName());         pRecord.setAptRefPtLatitude(plTldAirportMr.getRow(system.getCursorRecordIndex()).getAptRefPtLatitude());         pRecord.setAptRefPtLongitude(plTldAirportMr.getRow(system.getCursorRecordIndex()).getAptRefPtLongitude());         pRecord.setCustAreaCode(plTldAirportMr.getRow(system.getCursorRecordIndex()).getCustomerIdent());         pRecord.setAtaIataDesignator(rpad(nvl(plTldAirportMr.getRow(system.getCursorRecordIndex()).getAtaIataDesignator(), " "), 3));         pRecord.setCycleData(plTldAirportMr.getRow(system.getCursorRecordIndex()).getCycleData());         pRecord.setDatumCode(rpad(nvl(plTldAirportMr.getRow(system.getCursorRecordIndex()).getDatumCode(), " "), 3));         pRecord.setDaylightInd(nvl(plTldAirportMr.getRow(system.getCursorRecordIndex()).getDaylightInd(), " "));         pRecord.setFileRecno(lpad(toChar(plTldAirportMr.getRow(system.getCursorRecordIndex()).getFileRecno()), 5, '0'));         pRecord.setIfrCapability(nvl(plTldAirportMr.getRow(system.getCursorRecordIndex()).getIfrCapability(), " "));         pRecord.setLongestRunway(nvl(lpad(toChar(plTldAirportMr.getRow(system.getCursorRecordIndex()).getLongestRunway()), 3, '0'), "   "));         pRecord.setLongestRunwaySurfaceCode(nvl(plTldAirportMr.getRow(system.getCursorRecordIndex()).getLongestRunwaySurfaceCode(), " "));         pRecord.setMagneticTrueInd(nvl(plTldAirportMr.getRow(system.getCursorRecordIndex()).getMagneticTrueInd(), " "));         pRecord.setMagneticVariation(rpad(nvl(plTldAirportMr.getRow(system.getCursorRecordIndex()).getMagneticVariation(), " "), 5));         pRecord.setPublicMilitaryInd(nvl(plTldAirportMr.getRow(system.getCursorRecordIndex()).getPublicMilitaryInd(), " "));         pRecord.setRecommendedNavaidIcaoCode(plTldAirportMr.getRow(system.getCursorRecordIndex()).getRecommendedNavaidIcaoCode());         pRecord.setRecommendedNavaidIdent(plTldAirportMr.getRow(system.getCursorRecordIndex()).getRecommendedNavaidIdent());         pRecord.setSpeedLimit(nvl(lpad(toChar(plTldAirportMr.getRow(system.getCursorRecordIndex()).getSpeedLimit()), 3, '0'), "   "));         pRecord.setSpeedLimitAltitude(rpad(nvl(plTldAirportMr.getRow(system.getCursorRecordIndex()).getSpeedLimitAltitude(), " "), 5));         pRecord.setTimeZone(rpad(nvl(plTldAirportMr.getRow(system.getCursorRecordIndex()).getTimeZone(), " "), 3));         pRecord.setTransitionAltitude(nvl(lpad(toChar(plTldAirportMr.getRow(system.getCursorRecordIndex()).getTransitionAltitude()), 5, '0'), "     "));         pRecord.setTransitionLevel(nvl(lpad(toChar(plTldAirportMr.getRow(system.getCursorRecordIndex()).getTransitionLevel()), 5, '0'), "     "));         pRecord.setCtldArspInd(nvl(plTldAirportMr.getRow(system.getCursorRecordIndex()).getCtldArspInd(), " "));     }     log.info("populateRecord Executed Successfully"); } catch (java.lang.Exception e) {     log.error("Error while executing populateRecord" + e.getMessage());     throw e; }
  return pRecord

Method: com.honeywell.coreptdu.utils.oracleutils.OracleHelpers.mapStructToClass
  if (struct == null) {     return null; }
  try {     T targetObject = targetClass.getDeclaredConstructor().newInstance();     java.lang.Object[] attributes = struct.getAttributes();     java.util.List<java.lang.reflect.Field> fields = java.util.Arrays.stream(targetClass.getDeclaredFields()).peek(field -> field.setAccessible(true)).collect(java.util.stream.Collectors.toList());     // Loop through each attribute and set it to the corresponding field     for (int i = 0; i < attributes.length; i++) {         if (i >= fields.size()) {             break;         }         java.lang.reflect.Field field = fields.get(i);         java.lang.Object attributeValue = attributes[i];         if ((attributeValue instanceof java.sql.Struct) && (!com.honeywell.coreptdu.utils.oracleutils.OracleHelpers.isInbuiltClass(field.getType()))) {             // Recursive mapping for nested STRUCT objects             java.lang.Object nestedObject = com.honeywell.coreptdu.utils.oracleutils.OracleHelpers.mapStructToClass(((java.sql.Struct) (attributeValue)), field.getType());             field.set(targetObject, nestedObject);         } else {             // Direct assignment for matching types             com.honeywell.coreptdu.utils.oracleutils.OracleHelpers.setFieldValue(targetObject, field, attributeValue);         }     }     return targetObject; } catch (java.lang.Exception e) {     throw new java.sql.SQLException("Failed to map STRUCT to object: " + e.getMessage(), e); }

Method: com.honeywell.coreptdu.pll.CoreptLib.isOverride
  java.lang.String vIsOverride = "N"
  java.lang.String vOverrideErrors = ""
  java.lang.String query
  com.honeywell.coreptdu.utils.oracleutils.Record _rec = null
  // Coverity-fixes log.info(toString(vIsOverride))
  try {     query = """     select unique 'Y' from cpt_override_errors       where supplier_code = ?       and   (processing_cycle = ? or permanent_ind = 'Y')       and   data_type in ('ALL', ?)       and   error_id = ?     """;     _rec = app.selectInto(query, pSupplier, pCycle, pDataType, pErrorId);     vIsOverride = _rec.getString();     // Coverity-fixes     log.info(vIsOverride);     if (java.util.Objects.equals(toString(nameIn(instance, "parameter.record_Type")), "S")) {         vOverrideErrors = toString(nameIn(instance, "control_Block.std_Override_Errors"));         if ((vOverrideErrors == null) || (instr(vOverrideErrors, ("* " + toString(pErrorId)) + ":") == 0)) {             vOverrideErrors = (((getNullClean(vOverrideErrors) + " * ") + toString(pErrorId)) + ": ") + getErrText(pErrorId);             copy(instance, vOverrideErrors, "control_Block.std_Override_Errors");         }     } else {         vOverrideErrors = toString(nameIn(instance, "control_Block.tld_Override_Errors"));         if ((vOverrideErrors == null) || (instr(vOverrideErrors, ("* " + toString(pErrorId)) + ":") == 0)) {             vOverrideErrors = (((getNullClean(vOverrideErrors) + " * ") + toString(pErrorId)) + ": ") + getErrText(pErrorId);             copy(instance, vOverrideErrors, "control_Block.tld_Override_Errors");         }     }     return true; } catch (com.honeywell.coreptdu.exception.NoDataFoundException e) {     return false; } catch (java.sql.SQLException e) {     return false; } catch (com.honeywell.coreptdu.exception.TooManyRowsException e) {     return false; }

Method: com.honeywell.coreptdu.utils.oracleutils.GenericTemplateForm.getNullClean
  if (str == null) {     return ""; }
  return str

Method: com.honeywell.coreptdu.pll.CoreptLib.getErrText
  java.lang.String lTxt
  java.sql.PreparedStatement prepareStatement = null
  com.honeywell.coreptdu.utils.oracleutils.Record _rec = null
  java.lang.String query
  try {     query = """             select error_descr     from   cpt_error_type     where  error_id = ?""";     _rec = app.selectInto(query, pErr);     lTxt = _rec.getString();     return lTxt; } catch (java.sql.SQLException e) {     return "No Description"; } catch (java.lang.Exception e) {     return "No Description"; } finally {     if (prepareStatement != null) {         prepareStatement.close();     } }

Method: com.honeywell.coreptdu.datatypes.airport.serviceimpl.AirportTriggerServiceImpl.populateRelRecord
  log.info("populateRelRecord Executing")
  try {     // if (Objects.equals(upper(pBlock), "PL_STD_AIRPORT_SR")) {     // pSrec.setRecommendedNavaidIdent(plStdAirportSr.getRecommendedNavaidIdent());     // pSrec.setRecommendedNavaidIcaoCode(plStdAirportSr.getRecommendedNavaidIcaoCode());     // pSrec.setValidateInd(plStdAirportSr.getValidateInd());     // if (Objects.equals(toInteger(global.getRecentCycle()), plStdAirportSr.getProcessingCycle())) {     // pSrec.setProcessingCycle(plStdAirportSr.getProcessingCycle());     //      // } else {     // pSrec.setProcessingCycle(toInteger(global.getRecentCycle()));     //      // }     // pSrec.setDataSupplier(plStdAirportSr.getDataSupplier());     // pSrec.setCreateDcrNumber(plStdAirportSr.getCreateDcrNumber());     // pSrec.setAirportIdent(plStdAirportSr.getAirportIdent());     // pSrec.setAirportIcao(plStdAirportSr.getAirportIcao());     // pSrec.setPublicMilitaryInd(plStdAirportSr.getPublicMilitaryInd());     //      // } else     if (java.util.Objects.equals(upper(pBlock), "PL_STD_AIRPORT_MR")) {         pSrec.setRecommendedNavaidIdent(plStdAirportMr.getRow(system.getCursorRecordIndex()).getRecommendedNavaidIdent());         pSrec.setRecommendedNavaidIcaoCode(plStdAirportMr.getRow(system.getCursorRecordIndex()).getRecommendedNavaidIcaoCode());         pSrec.setValidateInd(plStdAirportMr.getRow(system.getCursorRecordIndex()).getValidateInd());         if (java.util.Objects.equals(toInteger(global.getRecentCycle()), toInteger(plStdAirportMr.getRow(system.getCursorRecordIndex()).getProcessingCycle()))) {             pSrec.setProcessingCycle(toInteger(plStdAirportMr.getRow(system.getCursorRecordIndex()).getProcessingCycle()));         } else {             pSrec.setProcessingCycle(toInteger(global.getRecentCycle()));         }         pSrec.setDataSupplier(plStdAirportMr.getRow(system.getCursorRecordIndex()).getDataSupplier());         pSrec.setCreateDcrNumber(toInteger(plStdAirportMr.getRow(system.getCursorRecordIndex()).getCreateDcrNumber()));         pSrec.setAirportIdent(plStdAirportMr.getRow(system.getCursorRecordIndex()).getAirportIdent());         pSrec.setAirportIcao(plStdAirportMr.getRow(system.getCursorRecordIndex()).getAirportIcao());         pSrec.setPublicMilitaryInd(plStdAirportMr.getRow(system.getCursorRecordIndex()).getPublicMilitaryInd());     } else if (java.util.Objects.equals(upper(pBlock), "PL_TLD_AIRPORT_MR")) {         pTrec.setRecommendedNavaidIdent(plTldAirportMr.getRow(system.getCursorRecordIndex()).getRecommendedNavaidIdent());         pTrec.setRecommendedNavaidIcaoCode(plTldAirportMr.getRow(system.getCursorRecordIndex()).getRecommendedNavaidIcaoCode());         pTrec.setValidateInd(plTldAirportMr.getRow(system.getCursorRecordIndex()).getValidateInd());         pTrec.setCustomerIdent(plTldAirportMr.getRow(system.getCursorRecordIndex()).getCustomerIdent());         pTrec.setDataSupplier(plTldAirportMr.getRow(system.getCursorRecordIndex()).getDataSupplier());         pTrec.setGeneratedInHouseFlag(plTldAirportMr.getRow(system.getCursorRecordIndex()).getGeneratedInHouseFlag());         pTrec.setProcessingCycle(toInteger(plTldAirportMr.getRow(system.getCursorRecordIndex()).getProcessingCycle()));         pTrec.setCreateDcrNumber(null);         pTrec.setAirportIdent(plTldAirportMr.getRow(system.getCursorRecordIndex()).getAirportIdent());         pTrec.setAirportIcao(plTldAirportMr.getRow(system.getCursorRecordIndex()).getAirportIcao());         pTrec.setPublicMilitaryInd(plTldAirportMr.getRow(system.getCursorRecordIndex()).getPublicMilitaryInd());     }     log.info("populateRelRecord Executed Successfully"); } catch (java.lang.Exception e) {     log.error("Error while executing populateRelRecord" + e.getMessage());     throw e; }
  return new com.honeywell.coreptdu.datatypes.airport.serviceimpl.InnerAirportTriggerServiceImpl(pSrec, pTrec)

Method: com.honeywell.coreptdu.utils.oracleutils.GenericTemplateForm.toString
  return com.honeywell.coreptdu.utils.oracleutils.OracleHelpers.toString(inputString)

Method: com.honeywell.coreptdu.pll.CoreptLib.setindandmessage
  java.lang.String query = ""
  com.honeywell.coreptdu.utils.oracleutils.Record rec = null
  java.lang.String vDataType = substr(pBlock, 4, 3)
  java.lang.String vControl = null
  try {     try {         if (!java.util.Arrays.asList("STD", "TLD").contains(upper(vDataType))) {             vDataType = "TLD";         }         if (like("%_SR", upper(pBlock))) {             vControl = ("CONTROL_BLOCK." + vDataType) + "_Validation_Errors_Sr";         } else if (like("%_MR", upper(pBlock))) {             vControl = ("CONTROL_BLOCK." + vDataType) + "_VALIDATION_ERRORS_MR";         } else if (like("%_LEG", upper(pBlock)) || like("%_VIA", upper(pBlock))) {             vControl = ("CONTROL_BLOCK." + vDataType) + "_LEG_ERORS";         } else if (like("%_SEQ", upper(pBlock)) || like("%_OP_TIME", upper(pBlock))) {             vControl = ("CONTROL_BLOCK." + vDataType) + "_VALIDATION_ERRORS_DETAIL";         } else {             vControl = ("CONTROL_BLOCK." + vDataType) + "_VALIDATION_ERRORS";         }         if (!java.util.Objects.equals(rtrim(pAllErr), null)) {             if (!java.util.Objects.equals(nvl(nameIn(instance, pBlock + ".VALIDATE_IND"), "N"), "I")) {                 if (!java.util.Objects.equals(pWorkType, "VIEW")) {                     // RSR                     copy(instance, "I", pBlock + ".VALIDATE_IND");                     resetform(pInd, pBlock);                 }             }             copy(instance, pAllErr, vControl);             setItemProperty(vControl, com.honeywell.coreptdu.global.forms.FormConstant.VISIBLE, com.honeywell.coreptdu.global.forms.FormConstant.PROPERTY_TRUE);             setItemProperty(vControl, com.honeywell.coreptdu.global.forms.FormConstant.ENABLED, com.honeywell.coreptdu.global.forms.FormConstant.PROPERTY_TRUE);         } else {             setItemProperty(vControl, com.honeywell.coreptdu.global.forms.FormConstant.ENABLED, com.honeywell.coreptdu.global.forms.FormConstant.PROPERTY_FALSE);             setItemProperty(vControl, com.honeywell.coreptdu.global.forms.FormConstant.VISIBLE, com.honeywell.coreptdu.global.forms.FormConstant.PROPERTY_FALSE);             if (java.util.Arrays.asList("I", "Y").contains(nvl(nameIn(instance, pBlock + ".VALIDATE_IND"), "I"))) {                 if (java.util.Objects.equals(pWorkType, "VIEW")) {                     java.lang.String msgControl = "Record correct. Validate indicator can be updated only in Data Entry mode.";                     copy(instance, msgControl, vControl);                     setItemProperty(vControl, com.honeywell.coreptdu.global.forms.FormConstant.VISIBLE, com.honeywell.coreptdu.global.forms.FormConstant.PROPERTY_TRUE);                     setItemProperty(vControl, com.honeywell.coreptdu.global.forms.FormConstant.ENABLED, com.honeywell.coreptdu.global.forms.FormConstant.PROPERTY_TRUE);                 } else {                     copy(instance, pInd, pBlock + ".VALIDATE_IND");                     resetform(pInd, pBlock);                 }             } else if (java.util.Objects.equals(nvl(nameIn(instance, pBlock + ".VALIDATE_IND"), "I"), "Y") && java.util.Objects.equals(pInd, "O")) {                 if (java.util.Objects.equals(pWorkType, "VIEW")) {                     java.lang.String msgControl = "Record has override error. Validate indicator can be updated only in Data Entry mode.";                     copy(instance, msgControl, vControl);                     setItemProperty(vControl, com.honeywell.coreptdu.global.forms.FormConstant.VISIBLE, com.honeywell.coreptdu.global.forms.FormConstant.PROPERTY_TRUE);                     setItemProperty(vControl, com.honeywell.coreptdu.global.forms.FormConstant.ENABLED, com.honeywell.coreptdu.global.forms.FormConstant.PROPERTY_TRUE);                 } else {                     copy(instance, pInd, pBlock + ".VALIDATE_IND");                     resetform(pInd, pBlock);                 }             } else if (java.util.Objects.equals(nvl(nameIn(instance, pBlock + ".validate_Ind"), "I"), "O") && java.util.Objects.equals(pInd, "Y")) {                 if (java.util.Objects.equals(pWorkType, "VIEW")) {                     copy(instance, "Record correct. Validate indicator can be updated only in Data Entry mode.", vControl);                     setItemProperty(vControl, com.honeywell.coreptdu.global.forms.FormConstant.VISIBLE, com.honeywell.coreptdu.global.forms.FormConstant.PROPERTY_TRUE);                     setItemProperty(vControl, com.honeywell.coreptdu.global.forms.FormConstant.ENABLED, com.honeywell.coreptdu.global.forms.FormConstant.PROPERTY_TRUE);                 } else {                     copy(instance, pInd, pBlock + ".VALIDATE_IND");                     resetform(pInd, pBlock);                 }             }         }         if (java.util.Objects.equals(pIgnoreRef, "N")) {             if (toInteger(nameIn(instance, "global.recent_Cycle")) < toInteger(nameIn(instance, pBlock + ".processing_Cycle"))) {                 refreshMasterLibrary.deleteFromRefTable(toInteger(nameIn(instance, pBlock + ".create_dcr_number")), null);             } else if ((!java.util.Objects.equals(pWorkType, "VIEW")) && java.util.Arrays.asList("I", "W", "N").contains(nameIn(instance, pBlock + ".validate_ind"))) {                 refreshMasterLibrary.deleteFromRefTable(toInteger(nameIn(instance, pBlock + ".create_dcr_number")), null);             }         }     }// others     // Manually coped form fmb and commanded also in fmb     // --		if name_in('system.record_status') != 'QUERY' then     // --  		copy(name_in('global.dcr_number'),p_block||'.update_dcr_number');     // --  	end if;     // --  	if name_in(p_block||'.validate_ind') != name_in(p_block||'.validate_ind_real') then     // --  		copy(name_in(p_block||'.validate_ind'), name_in(p_block||'.validate_ind_real'));     // --  	end if;      catch (java.lang.Exception e) {         // TODO Set_Application_Property(cursor_style,'DEFAULT');         // TODO dsp_msg(sqlerrm);         throw e;     }     log.info("Data Retreived Successfully"); } catch (java.lang.Exception e) {     log.error("Error while receiving data" + e.getMessage());     throw e; }

Method: com.honeywell.coreptdu.datatypes.airport.serviceimpl.AirportTriggerServiceImpl.setUpdateDcr
  log.info("setUpdateDcr Executing")
  java.lang.String query = ""
  try {     com.honeywell.coreptdu.global.dbtype.PlTldAirportType rtldAirport = null;     com.honeywell.coreptdu.global.dbtype.PlStdAirportType rstdAirport = null;     java.lang.Integer vDcr = toInteger(nameIn(this, pBlock + ".create_dcr_number"));     java.lang.String vCycleData = substr(toString(nameIn(this, pBlock + ".processing_cycle")), 3);     java.lang.Integer vCount = 0;     java.util.List<com.honeywell.coreptdu.utils.oracleutils.Record> recs = null;     if (com.honeywell.coreptdu.utils.oracleutils.OracleHelpers.sqlLike(pBlock, "PL_STD%")) {         query = "select * from pl_std_airport where create_dcr_number=?";         recs = app.executeQuery(query, vDcr);         for (com.honeywell.coreptdu.utils.oracleutils.Record rc : recs) {             rstdAirport = app.mapResultSetToClass(rc, com.honeywell.coreptdu.global.dbtype.PlStdAirportType.class);             vCount = vCount + 1;             if ((((((((((((((((((((((!java.util.Objects.equals(nvl(pRecord.getAirportElevation(), 0), nvl(rstdAirport.getAirportElevation(), 0))) || (!java.util.Objects.equals(nvl(pRecord.getAirportName(), " "), nvl(rstdAirport.getAirportName(), " ")))) || (!java.util.Objects.equals(nvl(pRecord.getAptRefPtLatitude(), " "), nvl(rstdAirport.getAptRefPtLatitude(), " ")))) || (!java.util.Objects.equals(nvl(pRecord.getAptRefPtLongitude(), " "), nvl(rstdAirport.getAptRefPtLongitude(), " ")))) || (!java.util.Objects.equals(nvl(pRecord.getCustAreaCode(), " "), nvl(rstdAirport.getAreaCode(), " ")))) || (!java.util.Objects.equals(pRecord.getAtaIataDesignator(), rpad(nvl(rstdAirport.getAtaIataDesignator(), " "), 3)))) || (!java.util.Objects.equals(pRecord.getDatumCode(), rpad(nvl(rstdAirport.getDatumCode(), " "), 3)))) || (!java.util.Objects.equals(pRecord.getDaylightInd(), nvl(rstdAirport.getDaylightInd(), " ")))) || (!java.util.Objects.equals(pRecord.getCtldArspInd(), nvl(rstdAirport.getCtldArspInd(), " ")))) || (!java.util.Objects.equals(pRecord.getIfrCapability(), nvl(rstdAirport.getIfrCapability(), " ")))) || (!java.util.Objects.equals(pRecord.getLongestRunway(), nvl(lpad(toChar(rstdAirport.getLongestRunway()), 3, '0'), " ")))) || (!java.util.Objects.equals(pRecord.getLongestRunwaySurfaceCode(), nvl(rstdAirport.getLongestRunwaySurfaceCode(), " ")))) || (!java.util.Objects.equals(pRecord.getMagneticTrueInd(), nvl(rstdAirport.getMagneticTrueInd(), " ")))) || (!java.util.Objects.equals(pRecord.getMagneticVariation(), rpad(nvl(rstdAirport.getMagneticVariation(), " "), 5)))) || (!java.util.Objects.equals(pRecord.getPublicMilitaryInd(), nvl(rstdAirport.getPublicMilitaryInd(), " ")))) || (!java.util.Objects.equals(nvl(pRecord.getRecommendedNavaidIcaoCode(), " "), nvl(rstdAirport.getRecommendedNavaidIcaoCode(), " ")))) || (!java.util.Objects.equals(nvl(pRecord.getRecommendedNavaidIdent(), " "), nvl(rstdAirport.getRecommendedNavaidIdent(), " ")))) || (!java.util.Objects.equals(pRecord.getSpeedLimit(), nvl(lpad(toChar(rstdAirport.getSpeedLimit()), 3, '0'), " ")))) || (!java.util.Objects.equals(pRecord.getSpeedLimitAltitude(), rpad(nvl(rstdAirport.getSpeedLimitAltitude(), " "), 5)))) || (!java.util.Objects.equals(pRecord.getTimeZone(), rpad(nvl(rstdAirport.getTimeZone(), " "), 3)))) || (!java.util.Objects.equals(pRecord.getTransitionAltitude(), nvl(lpad(toChar(rstdAirport.getTransitionAltitude()), 5, '0'), " ")))) || (!java.util.Objects.equals(pRecord.getTransitionLevel(), nvl(lpad(toChar(rstdAirport.getTransitionLevel()), 5, '0'), " ")))) {                 copy(toInteger(global.getDcrNumber()), pBlock + ".update_dcr_number");                 copy(vCycleData, pBlock + ".cycle_data");             }         }     } else if (like(pBlock, "PL_TLD%")) {         query = "select * from pl_tld_airport where create_dcr_number=?";         recs = app.executeQuery(query, vDcr);         for (com.honeywell.coreptdu.utils.oracleutils.Record rc : recs) {             rtldAirport = app.mapResultSetToClass(rc, com.honeywell.coreptdu.global.dbtype.PlTldAirportType.class);             vCount = vCount + 1;             if (((((((((((((((((((((!java.util.Objects.equals(nvl(pRecord.getAirportElevation(), 0), nvl(rtldAirport.getAirportElevation(), 0))) || (!java.util.Objects.equals(nvl(pRecord.getAirportName(), " "), nvl(rtldAirport.getAirportName(), " ")))) || (!java.util.Objects.equals(nvl(pRecord.getAptRefPtLatitude(), " "), nvl(rtldAirport.getAptRefPtLatitude(), " ")))) || (!java.util.Objects.equals(nvl(pRecord.getAptRefPtLatitude(), " "), nvl(rtldAirport.getAptRefPtLongitude(), " ")))) || (!java.util.Objects.equals(pRecord.getAptRefPtLongitude(), rpad(nvl(rtldAirport.getAtaIataDesignator(), " "), 3)))) || (!java.util.Objects.equals(pRecord.getDatumCode(), rpad(nvl(rtldAirport.getDatumCode(), " "), 3)))) || (!java.util.Objects.equals(pRecord.getDaylightInd(), nvl(rtldAirport.getDaylightInd(), " ")))) || (!java.util.Objects.equals(pRecord.getCtldArspInd(), nvl(rtldAirport.getCtldArspInd(), " ")))) || (!java.util.Objects.equals(pRecord.getIfrCapability(), nvl(rtldAirport.getIfrCapability(), " ")))) || (!java.util.Objects.equals(pRecord.getLongestRunway(), nvl(lpad(toChar(rtldAirport.getLongestRunway()), 3, '0'), " ")))) || (!java.util.Objects.equals(pRecord.getLongestRunwaySurfaceCode(), nvl(rtldAirport.getLongestRunwaySurfaceCode(), " ")))) || (!java.util.Objects.equals(pRecord.getMagneticTrueInd(), nvl(rtldAirport.getMagneticTrueInd(), " ")))) || (!java.util.Objects.equals(pRecord.getMagneticVariation(), rpad(nvl(rtldAirport.getMagneticVariation(), " "), 5)))) || (!java.util.Objects.equals(pRecord.getPublicMilitaryInd(), nvl(rtldAirport.getPublicMilitaryInd(), " ")))) || (!java.util.Objects.equals(nvl(pRecord.getRecommendedNavaidIcaoCode(), " "), nvl(rtldAirport.getRecommendedNavaidIcaoCode(), " ")))) || (!java.util.Objects.equals(nvl(pRecord.getRecommendedNavaidIcaoCode(), " "), nvl(rtldAirport.getRecommendedNavaidIdent(), " ")))) || (!java.util.Objects.equals(pRecord.getSpeedLimit(), nvl(lpad(toChar(rtldAirport.getSpeedLimit()), 3, '0'), " ")))) || (!java.util.Objects.equals(pRecord.getSpeedLimitAltitude(), rpad(nvl(rtldAirport.getSpeedLimitAltitude(), " "), 5)))) || (!java.util.Objects.equals(pRecord.getTimeZone(), rpad(nvl(rtldAirport.getTimeZone(), " "), 3)))) || (!java.util.Objects.equals(pRecord.getTransitionAltitude(), nvl(lpad(toChar(rtldAirport.getTransitionAltitude()), 5, '0'), " ")))) || (!java.util.Objects.equals(pRecord.getTransitionLevel(), nvl(lpad(toChar(rtldAirport.getTransitionLevel()), 5, '0'), " ")))) {                 copy(toInteger(global.getDcrNumber()), pBlock + ".update_dcr_number");                 copy(vCycleData, pBlock + ".cycle_data");             }         }     }     if (java.util.Objects.equals(vCount, 0)) {         copy(toInteger(global.getDcrNumber()), pBlock + ".update_dcr_number");         copy(vCycleData, pBlock + ".cycle_data");     }     log.info("setUpdateDcr Executed Successfully"); } catch (java.lang.Exception e) {     log.error("Error while executing setUpdateDcr" + e.getMessage());     throw e; }

Method: com.honeywell.coreptdu.utils.oracleutils.GenericTemplateForm.upper
  return com.honeywell.coreptdu.utils.oracleutils.OracleHelpers.upper(str)

Method: com.honeywell.coreptdu.pll.CoreptLib.setoverridebutton
  java.lang.String query = ""
  com.honeywell.coreptdu.utils.oracleutils.Record rec = null
  java.sql.PreparedStatement prepareStatement = null
  java.lang.String pRecordType = null
  java.lang.String pFormType = null
  java.lang.String pOverrideErrors = null
  java.lang.String pOverrideButton = null
  try {     if (like("PL_STD%", pBlock)) {         pRecordType = "STD";     } else if (like("PL_TLD%", pBlock)) {         pRecordType = "TLD";     }     if (like("%MR", pBlock)) {         pFormType = "_MR";     } else if (like("%SR", pBlock)) {         pFormType = "_SR";     }     pOverrideErrors = ("CONTROL_BLOCK." + pRecordType) + "_OVERRIDE_ERRORS";     pOverrideButton = (("CONTROL_BLOCK." + pRecordType) + "_OVERIDE") + pFormType;     if (!java.util.Objects.equals(com.honeywell.coreptdu.utils.oracleutils.OracleHelpers.nameIn(instance, pOverrideErrors), null)) {         // if (Objects.equals(toChar(nameIn(instance,pOverrideButton)), null)) {         setItemProperty(pOverrideButton, com.honeywell.coreptdu.global.forms.FormConstant.VISIBLE, com.honeywell.coreptdu.global.forms.FormConstant.PROPERTY_TRUE);         setItemProperty(pOverrideButton, com.honeywell.coreptdu.global.forms.FormConstant.ENABLED, com.honeywell.coreptdu.global.forms.FormConstant.PROPERTY_TRUE);         // }     } else {         hideView(lower(pRecordType) + "_OVER");         setItemProperty(pOverrideButton, com.honeywell.coreptdu.global.forms.FormConstant.ENABLED, com.honeywell.coreptdu.global.forms.FormConstant.PROPERTY_FALSE);         setItemProperty(pOverrideButton, com.honeywell.coreptdu.global.forms.FormConstant.VISIBLE, com.honeywell.coreptdu.global.forms.FormConstant.PROPERTY_FALSE);     }     log.info("Data Retreived Successfully"); } catch (java.lang.Exception e) {     log.error("Error while receiving data" + e.getMessage());     throw e; }

Method: com.honeywell.coreptdu.pll.CoreptLib.setinitialerrordisplay
  java.lang.String pControl = null
  java.lang.String pRecordType = null
  java.lang.String pFormType = null
  java.lang.String pOverrideButton = null
  java.lang.String pOverrideErrors = null
  try {     if (like("PL_STD%", pBlock)) {         pRecordType = "STD";     } else if (like("PL_TLD%", pBlock)) {         pRecordType = "TLD";     }     if (like("%MR", pBlock)) {         pFormType = "_MR";     } else if (like("%SR", pBlock)) {         pFormType = "_SR";     }     pControl = (("CONTROL_BLOCK." + pRecordType) + "_VALIDATION_ERRORS") + pFormType;     setItemProperty(pControl, com.honeywell.coreptdu.global.forms.FormConstant.ENABLED, com.honeywell.coreptdu.global.forms.FormConstant.PROPERTY_FALSE);     setItemProperty(pControl, com.honeywell.coreptdu.global.forms.FormConstant.VISIBLE, com.honeywell.coreptdu.global.forms.FormConstant.PROPERTY_FALSE);     com.honeywell.coreptdu.utils.oracleutils.OracleHelpers.copy(instance, null, com.honeywell.coreptdu.utils.oracleutils.HoneyWellUtils.toCamelCase(pControl));     pOverrideErrors = ("CONTROL_BLOCK." + pRecordType) + "_OVERRIDE_ERRORS";     pOverrideButton = (("CONTROL_BLOCK." + pRecordType) + "_OVERIDE") + pFormType;     com.honeywell.coreptdu.utils.oracleutils.OracleHelpers.copy(instance, null, com.honeywell.coreptdu.utils.oracleutils.HoneyWellUtils.toCamelCase(pOverrideErrors));     hideView(lower(pRecordType) + "_Over");     setItemProperty(pOverrideButton, com.honeywell.coreptdu.global.forms.FormConstant.ENABLED, com.honeywell.coreptdu.global.forms.FormConstant.PROPERTY_FALSE);     setItemProperty(pOverrideButton, com.honeywell.coreptdu.global.forms.FormConstant.VISIBLE, com.honeywell.coreptdu.global.forms.FormConstant.PROPERTY_FALSE);     log.info("Data Retreived Successfully"); } catch (java.lang.Exception e) {     log.error("Error while receiving data" + e.getMessage());     throw e; }

Method: com.honeywell.coreptdu.utils.oracleutils.GenericTemplateForm.lower
  return com.honeywell.coreptdu.utils.oracleutils.OracleHelpers.lower(str)

Method: com.honeywell.coreptdu.utils.oracleutils.PropertyHelpers.setAlertProperty
  com.honeywell.coreptdu.global.forms.Event event = new com.honeywell.coreptdu.global.forms.Event()
  event.setName("setAlertProperty")
  com.honeywell.coreptdu.global.forms.SetAlertProperty alertProperty = new com.honeywell.coreptdu.global.forms.SetAlertProperty()
  alertProperty.setAlertName(alertName)
  alertProperty.setAlertType(alertType)
  alertProperty.setTitle(title)
  alertProperty.setAlertMessage(message)
  alertProperty.setProperty(property)
  alertProperty.setButton1Label(button1Label)
  alertProperty.setButton2Label(button2Label)
  alertProperty.setButton3Label(button3Label)
  alertProperty.setContentClass(contentClass)
  event.setValue(alertProperty)
  list.add(event)

Method: com.honeywell.coreptdu.utils.oracleutils.PropertyHelpers.setShowAlert
  com.honeywell.coreptdu.global.forms.Event event = new com.honeywell.coreptdu.global.forms.Event()
  event.setName("showAlert")
  com.honeywell.coreptdu.global.forms.ShowAlert showAlert = new com.honeywell.coreptdu.global.forms.ShowAlert()
  showAlert.setAlertName(alertName)
  showAlert.setToContinue(toContinue)
  event.setValue(showAlert)
  list.add(event)

Method: com.honeywell.coreptdu.utils.oracleutils.HoneyWellUtils.toCamelCase
  java.lang.StringBuilder result = new java.lang.StringBuilder()
  if (!str.contains("_")) {     return str; }
  java.lang.String[] words = str.toLowerCase().split("_")
  for (java.lang.String word : words) {     if (result.length() == 0) {         result.append(word.toLowerCase());     } else {         result.append(java.lang.Character.toUpperCase(word.charAt(0)));         result.append(word.substring(1).toLowerCase());     } }
  return result.toString()

Method: com.honeywell.coreptdu.utils.oracleutils.GenericTemplateForm.getBlockMetaData
  if ("PROMPT_NAME".equals(fieldName)) {     return blockDetail.getItems().stream().map(com.honeywell.coreptdu.global.forms.ItemDetail::getPromptName).collect(java.util.stream.Collectors.toList()); }
  if ("DATABASE_COLUMN".equals(fieldName)) {     return blockDetail.getItems().stream().map(com.honeywell.coreptdu.global.forms.ItemDetail::getDatabaseColumn).collect(java.util.stream.Collectors.toList()); }
  return new java.util.ArrayList<java.lang.String>()

Method: com.honeywell.coreptdu.utils.oracleutils.GenericTemplateForm.substrWithLen
  return com.honeywell.coreptdu.utils.oracleutils.OracleHelpers.substrWithLen(value, startPosition, length)

Method: com.honeywell.coreptdu.utils.oracleutils.OracleHelpers.instr
  int finder = 0
  if (com.honeywell.coreptdu.utils.oracleutils.OracleHelpers.isNullorEmpty(value)) {     return 0; }
  for (int i = start; i < value.length(); i++) {     for (int j = 0; j < findchar.length(); j++) {         if (value.charAt(i) == findchar.charAt(j)) {             finder++;             i++;         } else {             finder = 0;         }     }     if (finder == findchar.length()) {         if (occurrence == 1) {             return (i - findchar.length()) + 1;         } else {             occurrence--;             i--;             finder = 0;         }     } }
  return 0

Method: com.honeywell.coreptdu.utils.oracleutils.GenericTemplateForm.getExportHeader
  java.lang.StringBuilder header = new java.lang.StringBuilder()
  com.honeywell.coreptdu.utils.oracleutils.Record rec
  try {     java.lang.String dateQuery = """          SELECT TO_CHAR(SYSDATE , 'Month DD,YYYY') as formatted_date  FROM DUAL     """;     java.lang.String timeQuery = """     SELECT  to_char(sysdate,'HH24:MI') FROM DUAL     """;     rec = app.selectInto(dateQuery);     com.honeywell.coreptdu.utils.oracleutils.Record rec1 = app.selectInto(timeQuery);     if (depth == 0) {         header.append("Generated on ").append(rec.getObject()).append(" at ").append(rec1.getObject()).append("\n").append("\n");     }     for (int i = 0; i < depth; i++) {         header.append(delimiter);     }     // Header Generator     for (java.lang.String column : headerColumns) {         header.append("\"").append(column).append("\"").append(delimiter);     } } catch (java.lang.Exception e) {     log.error("Error Throwed", e); }
  header.append("\n")
  return header.toString()

Method: com.honeywell.coreptdu.utils.dbutils.IApplication.executeQuery

Method: com.honeywell.coreptdu.utils.dbutils.IApplication.mapResultSetToClass

Method: com.honeywell.coreptdu.utils.oracleutils.GenericTemplateForm.getExportData
  java.lang.StringBuilder data = new java.lang.StringBuilder()
  for (int i = 0; i < depth; i++) {     data.append(delimiter); }
  data.append(ObjecttoString(obj, columns, delimiter, fileType))
  data.append("\n")
  return data.toString()

Method: com.honeywell.coreptdu.utils.dbutils.IApplication.selectInto

Method: com.honeywell.coreptdu.utils.oracleutils.Record.getObject
  try {     int index = findIndexIgnoreCase(columns, colName);     if (index != (-1)) {         return data[index];     }     return null; } catch (java.lang.Exception e) {     throw new java.lang.RuntimeException(e); }

Method: com.honeywell.coreptdu.utils.oracleutils.GenericTemplateForm.getApplicationProperty
  java.lang.String strReturn = null
  if (com.honeywell.coreptdu.global.forms.FormConstant.CURRENT_FORM_NAME.equals(argFormName)) {     strReturn = system.getCurrentForm(); } else if (com.honeywell.coreptdu.global.forms.FormConstant.CALLING_FORM.equals(argFormName)) {     strReturn = system.getCallingForm(); }
  return strReturn

Method: com.honeywell.coreptdu.utils.oracleutils.GenericTemplateForm.findWindow
  try {     // ClassLoader classLoader = getClass().getClassLoader();     // String path = "windows.json";     // File file = new File(classLoader.getResource(path).getFile());     // Define a type reference for nested maps     // TypeReference<Map<String, Map<String, window>>> typeRef = new     // TypeReference<Map<String, Map<String, window>>>() {     // };     // Read the file and map it to the nested map structure     // Map<String, Map<String, window>> data = mapper.readValue(file, typeRef);     // if (data.containsKey(formName)) {     // Map<String, window> windows = data.get(formName);     // if (windows.containsKey(windowName)) {     // return windows.get(windowName);     // }     // }     java.util.Map<java.lang.String, com.honeywell.coreptdu.global.forms.WindowDetail> windMap = ((java.util.Map<java.lang.String, com.honeywell.coreptdu.global.forms.WindowDetail>) (com.honeywell.coreptdu.utils.oracleutils.OracleHelpers.nameIn(baseInstance, "windows")));     com.honeywell.coreptdu.global.forms.WindowDetail windowDetail = windMap.get(windowName);     return windowDetail; } catch (java.lang.Exception e) {     return null; }

Method: com.honeywell.coreptdu.utils.oracleutils.GenericTemplateForm.getWindowProperty
  if (propertyName.toLowerCase().equals("title")) {     return window.getTitle(); }
  return null

Method: com.honeywell.coreptdu.utils.oracleutils.GenericTemplateForm.getFormProperty
  java.lang.String strReturn = null
  // List<OrderDto> blocks = getFormBlocks(argFormName); // if (!blocks.isEmpty() && ("FIRST_NAVIGATION_BLOCK".equals(argFormProperty) // || FIRST_BLOCK.equals(argFormProperty))) { // strReturn = blocks.get(0).getBlockname(); // } else if (LAST_BLOCK.equals(argFormProperty)) { // strReturn = blocks.get(blocks.size() - 1).getBlockname(); // } return com.honeywell.coreptdu.utils.oracleutils.OracleHelpers.getFormProperty(baseInstance, argFormName, argFormProperty)

Method: com.honeywell.coreptdu.utils.oracleutils.GenericTemplateForm.defaultValue
  java.lang.String[] parts = targetValue.split("\\.")
  if (parts.length == 2) {     java.lang.String prefix = parts[0];     java.lang.String fieldName = com.honeywell.coreptdu.utils.oracleutils.HoneyWellUtils.toCamelCase(parts[1]);     com.honeywell.coreptdu.utils.oracleutils.OracleHelpers.defaultValue(com.honeywell.coreptdu.utils.oracleutils.OracleHelpers.nameIn(baseInstance, prefix), srcValue, fieldName); }

Method: com.honeywell.coreptdu.utils.dbutils.IApplication.getUserName

Method: com.honeywell.coreptdu.utils.oracleutils.GenericTemplateForm.setWindowProperty
  com.honeywell.coreptdu.utils.oracleutils.PropertyHelpers.setWindowProperty(event, windowName, property, x, y)

Method: com.honeywell.coreptdu.pll.CoreptLib.setRole
  java.lang.String query = ""
  try {     try {         if (!java.util.Objects.equals(pRole, null)) {             // coverity-fixes             try (java.sql.Connection con = app.getDataSource().getConnection()) {                 java.lang.String plsql = "{ CALL DBMS_SESSION.SET_ROLE(?) }";                 try (java.sql.CallableStatement callableStatement = con.prepareCall(plsql)) {                     // Bind the role parameter                     callableStatement.setString(1, pRole);                     // Execute the PL/SQL block                     callableStatement.execute();                     callableStatement.close();                 }                 con.close();             }             // finally {             // con.close();             // }             // TODO dbms_session.set_role(p_role);             // query = "BEGIN DBMS_SESSION.SET_ROLE('" + pRole + "'); END;";             // app.executeQuery(query);         }         log.info("Data Retreived Successfully");         return "PASSED";     }// others      catch (java.lang.Exception e) {         return "Failed " + com.honeywell.coreptdu.utils.oracleutils.OracleHelpers.getSQLcode(e);     } } catch (java.lang.Exception e) {     log.error("Error while receiving data" + e.getMessage());     throw e; }

Method: com.honeywell.coreptdu.pkg.spec.IDisplayAlert.oneButton

Method: com.honeywell.coreptdu.utils.oracleutils.Record.getString
  try {     com.honeywell.coreptdu.utils.oracleutils.var obj = getNext(true);     if (obj == null) {         return null;     }     return java.lang.String.valueOf(obj); } catch (java.lang.Exception e) {     throw new java.lang.RuntimeException(e); }

Method: com.honeywell.coreptdu.utils.oracleutils.GenericTemplateForm.setItemProperty
  com.honeywell.coreptdu.global.dto.BlockItemModel bim = com.honeywell.coreptdu.utils.oracleutils.HoneyWellUtils.getBlockItem(com.honeywell.coreptdu.utils.oracleutils.GenericTemplateForm.toSnakeCase(argBlockItemToken))
  com.honeywell.coreptdu.utils.oracleutils.PropertyHelpers.setItemProperty(event, bim.getBlockName(), bim.getItemName(), argProperty, argPropertyValue)

Method: com.honeywell.coreptdu.datatypes.corepttemplate.serviceimpl.CoreptTemplateTriggerServiceImpl.populateItems
  log.info("populateItems Executing")
  java.lang.String query = ""
  com.honeywell.coreptdu.utils.oracleutils.Record rec = null
  try {     java.lang.String scrDescription = null;     java.lang.String scrPartNumber = null;     com.honeywell.coreptdu.utils.oracleutils.OracleHelpers.bulkClassMapper(this, coreptLib);     java.util.List<java.lang.String> getModuleInformation = coreptLib.getModuleInformation(mname, scrDescription, scrPartNumber);     scrDescription = getModuleInformation.get(0);     scrPartNumber = getModuleInformation.get(1);     if (java.util.Objects.equals(nameIn(this, "parameter.work_type"), "VIEW")) {         displayItemBlock.setFormDesc(substr(scrDescription, 1, instr(scrDescription, "/") - 1) + substr(scrDescription, instr(scrDescription, "/") + 7));     } else {         displayItemBlock.setFormDesc(scrDescription);     }     displayItemBlock.setFormDateTime(java.time.LocalDateTime.now().format(java.time.format.DateTimeFormatter.ofPattern("dd-MMM-yyyy HH:mm:ss")).toUpperCase());     displayItemBlock.setFormName(mname);     displayItemBlock.setFormPartNumber(scrPartNumber);     try {         query = """         SELECT data_supplier_name         		from   data_supplier         		WHERE  data_supplier = nvl(?,'T')         """;         rec = app.selectInto(query, global.getDataSupplier());         displayItemBlock.setFormSource(rec.getString());     }// no_data_found      catch (com.honeywell.coreptdu.exception.NoDataFoundException e) {         displayItemBlock.setFormSource(global.getDataSupplier());     }     query = """     SELECT DECODE(nvl(?,'S'),'S','STANDARD','T','TAILORED','UNKNOWN')||', '||?||', '||     				  DECODE(nvl(?,'VIEW'),'VIEW','Query Only','Data Entry')        from   dual     """;     rec = app.selectInto(query, parameter.getRecordType(), parameter.getLibraryAccess(), parameter.getWorkType());     displayItemBlock.setFormRecordType(rec.getString());     log.info("populateItems Executed Successfully"); } catch (java.lang.Exception e) {     log.error("Error while executing populateItems" + e.getMessage());     throw e; }

Method: com.honeywell.coreptdu.pll.CoreptLib.unsetQueryMenuItems
  java.lang.String vForm = system.getCurrentForm()
  setMenuItemProperty((rtrim("Query") + ".") + ltrim("Cancel"), com.honeywell.coreptdu.global.forms.FormConstant.ENABLED, com.honeywell.coreptdu.global.forms.FormConstant.BPROPERTY_FALSE)
  setMenuItemProperty((rtrim("Query") + ".") + ltrim("LastCriteria"), com.honeywell.coreptdu.global.forms.FormConstant.ENABLED, com.honeywell.coreptdu.global.forms.FormConstant.BPROPERTY_FALSE)
  setMenuItemProperty((rtrim("Query") + ".") + ltrim("CountHits"), com.honeywell.coreptdu.global.forms.FormConstant.ENABLED, com.honeywell.coreptdu.global.forms.FormConstant.BPROPERTY_FALSE)
  setMenuItemProperty((rtrim("Tools") + ".") + ltrim("ExportData"), com.honeywell.coreptdu.global.forms.FormConstant.ENABLED, com.honeywell.coreptdu.global.forms.FormConstant.BPROPERTY_TRUE)
  setMenuItemProperty((rtrim("Action") + ".") + ltrim("Exit"), com.honeywell.coreptdu.global.forms.FormConstant.ENABLED, com.honeywell.coreptdu.global.forms.FormConstant.BPROPERTY_TRUE)
  setMenuItemProperty((rtrim("Block") + ".") + ltrim("Clear"), com.honeywell.coreptdu.global.forms.FormConstant.ENABLED, com.honeywell.coreptdu.global.forms.FormConstant.BPROPERTY_TRUE)
  setMenuItemProperty((rtrim("Field") + ".") + ltrim("Previous"), com.honeywell.coreptdu.global.forms.FormConstant.ENABLED, com.honeywell.coreptdu.global.forms.FormConstant.BPROPERTY_TRUE)
  setMenuItemProperty((rtrim("Field") + ".") + ltrim("Next"), com.honeywell.coreptdu.global.forms.FormConstant.ENABLED, com.honeywell.coreptdu.global.forms.FormConstant.BPROPERTY_TRUE)
  setMenuItemProperty((rtrim("Help") + ".") + ltrim("Help"), com.honeywell.coreptdu.global.forms.FormConstant.ENABLED, com.honeywell.coreptdu.global.forms.FormConstant.BPROPERTY_TRUE)
  setMenuItemProperty((rtrim("Help") + ".") + ltrim("Keys"), com.honeywell.coreptdu.global.forms.FormConstant.ENABLED, com.honeywell.coreptdu.global.forms.FormConstant.BPROPERTY_TRUE)
  setMenuItemProperty((rtrim("Help") + ".") + ltrim("DisplayError"), com.honeywell.coreptdu.global.forms.FormConstant.ENABLED, com.honeywell.coreptdu.global.forms.FormConstant.BPROPERTY_TRUE)
  setMenuItemProperty((rtrim("Query") + ".") + ltrim("Execute"), com.honeywell.coreptdu.global.forms.FormConstant.ENABLED, com.honeywell.coreptdu.global.forms.FormConstant.BPROPERTY_TRUE)
  setMenuItemProperty((rtrim("Query") + ".") + ltrim("Enter"), com.honeywell.coreptdu.global.forms.FormConstant.ENABLED, com.honeywell.coreptdu.global.forms.FormConstant.BPROPERTY_TRUE)
  setMenuItemProperty((rtrim("Query") + ".") + ltrim("FetchNextSet"), com.honeywell.coreptdu.global.forms.FormConstant.ENABLED, com.honeywell.coreptdu.global.forms.FormConstant.BPROPERTY_TRUE)
  setMenuItemProperty((rtrim("Record") + ".") + ltrim("Previous"), com.honeywell.coreptdu.global.forms.FormConstant.ENABLED, com.honeywell.coreptdu.global.forms.FormConstant.BPROPERTY_TRUE)
  setMenuItemProperty((rtrim("Record") + ".") + ltrim("Next"), com.honeywell.coreptdu.global.forms.FormConstant.ENABLED, com.honeywell.coreptdu.global.forms.FormConstant.BPROPERTY_TRUE)
  setMenuItemProperty((rtrim("Record") + ".") + ltrim("ScrollUp"), com.honeywell.coreptdu.global.forms.FormConstant.ENABLED, com.honeywell.coreptdu.global.forms.FormConstant.BPROPERTY_TRUE)
  setMenuItemProperty((rtrim("Record") + ".") + ltrim("ScrollDown"), com.honeywell.coreptdu.global.forms.FormConstant.ENABLED, com.honeywell.coreptdu.global.forms.FormConstant.BPROPERTY_TRUE)
  setMenuItemProperty((rtrim("Record") + ".") + ltrim("Clear"), com.honeywell.coreptdu.global.forms.FormConstant.ENABLED, com.honeywell.coreptdu.global.forms.FormConstant.BPROPERTY_TRUE)
  setMenuItemProperty((rtrim("Tools") + ".") + ltrim("AddQueryConditions"), com.honeywell.coreptdu.global.forms.FormConstant.ENABLED, com.honeywell.coreptdu.global.forms.FormConstant.BPROPERTY_FALSE)
  if ("VIEW".equals(com.honeywell.coreptdu.utils.oracleutils.OracleHelpers.nameIn(this, "parameter.workType"))) {     setMenuItemProperty((rtrim("Tools") + ".") + ltrim("Duplicate"), com.honeywell.coreptdu.global.forms.FormConstant.ENABLED, com.honeywell.coreptdu.global.forms.FormConstant.BPROPERTY_FALSE);     setMenuItemProperty((rtrim("Action") + ".") + ltrim("Save"), com.honeywell.coreptdu.global.forms.FormConstant.ENABLED, com.honeywell.coreptdu.global.forms.FormConstant.BPROPERTY_FALSE);     setMenuItemProperty((rtrim("Edit") + ".") + ltrim("Cut"), com.honeywell.coreptdu.global.forms.FormConstant.ENABLED, com.honeywell.coreptdu.global.forms.FormConstant.BPROPERTY_FALSE);     setMenuItemProperty((rtrim("Edit") + ".") + ltrim("Copy"), com.honeywell.coreptdu.global.forms.FormConstant.ENABLED, com.honeywell.coreptdu.global.forms.FormConstant.BPROPERTY_FALSE);     setMenuItemProperty((rtrim("Edit") + ".") + ltrim("Paste"), com.honeywell.coreptdu.global.forms.FormConstant.ENABLED, com.honeywell.coreptdu.global.forms.FormConstant.BPROPERTY_FALSE);     setMenuItemProperty((rtrim("Edit") + ".") + ltrim("Edit"), com.honeywell.coreptdu.global.forms.FormConstant.ENABLED, com.honeywell.coreptdu.global.forms.FormConstant.BPROPERTY_FALSE);     setMenuItemProperty((rtrim("Edit") + ".") + ltrim("List"), com.honeywell.coreptdu.global.forms.FormConstant.ENABLED, com.honeywell.coreptdu.global.forms.FormConstant.BPROPERTY_FALSE);     setMenuItemProperty((rtrim("Field") + ".") + ltrim("Clear"), com.honeywell.coreptdu.global.forms.FormConstant.ENABLED, com.honeywell.coreptdu.global.forms.FormConstant.BPROPERTY_FALSE);     setMenuItemProperty((rtrim("Field") + ".") + ltrim("Duplicate"), com.honeywell.coreptdu.global.forms.FormConstant.ENABLED, com.honeywell.coreptdu.global.forms.FormConstant.BPROPERTY_FALSE);     setMenuItemProperty((rtrim("Record") + ".") + ltrim("Insert"), com.honeywell.coreptdu.global.forms.FormConstant.ENABLED, com.honeywell.coreptdu.global.forms.FormConstant.BPROPERTY_FALSE);     setMenuItemProperty((rtrim("Record") + ".") + ltrim("Remove"), com.honeywell.coreptdu.global.forms.FormConstant.ENABLED, com.honeywell.coreptdu.global.forms.FormConstant.BPROPERTY_FALSE);     setMenuItemProperty((rtrim("Record") + ".") + ltrim("Duplicate"), com.honeywell.coreptdu.global.forms.FormConstant.ENABLED, com.honeywell.coreptdu.global.forms.FormConstant.BPROPERTY_FALSE);     if (java.util.Arrays.asList("NAVDB_SETUP").contains(vForm)) {         setMenuItemProperty((rtrim("Tools") + ".") + ltrim("ExportData"), com.honeywell.coreptdu.global.forms.FormConstant.ENABLED, com.honeywell.coreptdu.global.forms.FormConstant.BPROPERTY_FALSE);     } } else {     setMenuItemProperty((rtrim("Tools") + ".") + ltrim("Duplicate"), com.honeywell.coreptdu.global.forms.FormConstant.ENABLED, com.honeywell.coreptdu.global.forms.FormConstant.BPROPERTY_TRUE);     setMenuItemProperty((rtrim("Action") + ".") + ltrim("Save"), com.honeywell.coreptdu.global.forms.FormConstant.ENABLED, com.honeywell.coreptdu.global.forms.FormConstant.BPROPERTY_TRUE);     setMenuItemProperty((rtrim("Edit") + ".") + ltrim("Cut"), com.honeywell.coreptdu.global.forms.FormConstant.ENABLED, com.honeywell.coreptdu.global.forms.FormConstant.BPROPERTY_TRUE);     setMenuItemProperty((rtrim("Edit") + ".") + ltrim("Copy"), com.honeywell.coreptdu.global.forms.FormConstant.ENABLED, com.honeywell.coreptdu.global.forms.FormConstant.BPROPERTY_TRUE);     setMenuItemProperty((rtrim("Edit") + ".") + ltrim("Paste"), com.honeywell.coreptdu.global.forms.FormConstant.ENABLED, com.honeywell.coreptdu.global.forms.FormConstant.BPROPERTY_TRUE);     setMenuItemProperty((rtrim("Edit") + ".") + ltrim("Edit"), com.honeywell.coreptdu.global.forms.FormConstant.ENABLED, com.honeywell.coreptdu.global.forms.FormConstant.BPROPERTY_TRUE);     setMenuItemProperty((rtrim("Edit") + ".") + ltrim("List"), com.honeywell.coreptdu.global.forms.FormConstant.ENABLED, com.honeywell.coreptdu.global.forms.FormConstant.BPROPERTY_TRUE);     setMenuItemProperty((rtrim("Field") + ".") + ltrim("Clear"), com.honeywell.coreptdu.global.forms.FormConstant.ENABLED, com.honeywell.coreptdu.global.forms.FormConstant.BPROPERTY_TRUE);     setMenuItemProperty((rtrim("Field") + ".") + ltrim("Duplicate"), com.honeywell.coreptdu.global.forms.FormConstant.ENABLED, com.honeywell.coreptdu.global.forms.FormConstant.BPROPERTY_TRUE);     setMenuItemProperty((rtrim("Record") + ".") + ltrim("Insert"), com.honeywell.coreptdu.global.forms.FormConstant.ENABLED, com.honeywell.coreptdu.global.forms.FormConstant.BPROPERTY_TRUE);     setMenuItemProperty((rtrim("Record") + ".") + ltrim("Remove"), com.honeywell.coreptdu.global.forms.FormConstant.ENABLED, com.honeywell.coreptdu.global.forms.FormConstant.BPROPERTY_TRUE);     setMenuItemProperty((rtrim("Record") + ".") + ltrim("Duplicate"), com.honeywell.coreptdu.global.forms.FormConstant.ENABLED, com.honeywell.coreptdu.global.forms.FormConstant.BPROPERTY_TRUE);     if ("MVP".equals(vForm)) {         setMenuItemProperty((rtrim("Block") + ".") + ltrim("Previous"), com.honeywell.coreptdu.global.forms.FormConstant.ENABLED, com.honeywell.coreptdu.global.forms.FormConstant.BPROPERTY_FALSE);         setMenuItemProperty((rtrim("Block") + ".") + ltrim("Next"), com.honeywell.coreptdu.global.forms.FormConstant.ENABLED, com.honeywell.coreptdu.global.forms.FormConstant.BPROPERTY_FALSE);         setMenuItemProperty((rtrim("Record") + ".") + ltrim("Insert"), com.honeywell.coreptdu.global.forms.FormConstant.ENABLED, com.honeywell.coreptdu.global.forms.FormConstant.BPROPERTY_FALSE);         setMenuItemProperty((rtrim("Record") + ".") + ltrim("Remove"), com.honeywell.coreptdu.global.forms.FormConstant.ENABLED, com.honeywell.coreptdu.global.forms.FormConstant.BPROPERTY_FALSE);         setMenuItemProperty((rtrim("Record") + ".") + ltrim("Duplicate"), com.honeywell.coreptdu.global.forms.FormConstant.ENABLED, com.honeywell.coreptdu.global.forms.FormConstant.BPROPERTY_FALSE);         setMenuItemProperty((rtrim("Record") + ".") + ltrim("Lock"), com.honeywell.coreptdu.global.forms.FormConstant.ENABLED, com.honeywell.coreptdu.global.forms.FormConstant.BPROPERTY_FALSE);         setMenuItemProperty((rtrim("Record") + ".") + ltrim("Clear"), com.honeywell.coreptdu.global.forms.FormConstant.ENABLED, com.honeywell.coreptdu.global.forms.FormConstant.BPROPERTY_FALSE);         setMenuItemProperty((rtrim("Field") + ".") + ltrim("Clear"), com.honeywell.coreptdu.global.forms.FormConstant.ENABLED, com.honeywell.coreptdu.global.forms.FormConstant.BPROPERTY_FALSE);         setMenuItemProperty((rtrim("Field") + ".") + ltrim("Duplicate"), com.honeywell.coreptdu.global.forms.FormConstant.ENABLED, com.honeywell.coreptdu.global.forms.FormConstant.BPROPERTY_FALSE);     }     if ("KLNX_NAME_FIELD_ABBREV".equals(vForm)) {         setMenuItemProperty((rtrim("Record") + ".") + ltrim("Insert"), com.honeywell.coreptdu.global.forms.FormConstant.ENABLED, com.honeywell.coreptdu.global.forms.FormConstant.BPROPERTY_FALSE);         setMenuItemProperty((rtrim("Record") + ".") + ltrim("Remove"), com.honeywell.coreptdu.global.forms.FormConstant.ENABLED, com.honeywell.coreptdu.global.forms.FormConstant.BPROPERTY_FALSE);         setMenuItemProperty((rtrim("Record") + ".") + ltrim("Duplicate"), com.honeywell.coreptdu.global.forms.FormConstant.ENABLED, com.honeywell.coreptdu.global.forms.FormConstant.BPROPERTY_FALSE);     }     if (java.util.Arrays.asList("CUST_DCR", "NAVDB_SETUP").contains(vForm)) {         setMenuItemProperty((rtrim("Record") + ".") + ltrim("Duplicate"), com.honeywell.coreptdu.global.forms.FormConstant.ENABLED, com.honeywell.coreptdu.global.forms.FormConstant.BPROPERTY_FALSE);     }     if (java.util.regex.Pattern.compile(".*APF").matcher(vForm).matches() || java.util.Arrays.asList("NAVDB_SETUP", "FMS_CONFIG", "FMS_LOOKUP", "SUPPORT_DATA", "TOB_STATUS", "GENERATED_NAVDB", "CUST_DCR", "SHOW_VANDV_ERRORS", "AIRBUS_AIRFRAME_ENGINE", "BOEING_AIRFRAME_ENGINE", "WEIGHT_VARIANT", "AUTO_THRUST_CUTBACK", "FUEL_POLICY", "GPS_ALMANAC", "FLIGHT_TEST_BUS", "KLNX_NAME_FIELD_ABBREV").contains(vForm)) {         if ((!java.util.regex.Pattern.compile(".*APF").matcher(vForm).matches()) && (!java.util.Arrays.asList("WEIGHT_VARIANT", "AUTO_THRUST_CUTBACK", "FUEL_POLICY", "FLIGHT_TEST_BUS").contains(vForm))) {             setMenuItemProperty((rtrim("Tools") + ".") + ltrim("Duplicate"), com.honeywell.coreptdu.global.forms.FormConstant.ENABLED, com.honeywell.coreptdu.global.forms.FormConstant.BPROPERTY_FALSE);         }         if (java.util.Arrays.asList("NAVDB_SETUP", "TOB_STATUS", "SHOW_VANDV_ERRORS").contains(vForm)) {             setMenuItemProperty((rtrim("Tools") + ".") + ltrim("ExportData"), com.honeywell.coreptdu.global.forms.FormConstant.ENABLED, com.honeywell.coreptdu.global.forms.FormConstant.BPROPERTY_FALSE);         }     } }

Method: com.honeywell.coreptdu.utils.oracleutils.GenericTemplateForm.createGroup
  return com.honeywell.coreptdu.utils.oracleutils.GroupUtils.createGroup(groups, com.honeywell.coreptdu.utils.oracleutils.HoneyWellUtils.toCamelCase(groupName))

Method: com.honeywell.coreptdu.utils.oracleutils.GenericTemplateForm.addGroupColumn
  return com.honeywell.coreptdu.utils.oracleutils.GroupUtils.addGroupColumn(group, com.honeywell.coreptdu.utils.oracleutils.HoneyWellUtils.toCamelCase(columnName), com.honeywell.coreptdu.utils.oracleutils.HoneyWellUtils.toCamelCase(columnType), length)

Method: com.honeywell.coreptdu.datatypes.airport.serviceimpl.AirportTriggerServiceImpl.checkToCommit
  log.info("checkToCommit Executing")
  try {     java.lang.Integer vButton = 0;     java.lang.Integer totalRows = 0;     java.lang.String vButtonText = null;     java.lang.Integer msgnum = 0;     if (java.util.Objects.equals(system.getFormStatus(), "CHANGED")) {         if (java.util.Objects.equals(pActionType, "COMMIT")) {             vButtonText = com.honeywell.coreptdu.global.forms.FormConstant.CANCEL;         } else if (java.util.Objects.equals(pActionType, "EXIT")) {             vButtonText = com.honeywell.coreptdu.global.forms.FormConstant.EXIT_WITHOUT_SAVE;         } else {             vButtonText = com.honeywell.coreptdu.global.forms.FormConstant.CANCEL_MODIFICATION;         }         if (java.util.Objects.equals(global.getLibRefreshed(), "Y")) {             alertDetails.getCurrent();             if (alertDetails.getAlerts().size() < alertDetails.getCurrentAlert()) {                 vButton = displayAlert.moreButtons("C", "Refresh Record", (("You have modified record(s). Select an option: \n" + " \n") + "1. Save and refresh Master Library\n") + "2. Cancel modification, NO Save, NO Refresh", "Save&Refresh", vButtonText, "");                 com.honeywell.coreptdu.utils.oracleutils.OracleHelpers.ResponseMapper(displayAlert, this);                 alertDetails.createNewRecord("checkToCommit1");                 throw new com.honeywell.coreptdu.exception.AlertException(event, alertDetails);             } else {                 vButton = alertDetails.getAlertValue("checkToCommit1", alertDetails.getCurrentAlert());             }             if (java.util.Arrays.asList(1).contains(vButton)) {                 java.lang.Integer ind = system.getCursorRecordIndex();                 validateBeforeCommit();                 system.setCursorRecordIndex(ind);                 commitForm(this);                 sendUpdatedRowIdDetails();                 system.setFormStatus(com.honeywell.coreptdu.global.forms.FormConstant.QUERIED);                 parameter.setUpdRec(com.honeywell.coreptdu.global.forms.FormConstant.N);                 setBlockProperty(nameIn(this, "system.Cursor_Block", java.lang.String.class), com.honeywell.coreptdu.global.forms.FormConstant.UPDATE_ALLOWED, com.honeywell.coreptdu.global.forms.FormConstant.PROPERTY_TRUE);                 message("Record has been saved successfully");                 system.setFormStatus(com.honeywell.coreptdu.global.forms.FormConstant.NORMAL);                 totalRows = getGroupRowCount(findGroup("refreshRecordsGroup"));                 if (totalRows > 0) {                     refreshMasterLib.refreshRecords(totalRows);                 }                 if (java.util.Objects.equals(msgnum, 40400)) {                     clearMessage();                 }             }         } else {             if (java.util.Objects.equals(pActionType, "COMMIT")) {                 vButton = 1;             } else {                 alertDetails.getCurrent();                 if (alertDetails.getAlerts().size() < alertDetails.getCurrentAlert()) {                     vButton = displayAlert.moreButtons("C", "Refresh Record", "Record is modified or inserted or deleted. Select an option: \n", "Save", vButtonText, null);                     com.honeywell.coreptdu.utils.oracleutils.OracleHelpers.ResponseMapper(displayAlert, this);                     alertDetails.createNewRecord("checkToCommit1");                     throw new com.honeywell.coreptdu.exception.AlertException(event, alertDetails);                 } else {                     vButton = alertDetails.getAlertValue("checkToCommit1", alertDetails.getCurrentAlert());                 }             }             if (java.util.Objects.equals(vButton, 1)) {                 java.lang.Integer ind = system.getCursorRecordIndex();                 validateBeforeCommit();                 system.setCursorRecordIndex(ind);                 commitForm(this);                 system.setFormStatus(com.honeywell.coreptdu.global.forms.FormConstant.QUERIED);                 parameter.setUpdRec(com.honeywell.coreptdu.global.forms.FormConstant.N);                 setBlockProperty(nameIn(this, "system.Cursor_Block", java.lang.String.class), com.honeywell.coreptdu.global.forms.FormConstant.UPDATE_ALLOWED, com.honeywell.coreptdu.global.forms.FormConstant.PROPERTY_TRUE);                 message("Record has been saved successfully");                 system.setFormStatus(com.honeywell.coreptdu.global.forms.FormConstant.NORMAL);                 if (java.util.Objects.equals(msgnum, 40400)) {                     clearMessage();                 }             } else {                 exitForm();             }         }         if ((java.util.Objects.equals(global.getLibRefreshed(), "Y") && java.util.Objects.equals(vButton, 2)) || ((!java.util.Objects.equals(global.getLibRefreshed(), "Y")) && java.util.Objects.equals(vButton, 1))) {             // Changes by code review team.S             if (java.util.Objects.equals(pActionType, "COMMIT"));else if (java.util.Objects.equals(pActionType, "EXIT")) {                 exitForm();             } else {                 system.setFormStatus("NORMAL");             }         } else if (java.util.Objects.equals(system.getFormStatus(), "CHANGED")) {             throw new com.honeywell.coreptdu.exception.FormTriggerFailureException();         } else if (java.util.Objects.equals(pActionType, "EXIT")) {             setApplicationProperty("cursorStyle", "default");             exitForm();         }     } else {         refreshMasterLib.ifRefresh();         if (pActionType.equals("EXIT")) {             exitForm();         }     }     log.info("checkToCommit Executed Successfully"); } catch (java.lang.Exception e) {     log.error("Error while executing checkToCommit" + e.getMessage());     throw e; }

Method: com.honeywell.coreptdu.pll.CoreptLib.checkValidSuppCust
  // PreparedStatement prepareStatement = null; java.lang.String query = null
  com.honeywell.coreptdu.utils.oracleutils.Record rec = null
  // String pBlock = system.getCursorBlock(); java.lang.Integer vFlag
  java.lang.Integer vAllowUpdate = 0
  java.lang.String vScustomer = null
  vFlag = checkFlag(pDcrNumber, pCycle, pSupplier, pRecType, pCustomer)
  if (vFlag == 1) {     vAllowUpdate = 1; }
  if (java.util.Arrays.asList(2, 3, 4).contains(vFlag)) {     if (!java.util.Objects.equals(pCycle, pGlobalCycle)) {         vAllowUpdate = 0;     } else {         vAllowUpdate = 1;     } } else if (vFlag == 6) {     try {         query = """         SELECT navdb_id                     from navdb_dcr                     WHERE dcr_number = ?         """;         rec = app.selectInto(query, pDcrNumber);         vScustomer = rec.getString();         if (java.util.Objects.equals(pRecType, "T")) {             if (!java.util.Objects.equals(pCustomer, com.honeywell.coreptdu.utils.oracleutils.OracleHelpers.nvl(vScustomer, "X"))) {                 vAllowUpdate = 0;             } else {                 vAllowUpdate = 1;             }         } else {             vAllowUpdate = 1;         }     } catch (com.honeywell.coreptdu.exception.NoDataFoundException e) {         dspMsg("Customer does not exists for DCR Number " + pDcrNumber);         throw new com.honeywell.coreptdu.exception.FormTriggerFailureException();     } }
  if (java.util.Arrays.asList("Q", "N").contains(pSupplier)) {     if (java.util.Arrays.asList(1).contains(vFlag)) {         vAllowUpdate = 1;     } else if (java.util.Arrays.asList(5).contains(vFlag)) {         if (!java.util.Objects.equals(pCycle, pGlobalCycle)) {             vAllowUpdate = 0;         } else {             vAllowUpdate = 1;         }     } }
  return vAllowUpdate

Method: com.honeywell.coreptdu.utils.oracleutils.GenericTemplateForm.chr
  if (chrInt == 10) {     return "\n"; }
  return null

Method: com.honeywell.coreptdu.utils.oracleutils.GenericTemplateForm.getBlockProperty
  java.lang.String strReturn = null
  // blocks = getFormBlocks(system.getCurrentForm()); // if (FormConstant.DML_DATA_TARGET_NAME.equalsIgnoreCase(argPropertyName)) { // for (OrderDto orderDto : blocks) { // if (orderDto.getBlockname().equals(argBlockName)) { // strReturn = orderDto.getQuerydatasourcename(); // break; // } // } // } // else // if(FormConstant.QUERY_DATASOURCE_NAME.equalsIgnoreCase(argPropertyName)){ // getBlockProperty(List.of(), argPropertyName); // } java.lang.String value = com.honeywell.coreptdu.utils.oracleutils.OracleHelpers.getBlockProperty(baseInstance, argBlockName, argPropertyName)
  if (argPropertyName.equalsIgnoreCase("defaultWhere") || argPropertyName.equalsIgnoreCase("default_where")) {     return hashUtils.decrypt(value); }
  return value

Method: com.honeywell.coreptdu.utils.dbutils.IApplication.executeFunction

Method: com.honeywell.coreptdu.pkg.spec.IRefreshMasterLibrary.checkReferenceInfo

Method: com.honeywell.coreptdu.pkg.spec.IRefreshMasterLibrary.deleteFromRefTable

Method: com.honeywell.coreptdu.pkg.spec.IRefreshMasterLibrary.refreshARecord

Method: com.honeywell.coreptdu.utils.oracleutils.GenericTemplateForm.deleteRecord
  com.honeywell.coreptdu.utils.oracleutils.PropertyHelpers.deleteRecord(event, blockname)

Method: com.honeywell.coreptdu.utils.oracleutils.GenericTemplateForm.chkSelectAll
  if (ob == null) {     return; }
  java.lang.Class<?> objClass = ob.getClass()
  java.lang.reflect.Field selectAllField = objClass.getDeclaredField("isSelectAll")
  selectAllField.setAccessible(true)
  try {     java.lang.String lastQuery = "";     isChecked = ((java.lang.Boolean) (selectAllField.get(ob)));     java.lang.Integer recordCount;     java.util.List<java.lang.String> selectedRows = new java.util.ArrayList<>();     java.util.List<java.lang.String> unSelectedRows = new java.util.ArrayList<>();     java.lang.reflect.Field dataField = objClass.getDeclaredField("data");     dataField.setAccessible(true);     java.util.List<?> dataList = ((java.util.List<?>) (dataField.get(ob)));     if ((dataList == null) || dataList.isEmpty()) {         return;     }     java.lang.Object firstRecord = dataList.get(0);     if (firstRecord == null) {         return;     }     java.lang.reflect.Field recordCountField = firstRecord.getClass().getDeclaredField("recordCount");     recordCountField.setAccessible(true);     recordCount = ((java.lang.Integer) (recordCountField.get(firstRecord)));     java.lang.reflect.Field lastField = objClass.getDeclaredField("lastQuery");     lastField.setAccessible(true);     java.lang.Object lastFieldValue = lastField.get(ob);     if ((lastFieldValue != null) && (!lastFieldValue.equals(""))) {         lastQuery = hashUtils.decrypt(((java.lang.String) (lastField.get(ob))));     }     java.lang.reflect.Field selectedField = objClass.getDeclaredField("selectedRows");     selectedField.setAccessible(true);     selectedRows = ((java.util.List<java.lang.String>) (selectedField.get(ob)));     java.lang.reflect.Field unselectedField = objClass.getDeclaredField("unSelectedRows");     unselectedField.setAccessible(true);     unSelectedRows = ((java.util.List<java.lang.String>) (unselectedField.get(ob)));     if (isChecked) {         if ((lastQuery != null) && (!lastQuery.isEmpty())) {             if (lastQuery.contains(") where rno <=" + recordCount)) {                 if (!unSelectedRows.isEmpty()) {                     java.lang.String rowIdList = unSelectedRows.stream().map(rowId -> ("'" + rowId) + "'").collect(java.util.stream.Collectors.joining(","));                     lastQuery = lastQuery.replace(") where rno <=" + recordCount, (" where rowid not in(" + rowIdList) + "))");                 } else {                     lastQuery = lastQuery.replace(") where rno <=" + recordCount, ")");                 }             }             // coverity-fixes             log.info("" + selectedRows);             log.info("" + unSelectedRows);             java.util.List<com.honeywell.coreptdu.utils.oracleutils.Record> records = app.executeQuery(lastQuery);             if (records != null) {                 for (com.honeywell.coreptdu.utils.oracleutils.Record record : records) {                     java.lang.String rowid = record.getObject("ROWID").toString();                     boolean recordExists = false;                     for (java.lang.Object existing : dataList) {                         if (existing != null) {                             java.lang.reflect.Method getRowId = existing.getClass().getMethod("getRowid");                             java.lang.String existingRowId = java.lang.String.valueOf(getRowId.invoke(existing));                             java.lang.reflect.Method getChk = existing.getClass().getMethod("getChk");                             java.lang.String chkval = ((getChk != null) && (getChk.invoke(existing) != null)) ? getChk.invoke(existing).toString() : "";                             java.lang.reflect.Method getRecordStatus = existing.getClass().getMethod("getRecordStatus");                             java.lang.String recordStatus = ((getRecordStatus != null) && (getRecordStatus.invoke(existing) != null)) ? getRecordStatus.invoke(existing).toString() : "";                             if (("Y".equals(chkval) && "INSERT".equals(recordStatus)) || (((existingRowId == null) || "null".equals(existingRowId)) && "DELETED".equals(recordStatus))) {                                 java.lang.reflect.Method setStatus = existing.getClass().getMethod("setRecordStatus", java.lang.String.class);                                 setStatus.invoke(existing, "NEW");                             }                             if (rowid.equals(existingRowId)) {                                 recordExists = true;                                 if (!unSelectedRows.contains(rowid)) {                                     java.lang.reflect.Method setStatus = existing.getClass().getMethod("setRecordStatus", java.lang.String.class);                                     java.lang.reflect.Method setChk = existing.getClass().getMethod("setChk", java.lang.String.class);                                     setStatus.invoke(existing, "DELETED");                                     setChk.invoke(existing, "Y");                                 }                                 break;                             }                         }                     }                     if ((!recordExists) && (!unSelectedRows.contains(rowid))) {                         com.honeywell.coreptdu.utils.oracleutils.Block<?> currentBlock = ((com.honeywell.coreptdu.utils.oracleutils.Block<?>) (nameIn(this, system.getCursorBlock())));                         java.lang.reflect.Field data = currentBlock.getClass().getDeclaredField("data");                         data.setAccessible(true);                         java.util.List<?> datas = ((java.util.List<?>) (data.get(currentBlock)));                         if (datas == null) {                             datas = new java.util.ArrayList<>();                             data.set(currentBlock, datas);                         }                         java.lang.Class<?> targetClass = (datas.isEmpty()) ? null : datas.get(0).getClass();                         if (targetClass != null) {                             java.lang.Object newRecord = app.mapResultSetToClass(record, targetClass);                             java.lang.reflect.Method setStatus = newRecord.getClass().getMethod("setRecordStatus", java.lang.String.class);                             setStatus.invoke(newRecord, "DELETED");                             java.lang.reflect.Method setChk = newRecord.getClass().getMethod("setChk", java.lang.String.class);                             setChk.invoke(newRecord, "Y");                             java.lang.reflect.Method addMethod = datas.getClass().getMethod("add", java.lang.Object.class);                             addMethod.invoke(datas, newRecord);                         }                     }                 }             }         } else if ((lastQuery == null) || lastQuery.isEmpty()) {             for (java.lang.Object existing : dataList) {                 if (existing == null) {                     continue;                 }                 java.lang.reflect.Method getRowId = existing.getClass().getMethod("getRowid");                 java.lang.String existingRowId = java.lang.String.valueOf(getRowId.invoke(existing));                 java.lang.reflect.Method getChk = existing.getClass().getMethod("getChk");                 java.lang.String chkval = ((getChk != null) && (getChk.invoke(existing) != null)) ? getChk.invoke(existing).toString() : "";                 java.lang.reflect.Method getRecordStatus = existing.getClass().getMethod("getRecordStatus");                 java.lang.String recordStatus = ((getRecordStatus != null) && (getRecordStatus.invoke(existing) != null)) ? getRecordStatus.invoke(existing).toString() : "";                 java.lang.String rowid = ((existingRowId == null) || "null".equalsIgnoreCase(existingRowId.trim())) ? "" : existingRowId.trim();                 if (("Y".equals(chkval) && "INSERT".equals(recordStatus)) || (((existingRowId == null) || "null".equals(existingRowId)) && "DELETED".equals(recordStatus))) {                     java.lang.reflect.Method setStatus = existing.getClass().getMethod("setRecordStatus", java.lang.String.class);                     setStatus.invoke(existing, "NEW");                 }                 if (!rowid.isEmpty()) {                     if (!unSelectedRows.contains(rowid)) {                         java.lang.reflect.Method setStatus = existing.getClass().getMethod("setRecordStatus", java.lang.String.class);                         java.lang.reflect.Method setChk = existing.getClass().getMethod("setChk", java.lang.String.class);                         setStatus.invoke(existing, "DELETED");                         setChk.invoke(existing, "Y");                     }                 }             }         }     } else if (!isChecked) {         com.honeywell.coreptdu.utils.oracleutils.Block<?> currentBlock = ((com.honeywell.coreptdu.utils.oracleutils.Block<?>) (nameIn(this, system.getCursorBlock())));         java.lang.reflect.Field dat = currentBlock.getClass().getDeclaredField("data");         dat.setAccessible(true);         java.util.List<?> datas = ((java.util.List<?>) (dat.get(currentBlock)));         if (lastQuery != null) {             if (lastQuery.contains(") where rno <=" + recordCount)) {                 lastQuery = lastQuery.replace(") where rno <=" + recordCount, ")");             }             java.util.List<com.honeywell.coreptdu.utils.oracleutils.Record> records = app.executeQuery(lastQuery);             if ((records != null) && (!records.isEmpty())) {                 if (datas == null) {                     dat.set(currentBlock, datas = new java.util.ArrayList<>());                 }                 for (java.lang.Object existingRecord : datas) {                     java.lang.reflect.Method getRowId = existingRecord.getClass().getMethod("getRowid");                     java.lang.reflect.Method getChk = existingRecord.getClass().getMethod("getChk");                     java.lang.String rowidValue = ((getRowId != null) && (getRowId.invoke(existingRecord) != null)) ? getRowId.invoke(existingRecord).toString() : null;                     java.lang.String chkval = ((getChk != null) && (getChk.invoke(existingRecord) != null)) ? getChk.invoke(existingRecord).toString() : "";                     java.lang.reflect.Method getRecordStatus = existingRecord.getClass().getMethod("getRecordStatus");                     java.lang.String recordStatus = ((getRecordStatus != null) && (getRecordStatus.invoke(existingRecord) != null)) ? getRecordStatus.invoke(existingRecord).toString() : "";                     if ("Y".equals(chkval) && "INSERT".equals(recordStatus)) {                         java.lang.reflect.Method setStatus = existingRecord.getClass().getMethod("setRecordStatus", java.lang.String.class);                         setStatus.invoke(existingRecord, "NEW");                     }                     if (selectedRows.contains(rowidValue)) {                         existingRecord.getClass().getMethod("setRecordStatus", java.lang.String.class).invoke(existingRecord, "DELETED");                         existingRecord.getClass().getMethod("setChk", java.lang.String.class).invoke(existingRecord, "Y");                     }                 }                 for (com.honeywell.coreptdu.utils.oracleutils.Record record : records) {                     java.lang.String rowidValue = record.getObject("ROWID").toString();                     boolean exists = false;                     for (java.lang.Object existingRecord : datas) {                         java.lang.reflect.Method getRowid = existingRecord.getClass().getMethod("getRowid");                         java.lang.String existingRowid = (getRowid.invoke(existingRecord) != null) ? getRowid.invoke(existingRecord).toString() : "";                         if (rowidValue.equals(existingRowid)) {                             exists = true;                             break;                         }                     }                     if ((!exists) && ("Y".equals(record.getObject("CHK")) || selectedRows.contains(rowidValue))) {                         java.lang.Class<?> targetClass = (datas.isEmpty()) ? null : datas.get(0).getClass();                         if (targetClass != null) {                             java.lang.Object mappedRecord = app.mapResultSetToClass(record, targetClass);                             mappedRecord.getClass().getMethod("setRecordStatus", java.lang.String.class).invoke(mappedRecord, "DELETED");                             mappedRecord.getClass().getMethod("setChk", java.lang.String.class).invoke(mappedRecord, "Y");                             java.lang.reflect.Method addMethod = datas.getClass().getMethod("add", java.lang.Object.class);                             addMethod.invoke(datas, mappedRecord);                         }                     }                 }             }         } else if (lastQuery == null) {             for (java.lang.Object existingRecord : datas) {                 java.lang.reflect.Method getRowId = existingRecord.getClass().getMethod("getRowid");                 java.lang.reflect.Method getChk = existingRecord.getClass().getMethod("getChk");                 java.lang.String rowidValue = ((getRowId != null) && (getRowId.invoke(existingRecord) != null)) ? getRowId.invoke(existingRecord).toString() : null;                 java.lang.String chkval = ((getChk != null) && (getChk.invoke(existingRecord) != null)) ? getChk.invoke(existingRecord).toString() : "";                 java.lang.reflect.Method getRecordStatus = existingRecord.getClass().getMethod("getRecordStatus");                 java.lang.String recordStatus = ((getRecordStatus != null) && (getRecordStatus.invoke(existingRecord) != null)) ? getRecordStatus.invoke(existingRecord).toString() : "";                 if ("Y".equals(chkval) && "INSERT".equals(recordStatus)) {                     java.lang.reflect.Method setStatus = existingRecord.getClass().getMethod("setRecordStatus", java.lang.String.class);                     setStatus.invoke(existingRecord, "NEW");                 }                 if (selectedRows.contains(rowidValue)) {                     existingRecord.getClass().getMethod("setRecordStatus", java.lang.String.class).invoke(existingRecord, "DELETED");                     existingRecord.getClass().getMethod("setChk", java.lang.String.class).invoke(existingRecord, "Y");                 }             }         }     } } catch (java.lang.Exception e) {     throw e; } finally {     selectAllField.set(ob, false); }

Method: com.honeywell.coreptdu.pkg.spec.IRefreshMasterLibrary.setRecordGroup

Method: com.honeywell.coreptdu.utils.oracleutils.GenericTemplateForm.filterNonInsertedRecords
  try {     com.honeywell.coreptdu.utils.oracleutils.Block<?> block = ((com.honeywell.coreptdu.utils.oracleutils.Block<?>) (obj));     java.lang.reflect.Field data = block.getClass().getDeclaredField("data");     data.setAccessible(true);     java.util.List<?> records = ((java.util.List<?>) (data.get(block)));     if ((records == null) || records.isEmpty()) {         return;     }     for (java.lang.Object record : records) {         java.lang.reflect.Method getStatusMethod = record.getClass().getMethod("getRecordStatus");         java.lang.reflect.Method getChk = record.getClass().getMethod("getChk");         java.lang.String recordStatus = ((java.lang.String) (getStatusMethod.invoke(record)));         java.lang.String chk = ((java.lang.String) (getChk.invoke(record)));         if ("NEW".equals(recordStatus) && "Y".equals(chk)) {             java.lang.reflect.Method setStatus = record.getClass().getMethod("setRecordStatus", java.lang.String.class);             setStatus.invoke(record, "DELETED");             java.lang.reflect.Method filterMethod = obj.getClass().getMethod("filterNonDeletedRecords");             filterMethod.invoke(obj);         }     } } catch (java.lang.Exception e) {     throw e; }

Method: com.honeywell.coreptdu.utils.oracleutils.GenericTemplateForm.copy
  java.lang.String[] parts = targetValue.split("\\.")
  if (parts.length == 2) {     java.lang.String prefix = com.honeywell.coreptdu.utils.oracleutils.HoneyWellUtils.toCamelCase(parts[0]);     java.lang.String fieldName = com.honeywell.coreptdu.utils.oracleutils.HoneyWellUtils.toCamelCase(parts[1]);     // Object prObject = OracleHelpers.nameIn(baseInstance, prefix);     com.honeywell.coreptdu.utils.oracleutils.OracleHelpers.copyWithIndex(baseInstance, srcValue, (prefix + ".") + fieldName, system.getCursorRecordIndex()); }

Method: com.honeywell.coreptdu.utils.oracleutils.GenericTemplateForm.sendLockRowIdDetails
  genericNativeQueryHelper.sendLockRowIdDetails(system.getFormName(), system.getUserSessionId(), rowid)

Method: com.honeywell.coreptdu.pll.CoreptLib.dspActionMsg
  java.sql.PreparedStatement prepareStatement = null
  java.lang.String query = null
  com.honeywell.coreptdu.utils.oracleutils.Record _rec
  java.lang.String vMsg = null
  java.lang.String vSnavdb = null
  java.lang.String vSsuppl = null
  // p_action='U' if (pAction.equals("U")) {     vMsg = "Record Can't be Updated with DCR# " + pDcrNum; } else if (pAction.equals("I")) {     vMsg = "Record Can't be Created with DCR# " + pDcrNum; } else if (pAction.equals("D")) {     vMsg = "Record Can't be Deleted with DCR# " + pDcrNum; }
  if (!java.util.Objects.equals(pRecType, null)) {     if (pRecType.equals("T")) {         vMsg = ((((vMsg + " for\n Customer ") + pCust) + " in the processing cycle ") + pCycle) + ".";     } else {         vMsg = ((("STD " + vMsg) + " in the \nprocessing cycle ") + pCycle) + ".";     } } else {     try {         query = """         SELECT NVL(NAVDB_ID,' ') from NAVDB_DCR WHERE DCR_NUMBER = ?         """;         _rec = app.selectInto(query, pDcrNum);         vSnavdb = _rec.getString();         query = """         SELECT data_supplier from NAVDB WHERE NAVDB_ID = ?         """;         _rec = app.selectInto(query, vSnavdb);         vSsuppl = _rec.getString();         if (java.util.Arrays.asList("JEP", "LID", "EAG").contains(vSnavdb) || java.util.Arrays.asList("Q", "N", "C").contains(vSsuppl)) {             vMsg = ((((vMsg + " for NavDB ") + pCust) + " in the \nprocessing cycle ") + pCycle) + ".";         } else {             vMsg = ((vMsg + " for NavDB\n") + pCust) + ".";         }     }// OTHERS      catch (java.lang.Exception e) {         vMsg = ((vMsg + " for NavDB\n") + pCust) + ".";     } finally {     } }
  com.honeywell.coreptdu.utils.oracleutils.PropertyHelpers.setAlertProperty(event, "dsp_msg", null, "Forms", vMsg, "ALERT_MESSAGE_TEXT", "OK", null, null)
  com.honeywell.coreptdu.utils.oracleutils.PropertyHelpers.setShowAlert(event, "dsp_msg", false)
  throw new com.honeywell.coreptdu.exception.FormTriggerFailureException()

Method: com.honeywell.coreptdu.utils.oracleutils.GenericTemplateForm.nvl
  return com.honeywell.coreptdu.utils.oracleutils.OracleHelpers.nvl(input, defaultValue)

Method: com.honeywell.coreptdu.pll.CoreptLib.coreptenterquery
  try {     // TODO set_query_menu_items;     setquerymenuitems(system.getCursorBlock());     enterQuery();     log.info("Data Retreived Successfully"); } catch (java.lang.Exception e) {     log.error("Error while receiving data" + e.getMessage());     throw e; }

Method: com.honeywell.coreptdu.utils.oracleutils.GenericTemplateForm.toSnakeCase
  if ((fieldname == null) || fieldname.isEmpty()) {     return fieldname; }
  java.lang.String result = fieldname.replaceAll("([a-z])([A-Z])", "$1_$2")
  return result.toUpperCase()

Method: com.honeywell.coreptdu.datatypes.airport.serviceimpl.AirportTriggerServiceImpl.plStdAirportMrPreQuery
  log.info(" plStdAirportMrPreQuery Executing")
  com.honeywell.coreptdu.global.dto.BaseResponse<com.honeywell.coreptdu.datatypes.airport.dto.response.AirportTriggerResponseDto> responseObj = new com.honeywell.coreptdu.global.dto.BaseResponse<>()
  com.honeywell.coreptdu.datatypes.airport.dto.response.AirportTriggerResponseDto resDto = new com.honeywell.coreptdu.datatypes.airport.dto.response.AirportTriggerResponseDto()
  try {     com.honeywell.coreptdu.utils.oracleutils.OracleHelpers.bulkClassMapper(reqDto, this);     if (!java.util.Objects.equals(global.getFromErrorSummary(), "Y")) {         plStdAirportMr.getRow(system.getCursorRecordIndex()).setDataSupplier(global.getDataSupplier());         if (java.util.Objects.equals(displayItemBlock.getAllowBothCycles(), "N")) {             plStdAirportMr.getRow(system.getCursorRecordIndex()).setProcessingCycle(global.getProcessingCycle());         }     }     com.honeywell.coreptdu.utils.oracleutils.OracleHelpers.ResponseMapper(this, resDto);     log.info(" plStdAirportMrPreQuery executed successfully");     return responseObj.render(responseObj.formSuccessResponse(com.honeywell.coreptdu.utils.common.Constants.RECORD_FETCH, resDto)); } catch (java.lang.Exception e) {     log.error("Error while Executing the plStdAirportMrPreQuery Service");     com.honeywell.coreptdu.utils.oracleutils.OracleHelpers.ResponseMapper(this, resDto);     return com.honeywell.coreptdu.exception.ExceptionUtils.handleException(e, resDto); }

Method: com.honeywell.coreptdu.datatypes.airport.serviceimpl.AirportTriggerServiceImpl.plTldAirportMrPreQuery
  log.info(" plTldAirportMrPreQuery Executing")
  com.honeywell.coreptdu.global.dto.BaseResponse<com.honeywell.coreptdu.datatypes.airport.dto.response.AirportTriggerResponseDto> responseObj = new com.honeywell.coreptdu.global.dto.BaseResponse<>()
  com.honeywell.coreptdu.datatypes.airport.dto.response.AirportTriggerResponseDto resDto = new com.honeywell.coreptdu.datatypes.airport.dto.response.AirportTriggerResponseDto()
  try {     com.honeywell.coreptdu.utils.oracleutils.OracleHelpers.bulkClassMapper(reqDto, this);     if (!java.util.Objects.equals(global.getFromErrorSummary(), "Y")) {         plTldAirportMr.getRow(system.getCursorRecordIndex()).setDataSupplier(global.getDataSupplier());         if (java.util.Objects.equals(displayItemBlock.getAllowBothCycles(), "N")) {             plTldAirportMr.getRow(system.getCursorRecordIndex()).setProcessingCycle(global.getProcessingCycle());         }     }     com.honeywell.coreptdu.utils.oracleutils.OracleHelpers.ResponseMapper(this, resDto);     log.info(" plTldAirportMrPreQuery executed successfully");     return responseObj.render(responseObj.formSuccessResponse(com.honeywell.coreptdu.utils.common.Constants.RECORD_FETCH, resDto)); } catch (java.lang.Exception e) {     log.error("Error while Executing the plTldAirportMrPreQuery Service");     com.honeywell.coreptdu.utils.oracleutils.OracleHelpers.ResponseMapper(this, resDto);     return com.honeywell.coreptdu.exception.ExceptionUtils.handleException(e, resDto); }

Method: com.honeywell.coreptdu.datatypes.airport.serviceimpl.AirportTriggerServiceImpl.tldAirportMrPreQuery
  log.info(" tldAirportMrPreQuery Executing")
  com.honeywell.coreptdu.global.dto.BaseResponse<com.honeywell.coreptdu.datatypes.airport.dto.response.AirportTriggerResponseDto> responseObj = new com.honeywell.coreptdu.global.dto.BaseResponse<>()
  com.honeywell.coreptdu.datatypes.airport.dto.response.AirportTriggerResponseDto resDto = new com.honeywell.coreptdu.datatypes.airport.dto.response.AirportTriggerResponseDto()
  try {     com.honeywell.coreptdu.utils.oracleutils.OracleHelpers.bulkClassMapper(reqDto, this);     tldAirportMr.getRow(system.getCursorRecordIndex()).setDataSupplier(global.getDataSupplier());     com.honeywell.coreptdu.utils.oracleutils.OracleHelpers.ResponseMapper(this, resDto);     log.info(" tldAirportMrPreQuery executed successfully");     return responseObj.render(responseObj.formSuccessResponse(com.honeywell.coreptdu.utils.common.Constants.RECORD_FETCH, resDto)); } catch (java.lang.Exception e) {     log.error("Error while Executing the tldAirportMrPreQuery Service");     com.honeywell.coreptdu.utils.oracleutils.OracleHelpers.ResponseMapper(this, resDto);     return com.honeywell.coreptdu.exception.ExceptionUtils.handleException(e, resDto); }

Method: com.honeywell.coreptdu.datatypes.airport.serviceimpl.AirportTriggerServiceImpl.stdAirportMrPreQuery
  log.info(" stdAirportMrPreQuery Executing")
  com.honeywell.coreptdu.global.dto.BaseResponse<com.honeywell.coreptdu.datatypes.airport.dto.response.AirportTriggerResponseDto> responseObj = new com.honeywell.coreptdu.global.dto.BaseResponse<>()
  com.honeywell.coreptdu.datatypes.airport.dto.response.AirportTriggerResponseDto resDto = new com.honeywell.coreptdu.datatypes.airport.dto.response.AirportTriggerResponseDto()
  try {     com.honeywell.coreptdu.utils.oracleutils.OracleHelpers.bulkClassMapper(reqDto, this);     stdAirportMr.getRow(system.getCursorRecordIndex()).setDataSupplier(global.getDataSupplier());     com.honeywell.coreptdu.utils.oracleutils.OracleHelpers.ResponseMapper(this, resDto);     log.info(" stdAirportMrPreQuery executed successfully");     return responseObj.render(responseObj.formSuccessResponse(com.honeywell.coreptdu.utils.common.Constants.RECORD_FETCH, resDto)); } catch (java.lang.Exception e) {     log.error("Error while Executing the stdAirportMrPreQuery Service");     com.honeywell.coreptdu.utils.oracleutils.OracleHelpers.ResponseMapper(this, resDto);     return com.honeywell.coreptdu.exception.ExceptionUtils.handleException(e, resDto); }

Method: com.honeywell.coreptdu.pll.CoreptLib.coreptexecutequery
  // BaseResponse<CoreptexecutequeryResponseDto> responseObj = new java.lang.String query = ""
  com.honeywell.coreptdu.utils.oracleutils.Record rec = null
  java.sql.PreparedStatement prepareStatement = null
  java.lang.Object obj = null
  try {     /* New Approach */     java.lang.String relationWhere = "";     // if (system.getCursorBlock().equals("PL_STD_APPROACH")) {     // if (!Objects.equals(global.getFromErrorSummary(), "Y")) {     // where += "data_supplier = '" + global.getDataSupplier() + "'";     // if (Objects.equals(displayItemBlock.getAllowBothCycles(), "N")) {     // where += " AND processing_cycle = " + global.getProcessingCycle();     // }     // }     // }     // if (system.getCursorBlock().equals("PL_TLD_APPROACH")) {     // if (!Objects.equals(global.getFromErrorSummary(), "Y")) {     // where += "data_supplier = '" + global.getDataSupplier() + "'";     // if (Objects.equals(displayItemBlock.getAllowBothCycles(), "N")) {     // where += " AND processing_cycle = " + global.getProcessingCycle();     // }     // }     // }     // if (system.getCursorBlock().equals("STD_APPROACH")) {     // if (!Objects.equals(global.getFromErrorSummary(), "Y")) {     // where += "data_supplier = '" + global.getDataSupplier() + "'";     // }     // }     // if (system.getCursorBlock().equals("TLD_APPROACH")) {     // if (!Objects.equals(global.getFromErrorSummary(), "Y")) {     // where += "data_supplier = '" + global.getDataSupplier() + "'";     // }     // }     // TODO execute_query;     // To Create run time WHERE condition from current cursor block     obj = nameIn(curForm, system.getCursorBlock());     relationWhere = app.getWhereQuery(obj);     java.lang.String defaultWhere = getBlockProperty(curForm, system.getCursorBlock(), "default_where");     java.lang.String where = null;     if (!((relationWhere == null) || (relationWhere.length() == 0))) {         where = relationWhere;     } else if (com.honeywell.coreptdu.utils.oracleutils.OracleHelpers.isNullorEmpty(relationWhere) && (!com.honeywell.coreptdu.utils.oracleutils.OracleHelpers.isNullorEmpty(defaultWhere))) {         where = defaultWhere;     }     // coverity changes made and null check for where is done in if clause     if ((where != null) && (!(com.honeywell.coreptdu.utils.oracleutils.OracleHelpers.isNullorEmpty(defaultWhere) || (java.util.Objects.nonNull(relationWhere) && (relationWhere.length() == 0))))) {         where += ((where != null) && (where.length() != 0) ? " AND " : " ") + defaultWhere;     }     // where += OracleHelpers.nameIn(nameIn(instance, "plStdAirportMr"),  "joinClause", system.getCursorRecordIndex());     long queryHits = executeQuery(curForm, system.getCursorBlock(), where, toString(nameIn(nameIn(instance, system.getCursorBlock()), "join_Clause")), toString(nameIn(nameIn(curForm, system.getCursorBlock()), "order_By")));     if (!java.util.Objects.equals(queryHits, 0L)) {         // TODO unset_query_menu_items;         unsetQueryMenuItems();     } else {         com.honeywell.coreptdu.utils.oracleutils.PropertyHelpers.setAlertProperty(event, "stop_alert", "caution", "Error", "FRM-40301: Query caused no records to be retrieved.Re-\nenter.", "ALERT_MESSAGE_TEXT", "OK", "", "");         com.honeywell.coreptdu.utils.oracleutils.PropertyHelpers.setShowAlert(event, "stop_alert", false);         throw new com.honeywell.coreptdu.exception.FormTriggerFailureException();     }     log.info("Data Retreived Successfully"); } catch (org.hibernate.exception.SQLGrammarException e) {     com.honeywell.coreptdu.utils.oracleutils.PropertyHelpers.setAlertProperty(event, "stop_alert", "caution", "Error", "FRM-40505: ORACLE error: unable to perform query.", "ALERT_MESSAGE_TEXT", "OK", "", "");     com.honeywell.coreptdu.utils.oracleutils.PropertyHelpers.setShowAlert(event, "stop_alert", false);     throw new com.honeywell.coreptdu.exception.FormTriggerFailureException(); } catch (java.lang.Exception e) {     if (e instanceof org.hibernate.QueryParameterException) {         java.lang.String queryWhere = null;         java.lang.reflect.Field field;         java.lang.Object value = obj;         java.lang.reflect.Field dataField = null;         try {             dataField = obj.getClass().getDeclaredField("data");             dataField.setAccessible(true);             java.lang.Object dataObj = dataField.get(obj);             if ((dataObj instanceof java.util.List<?> data) && (!data.isEmpty())) {                 value = data.get(0);             }         } catch (java.lang.NoSuchFieldException ignored) {         }         field = value.getClass().getDeclaredField("queryWhere");         field.setAccessible(true);         queryWhere = ((java.lang.String) (field.get(value)));         // coverity-fixes         // queryWhere != null &&         if (queryWhere.startsWith(":")) {             java.lang.String[] parts = queryWhere.split(":");             queryWhere = ((parts.length > 1) && (!parts[1].trim().isEmpty())) ? parts[1].trim().split("\\s+")[0] : "";         }         com.honeywell.coreptdu.utils.oracleutils.PropertyHelpers.setAlertProperty(event, "stop_alert", "caution", "Error", ("FRM-41804: Variable was not entered: " + queryWhere.toLowerCase()) + ".", "ALERT_MESSAGE_TEXT", "OK", "", "");         com.honeywell.coreptdu.utils.oracleutils.PropertyHelpers.setShowAlert(event, "stop_alert", false);         throw new com.honeywell.coreptdu.exception.FormTriggerFailureException();     }     log.error("Error while receiving data" + e.getMessage());     throw e; }

Method: com.honeywell.coreptdu.utils.oracleutils.GroupUtils.findColumn
  java.lang.String[] str = columnName.split("\\.")
  java.lang.String groupName = (columnName.contains(".")) ? str[0] : columnName
  java.lang.String item = (columnName.contains(".")) ? str[1] : ""
  com.honeywell.coreptdu.utils.oracleutils.RecordGroup group = com.honeywell.coreptdu.utils.oracleutils.GroupUtils.findGroup(groups, groupName)
  com.honeywell.coreptdu.utils.oracleutils.RecordGroupColumn col = null
  if (group == null) {     return null; }
  col = group.getColumns().stream().filter(d -> java.util.Objects.equals(d.getName(), item)).findFirst().orElse(null)
  return col

Method: com.honeywell.coreptdu.utils.oracleutils.GenericTemplateForm.setGroupNumberCell
  com.honeywell.coreptdu.utils.oracleutils.GroupUtils.setGroupNumberCell(group, columnName, rowIndex, value)

Method: com.honeywell.coreptdu.utils.oracleutils.GenericTemplateForm.getGroupNumberCell
  return com.honeywell.coreptdu.utils.oracleutils.GroupUtils.getGroupNumberCell(groups, ColumnName, rowIndex)

Method: com.honeywell.coreptdu.pll.CoreptLib.validateCustomer
  java.lang.String query = null
  com.honeywell.coreptdu.utils.oracleutils.Record rec = null
  java.lang.Integer vNdcrExists = 0
  java.lang.Integer vNcustExists = 0
  java.lang.Integer vNflag = 0
  java.lang.String vSnavdb = null
  java.lang.String vSnavdbExists = null
  java.lang.String vSdataSupplier = null
  java.lang.String vSsuppExists = null
  java.lang.String vScustSupplier = null
  java.lang.String lsInstanceType = null
  try {     try {         query = """         SELECT UPPER(Instance_Type) from cptcontrol.system_software_identification         """;         rec = app.selectInto(query);         lsInstanceType = rec.getObject("Instance_Type").toString();     }// OTHERS      catch (java.lang.Exception e) {         lsInstanceType = "DEVE";     }     vNcustExists = 0;     vNdcrExists = 0;     query = """     SELECT navdb_id         from NAVDB_DCR         WHERE dcr_number = ?     """;     rec = app.selectInto(query, pDcrNumber);     vSnavdbExists = rec.getString();     query = """     SELECT COUNT (dcr_number)         from data_change_request         WHERE dcr_number = ? AND effectivity_cycle = ?     """;     rec = app.selectInto(query, pDcrNumber, pCycle);     vNdcrExists = rec.getInt();     if (!java.util.Arrays.asList("CPT", "HON").contains(vSnavdbExists)) {         query = """         SELECT data_supplier                     from NAVDB                 WHERE navdb_id = ?         """;         rec = app.selectInto(query, vSnavdbExists);         vScustSupplier = rec.getString();     }     if (java.util.Arrays.asList("CPT", "HON").contains(vSnavdbExists)) {         query = """                 SELECT COUNT (DCR_NUMBER)                         from NAVDB_DCR                     WHERE NAVDB_ID = ?         """;         rec = app.selectInto(query, vSnavdbExists);         vNdcrExists = rec.getInt();         // v_nDCR_Exists>0         if (vNdcrExists > 0) {             vNcustExists = 1;             vNdcrExists = 1;         }     } else if (java.util.Arrays.asList("JEP", "LID", "EAG").contains(vSnavdbExists)) {         vNcustExists = 1;     } else if (java.util.Arrays.asList("Q", "N").contains(pSupplier)) {         query = """         SELECT COUNT (DCR_NUMBER)                 from NAVDB_DCR             WHERE DCR_NUMBER IN (SELECT DCR_NUMBER FROM DATA_CHANGE_REQUEST WHERE EFFECTIVITY_CYCLE = ? AND dcr_number = ?)         """;         rec = app.selectInto(query, pCycle, pDcrNumber);         vNdcrExists = rec.getInt();         if (vNdcrExists == 1) {             vNcustExists = 1;         }     } else if (java.util.Objects.equals(vScustSupplier, pSupplier)) {         vNcustExists = 1;         vNdcrExists = 1;     }     vSdataSupplier = pSupplier;     // p_rec_type='T'     if (java.util.Objects.equals(pRecType, "T")) {         // v_nDCR_Exists=1ANDv_nCust_Exists=1         if (java.util.Objects.equals(vNdcrExists, 1) && java.util.Objects.equals(vNcustExists, 1)) {             // v_sNavdb_ExistsIN('CPT','HON')             if (java.util.Arrays.asList("CPT", "HON").contains(vSnavdbExists)) {                 vNflag = 1;             } else if (java.util.Objects.equals(vSnavdbExists, "JEP") && java.util.Objects.equals(vSdataSupplier, "J")) {                 vNflag = 2;             } else if (java.util.Objects.equals(vSnavdbExists, "LID") && java.util.Objects.equals(vSdataSupplier, "L")) {                 vNflag = 3;             } else if (java.util.Objects.equals(vSnavdbExists, "EAG") && java.util.Objects.equals(vSdataSupplier, "E")) {                 vNflag = 4;             } else if (java.util.Arrays.asList("Q", "N").contains(pSupplier)) {                 try {                     query = """                     SELECT DATA_SUPPLIER                                     from NAVDB WHERE NAVDB_ID  = (SELECT NAVDB_ID FROM NAVDB_DCR WHERE DCR_NUMBER = ?)                     """;                     rec = app.selectInto(query, pDcrNumber);                     vSsuppExists = rec.getString();                 } catch (java.lang.Exception e) {                     vNflag = 0;                 }                 if (java.util.Objects.equals(vSsuppExists, pSupplier)) {                     vNflag = 5;                 } else {                     vNflag = 0;                 }             } else {                 vNflag = 6;             }         } else {             vNflag = 0;         }     } else if (java.util.Objects.equals(pRecType, "S")) {         if (java.util.Objects.equals(vNdcrExists, 1)) {             if (java.util.Arrays.asList("CPT", "HON").contains(vSnavdbExists)) {                 vNflag = 1;             } else if (java.util.Objects.equals(vSnavdbExists, "JEP") && java.util.Objects.equals(vSdataSupplier, "J")) {                 vNflag = 2;             } else if (java.util.Objects.equals(vSnavdbExists, "LID") && java.util.Objects.equals(vSdataSupplier, "L")) {                 vNflag = 3;             } else if (java.util.Objects.equals(vSnavdbExists, "EAG") && java.util.Objects.equals(vSdataSupplier, "E")) {                 vNflag = 4;             } else if (java.util.Arrays.asList("Q", "N").contains(pSupplier)) {                 try {                     query = """                     SELECT DATA_SUPPLIER                     from NAVDB WHERE NAVDB_ID  = (SELECT NAVDB_ID                     FROM NAVDB_DCR                     WHERE DCR_NUMBER = ?)                     """;                     rec = app.selectInto(query, pDcrNumber);                     vSsuppExists = rec.getString();                     if (java.util.Objects.equals(vSsuppExists, pSupplier)) {                         vNflag = 5;                     } else {                         vNflag = 0;                     }                 } catch (java.lang.Exception e) {                     vNflag = 0;                 }             }         }     }     if (java.util.Objects.equals(lsInstanceType, "ENGR")) {         vNflag = 1;     }     return vNflag; } catch (com.honeywell.coreptdu.exception.NoDataFoundException e) {     return 0; }

Method: com.honeywell.coreptdu.utils.oracleutils.GenericTemplateForm.rpad
  return org.apache.commons.lang3.StringUtils.rightPad(value, width, replaceChar)

Method: com.honeywell.coreptdu.utils.oracleutils.GenericTemplateForm.lpad
  return org.apache.commons.lang3.StringUtils.leftPad(value, width, toString(replaceCharacter))

Method: com.honeywell.coreptdu.pll.CoreptLib.checkwildcardforkeys
  // String firstItm = getBlockItemProperty(instance, curBlk, "FIRST_ITEM", null); // String lastItm = getBlockItemProperty(instance, curBlk, "LAST_ITEM", null); // String curItm = firstItm; // Integer vCount = 0; //  // while ((!Objects.equals(lastItm, curItm))) { // vCount = vCount + 1; // if (vCount > 10) { // break; // } // if (Objects.equals(getReqItemProperty(instance, curBlk, curItm), true)) { // if (instr(toString(nameIn(instance, curBlk + "." + curItm)), "%") > 0 // || instr(toString(nameIn(instance, curBlk + "." + curItm)), "_") > 0) { // dspMsg("Wildcard '%' and/or '_' is not allowed."); // copy(instance, null, curBlk + "." + curItm); // throw new FormTriggerFailureException(); // } // } // curItm = getBlockItemProperty(instance, curBlk, "NEXT_ITEM", curItm); // } com.honeywell.coreptdu.utils.oracleutils.Block<?> currentBlock = ((com.honeywell.coreptdu.utils.oracleutils.Block<?>) (nameIn(instance, curBlk)))
  java.lang.reflect.Field data = currentBlock.getClass().getDeclaredField("data")
  data.setAccessible(true)
  java.util.List<?> datas = ((java.util.List<?>) (data.get(currentBlock)))
  for (java.lang.Object datum : datas) {     java.lang.reflect.Method getRecordStatus = datum.getClass().getMethod("getRecordStatus");     java.lang.String datumRecordStatus = java.lang.String.valueOf(getRecordStatus.invoke(datum));     if (java.util.Objects.equals(datumRecordStatus, "INSERT")) {         java.lang.Class<?> _class = datum.getClass();         for (java.lang.reflect.Field fields : _class.getDeclaredFields()) {             fields.setAccessible(true);             if (fields.isAnnotationPresent(jakarta.persistence.Id.class)) {                 java.lang.String fieldName = fields.getName();                 java.lang.reflect.Field field = _class.getDeclaredField(fieldName);                 field.setAccessible(true);                 java.lang.Object value = field.get(datum);                 java.lang.String compareValue = java.lang.String.valueOf(value);                 if (!compareValue.matches("^[^%_]*$")) {                     dspMsg("Wildcard '%' and/or '_' is not allowed.");                     throw new com.honeywell.coreptdu.exception.FormTriggerFailureException();                 }             }         }     } }

Method: com.honeywell.coreptdu.utils.oracleutils.Record.getInt
  try {     com.honeywell.coreptdu.utils.oracleutils.var obj = getNext(true);     if (obj == null) {         return null;     }     return java.lang.Integer.valueOf(obj.toString()); } catch (java.lang.Exception e) {     throw new java.lang.RuntimeException(e); }

Method: com.honeywell.coreptdu.datatypes.airport.serviceimpl.AirportTriggerServiceImpl.doValidate
  log.info("doValidate Executing")
  try {     com.honeywell.coreptdu.global.dbtype.CrAirport vRecord = new com.honeywell.coreptdu.global.dbtype.CrAirport();     java.lang.Integer vErrInd = 0;     java.util.List<java.lang.Integer> vErrList = new java.util.ArrayList<>();     java.lang.String vAllErr = null;     com.honeywell.coreptdu.global.dbtype.PlStdAirportType vSrec = new com.honeywell.coreptdu.global.dbtype.PlStdAirportType();     com.honeywell.coreptdu.global.dbtype.PlTldAirportType vTrec = new com.honeywell.coreptdu.global.dbtype.PlTldAirportType();     java.lang.String vNerr = null;     // String vValid = null;     java.lang.String vInd = com.honeywell.coreptdu.global.forms.FormConstant.Y;     if (!java.util.Objects.equals(nameIn(this, pBlock + ".airport_ident"), null)) {         if (java.util.Objects.equals(parameter.getRecordType(), "S")) {             controlBlock.setStdOverrideErrors(null);         } else {             controlBlock.setTldOverrideErrors(null);         }         vRecord = populateRecord(pBlock, vRecord);         java.util.Map<java.lang.String, java.lang.Object> cst = app.executeProcedure("CPT", "VAIRPORT", "RECSV1", new com.honeywell.coreptdu.utils.dbutils.ProcedureInOutParameter("p_carpt", vRecord, oracle.jdbc.OracleTypes.STRUCT, "SDV_RECORDS.CR_AIRPORT"), new com.honeywell.coreptdu.utils.dbutils.ProcedureOutParameter("p_errlist", oracle.jdbc.OracleTypes.ARRAY, "CPT_TYPES.ERRLIST_TYPE"), new com.honeywell.coreptdu.utils.dbutils.ProcedureOutParameter("p_err_ind", oracle.jdbc.OracleTypes.NUMBER));         java.sql.Struct struct = ((java.sql.Struct) (cst.get("p_carpt")));         vRecord = com.honeywell.coreptdu.utils.oracleutils.OracleHelpers.mapStructToClass(struct, com.honeywell.coreptdu.global.dbtype.CrAirport.class);         vErrInd = toInteger(cst.get("p_err_ind"));         java.sql.Array arr = ((java.sql.Array) (cst.get("p_errlist")));         java.lang.Object[] errRes = ((java.lang.Object[]) (arr.getArray()));         for (java.lang.Object itr : errRes) {             vErrList.add(toInteger(itr));         }         if (!java.util.Objects.equals(vErrInd, 0)) {             for (int i = 0; i < vErrList.size(); i++) {                 if (!coreptLib.isOverride(global.getDataSupplier(), toInteger(nameIn(this, pBlock + ".processing_cycle")), "AIRPORT", vErrList.get(i))) {                     vAllErr = (((getNullClean(vAllErr) + " * ") + toChar(vErrList.get(i))) + " - ") + coreptLib.getErrText(vErrList.get(i));                     vInd = com.honeywell.coreptdu.global.forms.FormConstant.I;                 } else if (!java.util.Objects.equals(vInd, "I")) {                     vInd = com.honeywell.coreptdu.global.forms.FormConstant.O;                 }             }         }         com.honeywell.coreptdu.datatypes.airport.serviceimpl.InnerAirportTriggerServiceImpl res = populateRelRecord(pBlock, vSrec, vTrec);         vSrec = res.plStdAirportType;         vTrec = res.plTldAirportType;         if (((java.util.Objects.equals(parameter.getRecordType(), "S") && (!java.util.Objects.equals(vSrec.getRecommendedNavaidIdent(), null))) || (java.util.Objects.equals(parameter.getRecordType(), "T") && (!java.util.Objects.equals(vTrec.getRecommendedNavaidIdent(), null)))) || ((java.util.Objects.equals(parameter.getRecordType(), "S") && (!java.util.Objects.equals(vSrec.getPublicMilitaryInd(), null))) || (java.util.Objects.equals(parameter.getRecordType(), "T") && (!java.util.Objects.equals(vTrec.getPublicMilitaryInd(), null))))) {             java.util.Map<java.lang.String, java.lang.Object> vairport = app.executeProcedure("CPTS", "vairport_WRAPPER", "RECRV1_WRAPPER", new com.honeywell.coreptdu.utils.dbutils.ProcedureInParameter("p_record_type", parameter.getRecordType(), oracle.jdbc.OracleTypes.VARCHAR), new com.honeywell.coreptdu.utils.dbutils.ProcedureInParameter("cust_p_srec", vSrec, oracle.jdbc.OracleTypes.STRUCT, "RECRV1_WRAPPER.PL_STD_AIRPORT_TYPE"), new com.honeywell.coreptdu.utils.dbutils.ProcedureInParameter("cust_p_trec", vTrec, oracle.jdbc.OracleTypes.STRUCT, "RECRV1_WRAPPER.PL_TLD_AIRPORT_TYPE"), new com.honeywell.coreptdu.utils.dbutils.ProcedureOutParameter("p_err", oracle.jdbc.OracleTypes.VARCHAR), new com.honeywell.coreptdu.utils.dbutils.ProcedureOutParameter("p_valind", oracle.jdbc.OracleTypes.VARCHAR), new com.honeywell.coreptdu.utils.dbutils.ProcedureInParameter("p_view_only", pIgnoreRef, oracle.jdbc.OracleTypes.VARCHAR), new com.honeywell.coreptdu.utils.dbutils.ProcedureInParameter("p_run_loc", "DU", oracle.jdbc.OracleTypes.VARCHAR));             vNerr = toString(vairport.get("p_err"));             if (!java.util.Objects.equals(vNerr, "YY")) {                 if (java.util.Objects.equals(substr(vNerr, 1, 1), "N")) {                     vAllErr = (getNullClean(vAllErr) + " * 218 - ") + coreptLib.getErrText(218);                 }                 if (java.util.Objects.equals(substr(vNerr, 2, 1), "N")) {                     vAllErr = (getNullClean(vAllErr) + " * 5585 - ") + coreptLib.getErrText(5585);                 }             }         }         coreptLib.setindandmessage(pBlock, vAllErr, parameter.getWorkType(), pIgnoreRef, vInd);         if (java.util.Objects.equals(pIgnoreRef, "N")) {             setUpdateDcr(upper(pBlock), vRecord);         }         coreptLib.setoverridebutton(pBlock);     } else {         coreptLib.setinitialerrordisplay(pBlock);     }     log.info("doValidate Executed Successfully"); } catch (java.lang.Exception e) {     log.error("Error while executing doValidate" + e.getMessage());     throw e; }

Method: com.honeywell.coreptdu.utils.oracleutils.OracleHelpers.sqlLike
  if ((input == null) || (sqlPattern == null)) {     return false;// Handle nulls gracefully  }
  // Escape regex special characters in the SQL pattern java.lang.String regexPattern = // Replace SQL wildcard % with regex .* // Escape pipe // Escape close parenthesis // Escape open parenthesis // Escape close bracket // Escape open bracket // Escape close brace // Escape open brace // Escape end anchor // Escape start anchor // Escape dots // Escape backslashes sqlPattern.replace("\\", "\\\\").replace(".", "\\.").replace("^", "\\^").replace("$", "\\$").replace("{", "\\{").replace("}", "\\}").replace("[", "\\[").replace("]", "\\]").replace("(", "\\(").replace(")", "\\)").replace("|", "\\|").replace("%", ".*").replace("_", ".")// Replace SQL wildcard _ with regex . 
  // Compile and match the pattern return java.util.regex.Pattern.compile(regexPattern, java.util.regex.Pattern.CASE_INSENSITIVE).matcher(input).matches()

Method: com.honeywell.coreptdu.datatypes.coreptmenummb.serviceimpl.CoreptMenuMmbServiceImpl.toolsDuplicate
  try {     java.lang.String vForm = system.getCurrentForm();     java.lang.String vLastQuery;     com.honeywell.coreptdu.global.forms.window wnId = findWindow(system.getCurrentForm(), "BASE_WINDOW");     if (java.util.Objects.equals(nameIn(frm, "parameter.libraryAccess"), "MASTER")) {         coreptLib.dspMsg("Records in the Master Library cannot be duplicated!");     } else if (java.util.Objects.equals(nameIn(frm, "parameter.libraryAccess"), "PRE-LIBRARY")) {         if (java.util.Objects.equals(nameIn(frm, "system.mode"), "NORMAL")) {             if (wnId != null) {                 copy(getWindowProperty(wnId, "windowName"), "global.statusWindow");             }             if (java.util.Objects.equals(system.getFormStatus(), "INSERT")) {                 coreptLib.dspMsg("The selected record is null. Select a not null record or run\na query first.");             }             if (!java.util.Objects.equals(system.getFormStatus(), "CHANGED")) {                 if (!com.honeywell.coreptdu.utils.oracleutils.OracleHelpers.isNullorEmpty(global.getCreateDcrNumber())) {                     global.setNewCustomerIdent(null);                     // global.setNumToDuplicate(null);                     // global.setCurrCustomerIdent(null);                     // global.setFirstCurrident(null);                     // global.setSecondCurrident(null);                     // global.setSecondCurrIcao(null);                     global.setRecordType("T");                     global.setGeninhouse("Y");                     // global.setFirstIdent(null);                     // global.setSecondIdent(null);                     // global.setSecondIcao(null);                     global.setNewCycle(null);                     if (global.getDoDuplicate() == null) {                         global.setDoDuplicate(null);                     }                     if (global.getCurrCustomerIdent() == null) {                         global.setCurrCustomerIdent("");                     }                     if (global.getFirstCurrident() == null) {                         global.setFirstCurrident("");                     }                     if (global.getSecondCurrident() == null) {                         global.setSecondCurrident("");                     }                     if (global.getSecondCurrIcao() == null) {                         global.setSecondCurrIcao("");                     }                     if (global.getFirstIdent() == null) {                         global.setFirstIdent("");                     }                     if (global.getSecondIdent() == null) {                         global.setSecondIdent("");                     }                     if (global.getSecondIcao() == null) {                         global.setSecondIcao("");                     }                     global.setNewCycle(null);                     if (java.util.Arrays.asList("AIRPORT_APPROACH", "AIRPORT_SID", "AIRPORT_STAR", "HELIPORT_APPROACH", "HELIPORT_SID", "HELIPORT_STAR", "COMPANY_ROUTE", "COMPANY_ROUTE_DE", "ENROUTE_AIRWAY", "ALTERNATE", "FIR_UIR").contains(upper(vForm))) {                         // have                         // to                         // check                         // substr                         if (java.util.Arrays.asList("APPROACH", "STAR", "SID", "ANY_ROUTE", "ENROUTE_AIRWAY", "ALTERNATE_DEST", "FIR_UIR").contains(system.getCursorBlock().substring(7))) {                             global.setDetailExists("Y");                             com.honeywell.coreptdu.utils.oracleutils.OracleHelpers.bulkClassMapper(this, coreptLib);                             coreptLib.duplicatestep1(frm);                         } else {                             coreptLib.dspMsg("To copy a detail record, please use the DUPLICATE\nfunction under the Record menu.\n" + "To copy the whole record, please put the cursor on the\nmaster record.");                         }                     } else if (java.util.Arrays.asList("CONTRL_AIRSPACE", "RESTR_AIRSPACE", "GRID_MORA").contains(upper(vForm))) {                         coreptLib.dspMsg(("Copy function is not available for " + vForm) + " yet.");                     } else {                         global.setDetailExists("N");                         com.honeywell.coreptdu.utils.oracleutils.OracleHelpers.bulkClassMapper(frm, coreptLib);                         coreptLib.duplicatestep1(frm);                     }                     // PropertyHelpers.callForm(event, "duplicaterecords");                 } else {                     coreptLib.dspMsg("The selected record is null. Select a not null record or run\na query first.");                 }             } else {                 coreptLib.dspMsg("There is change in the data. Please save the\nmodification first.");             }         } else {             coreptLib.dspMsg("The module is in query mode.  Run the query first.");         }     } else if (like("SEL%", toString(nameIn(frm, "parameter.libraryAccess")))) {         if (java.util.Objects.equals(nameIn(frm, "system.mode"), "NORMAL")) {             copy(getWindowProperty(wnId, "windowName"), "global.Status_Window");             if (!java.util.Objects.equals(system.getFormStatus(), "CHANGED")) {                 if (!java.util.Objects.equals(rtrim(toString(nameIn(frm, system.getCursorBlock() + ".createDcrNumber"))), null)) {                     if (global.getDoDuplicate() == null) {                         global.setDoDuplicate(null);                     }                     if (global.getNewCustomerIdent() == null) {                         global.setNewCustomerIdent("");                     }                     if (global.getCurrCustomerIdent() == null) {                         global.setCurrCustomerIdent("");                     }                     if (global.getRowId() == null) {                         global.setRowId("");                     }                     if (global.getFirstCurrident() == null) {                         global.setFirstCurrident("");                     }                     if ((like("%APF", vForm) && (!like("%APF", system.getCursorBlock()))) && (!java.util.Objects.equals(system.getCursorBlock(), "SEARCH"))) {                         coreptLib.dspMsg("To copy a detail record, please use the DUPLICATE\nfunction under the Record menu.\n" + "To copy the whole record, please put the cursor on the\nmaster record.");                     } else if (java.util.Arrays.asList("BOEING_APF", "AIRBUS_APF", "DOUGLAS_APF", "WEIGHT_VARIANT", "AUTO_THRUST_CUTBACK", "FUEL_POLICY", "FLIGHT_TEST_BUS").contains(com.honeywell.coreptdu.utils.oracleutils.GenericTemplateForm.toSnakeCase(vForm))) {                         if (java.util.Objects.equals(system.getCursorBlock(), "SEARCH")) {                             // TODO global.setRowId(rowidtochar(nameIn("search.rowid")));                             global.setRowId(rowIdToChar(toString(nameIn(frm, "search.rowid"))));                             global.setCurrCustomerIdent(toString(nameIn(frm, "search.navdbId")));                             global.setIdent(toString(nameIn(frm, "search.apfId")));                             vLastQuery = upper(getBlockProperty("SEARCH", "lastQuery"));                         } else {                             global.setRowId(rowIdToChar(toString(nameIn(frm, com.honeywell.coreptdu.utils.oracleutils.HoneyWellUtils.toCamelCase(vForm) + ".rowid"))));                             global.setCurrCustomerIdent(toString(nameIn(frm, com.honeywell.coreptdu.utils.oracleutils.HoneyWellUtils.toCamelCase(vForm) + ".navdbId")));                             if (java.util.Arrays.asList("BOEING_APF", "AIRBUS_APF").contains(com.honeywell.coreptdu.utils.oracleutils.GenericTemplateForm.toSnakeCase(vForm))) {                                 global.setIdent(toString(nameIn(frm, com.honeywell.coreptdu.utils.oracleutils.HoneyWellUtils.toCamelCase(vForm) + ".apfId")));                             } else if (java.util.Objects.equals(com.honeywell.coreptdu.utils.oracleutils.GenericTemplateForm.toSnakeCase(vForm), "DOUGLAS_APF")) {                                 global.setIdent(toString(nameIn(frm, com.honeywell.coreptdu.utils.oracleutils.HoneyWellUtils.toCamelCase(vForm) + ".airframeType")));                             } else {                                 global.setIdent(null);                             }                             if (nameIn(nameIn(frm, com.honeywell.coreptdu.utils.oracleutils.HoneyWellUtils.toCamelCase(vForm)), "lastQuery") == null) {                                 vLastQuery = hashUtils.decrypt(toString(nameIn(frm, com.honeywell.coreptdu.utils.oracleutils.HoneyWellUtils.toCamelCase(vForm) + ".lastQuery")));                             } else {                                 vLastQuery = hashUtils.decrypt(toString(nameIn(nameIn(frm, com.honeywell.coreptdu.utils.oracleutils.HoneyWellUtils.toCamelCase(vForm)), "lastQuery")));                             }                             // vLastQuery = upper(                             // getBlockProperty(HoneyWellUtils.toCamelCase(vForm), "lastQuery"));                         }                         if (!com.honeywell.coreptdu.utils.oracleutils.OracleHelpers.isNullorEmpty(vLastQuery)) {                             if (instr(vLastQuery, "WHERE") > 0) {                                 vLastQuery = substr(vLastQuery, instr(vLastQuery, " WHERE "));                                 if (instr(upper(vLastQuery), "A") > 0) {                                     vLastQuery = substrWithLen(vLastQuery, 0, com.honeywell.coreptdu.utils.oracleutils.OracleHelpers.instr(vLastQuery, ")a)"));                                 }                                 if (instr(vLastQuery, "ORDER BY") > 1) {                                     vLastQuery = substr(vLastQuery, 1, instr(vLastQuery, "ORDER BY") - 1);                                 } else if (instr(vLastQuery, "order by") > 1) {                                     vLastQuery = substr(vLastQuery, 1, instr(vLastQuery, "order by") - 1);                                 }                                 global.setGLastQuery(vLastQuery);                             } else if (instr(vLastQuery, "where") > 0) {                                 vLastQuery = substr(vLastQuery, instr(vLastQuery, " where "));                                 if (instr(vLastQuery, "a") > 0) {                                     vLastQuery = substrWithLen(vLastQuery, 0, com.honeywell.coreptdu.utils.oracleutils.OracleHelpers.instr(vLastQuery, ")a)"));                                 }                                 if (instr(vLastQuery, "order by") > 1) {                                     vLastQuery = substr(vLastQuery, 1, instr(vLastQuery, "order by") - 1);                                 } else if (instr(vLastQuery, "ORDER BY") > 1) {                                     vLastQuery = substr(vLastQuery, 1, instr(vLastQuery, "ORDER BY") - 1);                                 }                                 global.setGLastQuery(vLastQuery);                             } else {                                 global.setGLastQuery(null);                             }                         }                         global.setMasterBlock(vForm);                         callForm(lower("duplicatescrecords"), "NO_HIDE", "DO_REPLACE", "NO_QUERY_ONLY", "SHARE_LIBRARY_DATA");                         if (java.util.Objects.equals(nameIn(frm, "global.do_uplicate"), "N")) {                             // TODO dsp_msg('Record duplication cancelled');                             exitForm();                             coreptLib.dspMsg("Record duplication cancelled");                         }                     } else {                         coreptLib.dspMsg(("Copy function is not available for " + vForm) + " yet.");                     }                 } else {                     coreptLib.dspMsg("The selected record is null. Select a not null record or run a query first.");                 }             } else {                 coreptLib.dspMsg("There is change in the data. Please save the\nmodification first.");             }         } else {             coreptLib.dspMsg("The module is in query mode.  Run the query first.");         }     } } catch (java.lang.Exception e) {     log.error("Error while receiving data" + e.getMessage());     throw e; }

Method: com.honeywell.coreptdu.datatypes.coreptmenummb.serviceimpl.CoreptMenuMmbServiceImpl.toolsExportFormData
  java.lang.String curBlk = system.getCursorBlock()
  java.lang.String blockName = com.honeywell.coreptdu.utils.oracleutils.HoneyWellUtils.toCamelCase(system.getCursorBlock())
  com.honeywell.coreptdu.global.forms.window wnid = findWindow(system.getCurrentForm(), "baseWindow")
  // -- Check if there is data // --		last_record; // --		v_records := get_block_property(name_in('system.current_block'),QUERY_HITS); // --		first_record; //command in fmb code also try {     if (java.util.Objects.equals(system.getMode(), "NORMAL")) {         if (!java.util.Objects.equals(system.getFormStatus(), "CHANGED")) {             if ((like("%_LEG", curBlk) || like("%_SEGMENT", curBlk)) || like("%_VIA", curBlk)) {                 com.honeywell.coreptdu.utils.oracleutils.PropertyHelpers.setAlertProperty(event, "stop_alert", "stop", "Error", "Data should be exported from master level.", "ALERT_MESSAGE_TEXT", "OK", "", "");                 com.honeywell.coreptdu.utils.oracleutils.PropertyHelpers.setShowAlert(event, "stop_alert", false);                 throw new com.honeywell.coreptdu.exception.FormTriggerFailureException();             } else if ((java.util.Objects.equals(toString(nameIn(frm, com.honeywell.coreptdu.utils.oracleutils.HoneyWellUtils.toCamelCase(curBlk) + ".recordStatus")), "NEW") && (!java.util.Objects.equals(lower(curBlk), "message"))) || ((com.honeywell.coreptdu.utils.oracleutils.OracleHelpers.isNullorEmpty(toString(nameIn(nameIn(frm, com.honeywell.coreptdu.utils.oracleutils.HoneyWellUtils.toCamelCase(curBlk)), "lastQuery"))) && (!java.util.Objects.equals(lower(curBlk), "message"))) && (!java.util.Objects.equals(lower(curBlk), "comparerecordcountblk")))) {                 // && upper(system.getRecordStatus()).equals("DELETED")) {                 coreptLib.dspMsg("There is no data to be exported. Run first a query or\ncreate record(s).");                 throw new com.honeywell.coreptdu.exception.FormTriggerFailureException(event);             } else {                 global.setStatusWindow(getWindowProperty(wnid, com.honeywell.coreptdu.global.forms.FormConstant.WINDOW_STATE));                 coreptLib.savedata(toString(nameIn(this, system.getCurrentForm())), toString(nameIn(this, system.getCurrentBlock())), null);             }         } else {             coreptLib.dspMsg("There is change in the data. Please save the\nmodification first.");             throw new com.honeywell.coreptdu.exception.FormTriggerFailureException(event);         }         com.honeywell.coreptdu.utils.oracleutils.PropertyHelpers.callForm(event, "exportdestination");     } else {         coreptLib.dspMsg("The module is in query mode.  Run first the query.");         throw new com.honeywell.coreptdu.exception.FormTriggerFailureException(event);     }     if (nameIn(nameIn(frm, blockName), "lastQuery") == null) {         global.setLastQuery(toString(nameIn(frm, blockName + ".lastQuery")));     } else {         global.setLastQuery(toString(nameIn(nameIn(frm, blockName), "lastQuery")));     }     // PropertyHelpers.goBlock(event, "selectOptions", "");     com.honeywell.coreptdu.utils.oracleutils.PropertyHelpers.callForm(event, "exportdestination"); } catch (com.honeywell.coreptdu.exception.FormTriggerFailureException ex) {     throw ex; } catch (java.lang.Exception e) { }

Method: com.honeywell.coreptdu.pll.CoreptLib.initialization
  super.app = this.app
  super.global = this.global
  super.system = this.system
  super.baseInstance = this
  super.blocksOrder = this.blocksOrder
  super.displayAlert = this.displayAlert
  this.instance = Instance
  super.event = this.event
  super.groups = this.groups
  com.honeywell.coreptdu.utils.oracleutils.OracleHelpers.bulkClassMapper(this, refreshMasterLibrary)
  refreshMasterLibrary.initialization(Instance)

Method: com.honeywell.coreptdu.datatypes.corepttemplate.serviceimpl.CoreptTemplateTriggerServiceImpl.initialization
  super.groups = this.groups
  super.app = this.app
  super.genericNativeQueryHelper = this.genericNativeQueryHelper
  super.event = this.event
  super.system = this.system
  super.global = this.global
  super.windows = this.windows
  super.parameter = this.parameter
  super.blocksOrder = this.blocksOrder
  super.displayAlert = this.displayAlert
  coreptLib.initialization(childInstance)
  super.baseInstance = this
  this.instance = childInstance

Method: com.honeywell.coreptdu.datatypes.coreptmenummb.serviceimpl.CoreptMenuMmbServiceImpl.initialization
  super.groups = this.groups
  super.app = this.app
  super.genericNativeQueryHelper = this.genericNativeQueryHelper
  super.event = this.event
  super.system = this.system
  super.global = this.global
  super.windows = this.windows
  super.parameter = this.parameter
  super.blocksOrder = this.blocksOrder
  super.displayAlert = this.displayAlert
  coreptLib.initialization(childInstance)
  corepttemplatetriggerserviceimpl.initialization(childInstance)
  super.baseInstance = this
  this.instance = childInstance

Method: com.honeywell.coreptdu.pkg.spec.IRefreshMasterLibrary.initialization

Method: com.honeywell.coreptdu.datatypes.airport.serviceimpl.AirportTriggerServiceImpl.preInsert
  log.info(" preInsert Executing")
  java.lang.String query = ""
  com.honeywell.coreptdu.utils.oracleutils.Record rec = null
  try {     java.lang.String vValidateInd = null;     java.lang.Integer vDcrNumber = 0;     java.lang.Integer vProcessingCycle = 0;     java.lang.String vBlockName = com.honeywell.coreptdu.utils.oracleutils.GenericTemplateForm.toSnakeCase(system.getCursorBlock());     java.lang.Integer vAllowUpdate = 0;     // coreptLib.checkwildcardforkeys(vBlockName);     coreptLib.checkwildcardforkeys(vBlockName);     if (java.util.Arrays.asList("CHANGED", "INSERT").contains(system.getRecordStatus())) {         if (java.util.Objects.equals(parameter.getRecordType(), "T")) {             if (java.util.Objects.equals(nameIn(this, vBlockName + ".processing_cycle"), null)) {                 vAllowUpdate = coreptLib.checkValidSuppCust(toInteger(global.getProcessingCycle()), toInteger(global.getProcessingCycle()), toInteger(global.getDcrNumber()), global.getDataSupplier(), parameter.getRecordType(), toString(nameIn(this, vBlockName + ".customer_ident")));             } else {                 vAllowUpdate = coreptLib.checkValidSuppCust(toInteger(nameIn(this, vBlockName + ".processing_cycle")), toInteger(global.getProcessingCycle()), toInteger(global.getDcrNumber()), global.getDataSupplier(), parameter.getRecordType(), toString(nameIn(this, vBlockName + ".customer_ident")));             }         } else if (java.util.Objects.equals(nameIn(this, vBlockName + ".processing_cycle"), null)) {             vAllowUpdate = coreptLib.checkValidSuppCust(toInteger(global.getProcessingCycle()), toInteger(global.getProcessingCycle()), toInteger(global.getDcrNumber()), global.getDataSupplier(), parameter.getRecordType(), null);         } else {             vAllowUpdate = coreptLib.checkValidSuppCust(toInteger(nameIn(this, vBlockName + ".processing_cycle")), toInteger(global.getProcessingCycle()), toInteger(global.getDcrNumber()), global.getDataSupplier(), parameter.getRecordType(), null);         }     }     if (java.util.Objects.equals(vAllowUpdate, 1)) {         copy(global.getDataSupplier(), vBlockName + ".data_supplier");         copy(0, vBlockName + ".file_recno");         query = """         select dcr_number_seq.nextval from dual         """;         rec = app.selectInto(query);         vDcrNumber = rec.getInt();         copy(vDcrNumber, vBlockName + ".create_dcr_number");         doValidate(vBlockName, com.honeywell.coreptdu.global.forms.FormConstant.N);         vValidateInd = toString(nameIn(this, vBlockName + ".validate_ind"));         vProcessingCycle = toInteger(nvl(nameIn(this, vBlockName + ".processing_cycle"), global.getProcessingCycle()));         if ((java.util.Objects.equals(global.getLibRefreshed(), "Y") && java.util.Arrays.asList(global.getNewProcessingCycle(), global.getOldProcessingCycle()).contains(toString(vProcessingCycle))) && java.util.Arrays.asList("Y", "S", "H", "O").contains(vValidateInd)) {             refreshMasterLib.setRecordGroup(vDcrNumber, vValidateInd, vBlockName, vProcessingCycle, com.honeywell.coreptdu.global.forms.FormConstant.I);         }     } else if (java.util.Objects.equals(parameter.getRecordType(), "T")) {         coreptLib.dspActionMsg(com.honeywell.coreptdu.global.forms.FormConstant.I, parameter.getRecordType(), toInteger(nameIn(this, "global.dcr_number")), toInteger(nvl(nameIn(this, vBlockName + ".processing_cycle"), global.getProcessingCycle())), toString(nameIn(this, system.getCursorBlock() + ".CUSTOMER_IDENT")));     } else {         coreptLib.dspActionMsg(com.honeywell.coreptdu.global.forms.FormConstant.I, parameter.getRecordType(), toInteger(nameIn(this, "global.dcr_number")), toInteger(nvl(nameIn(this, vBlockName + ".processing_cycle"), global.getProcessingCycle())), null);     }     log.info(" preInsert executed successfully"); } catch (java.lang.Exception e) {     log.error("Error while Executing the preInsert Service");     throw e; }

Method: com.honeywell.coreptdu.datatypes.airport.serviceimpl.AirportTriggerServiceImpl.whenValidateRecordBL
  java.lang.String pBlock = system.getCursorBlock()
  if (com.honeywell.coreptdu.utils.oracleutils.OracleHelpers.sqlLike(pBlock, "PL_%") && java.util.Arrays.asList("CHANGED", "INSERT").contains(system.getRecordStatus())) {     if (!java.util.Arrays.asList("Y", "S", "H", "W", "N", "I", "O").contains(nvl(nameIn(this, pBlock + ".validate_ind"), "Y"))) {         coreptLib.dspMsg("Validate indicator can only 'Y','S','H','W','N' or 'I'");         throw new com.honeywell.coreptdu.exception.FormTriggerFailureException();     }     if (!java.util.Arrays.asList("A", "C", "M", "R", "T").contains(nvl(nameIn(this, pBlock + ".ctld_arsp_ind"), "A"))) {         coreptLib.dspMsg("Controlled Airspace Indicator can only 'A','C','M','R' or 'T'");         throw new com.honeywell.coreptdu.exception.FormTriggerFailureException();     }     if (java.util.Objects.equals(parameter.getRecordType(), "T")) {         coreptLib.validateextrafields(toInteger(nameIn(this, pBlock + ".processing_cycle")), toString(nameIn(this, pBlock + ".generated_in_house_flag")));     }     if ((!java.util.Objects.equals(nameIn(this, pBlock + ".processing_cycle"), null)) && java.util.Objects.equals(nameIn(this, pBlock + ".data_supplier"), null)) {         copy(global.getDataSupplier(), pBlock + ".data_supplier");     }     doValidate(pBlock, com.honeywell.coreptdu.global.forms.FormConstant.Y);     if ((!java.util.Objects.equals(parameter.getWorkType(), "VIEW")) && java.util.Objects.equals(parameter.getRecordType(), "T")) {         if (java.util.Objects.equals(nameIn(this, pBlock + ".generated_in_house_flag"), "N")) {             setItemProperty(pBlock + ".processing_cycle", com.honeywell.coreptdu.global.forms.FormConstant.UPDATE_ALLOWED, com.honeywell.coreptdu.global.forms.FormConstant.PROPERTY_FALSE);             setItemProperty(pBlock + ".generated_in_house_flag", com.honeywell.coreptdu.global.forms.FormConstant.UPDATE_ALLOWED, com.honeywell.coreptdu.global.forms.FormConstant.PROPERTY_FALSE);             setItemProperty(pBlock + ".validate_ind", com.honeywell.coreptdu.global.forms.FormConstant.UPDATE_ALLOWED, com.honeywell.coreptdu.global.forms.FormConstant.PROPERTY_TRUE);             if (!like("%MR", pBlock)) {                 setItemProperty(pBlock + ".processing_cycle", "current_record_attribute", "notUpdatable");                 setItemProperty(pBlock + ".generated_in_house_flag", "current_record_attribute", "notUpdatable");                 setItemProperty(pBlock + ".validate_ind", "current_record_attribute", "default");             }         } else {             setItemProperty(pBlock + ".processing_cycle", com.honeywell.coreptdu.global.forms.FormConstant.UPDATE_ALLOWED, com.honeywell.coreptdu.global.forms.FormConstant.PROPERTY_TRUE);             setItemProperty(pBlock + ".generated_in_house_flag", com.honeywell.coreptdu.global.forms.FormConstant.UPDATE_ALLOWED, com.honeywell.coreptdu.global.forms.FormConstant.PROPERTY_TRUE);             setItemProperty(pBlock + ".validate_ind", com.honeywell.coreptdu.global.forms.FormConstant.UPDATE_ALLOWED, com.honeywell.coreptdu.global.forms.FormConstant.PROPERTY_FALSE);             if (!like("%MR", pBlock)) {                 setItemProperty(pBlock + ".processing_cycle", "current_record_attribute", "default");                 setItemProperty(pBlock + ".generated_in_house_flag", "current_record_attribute", "default");                 setItemProperty(pBlock + ".validate_ind", "current_record_attribute", "notUpdatable");             }         }     } }

Method: com.honeywell.coreptdu.datatypes.airport.serviceimpl.AirportTriggerServiceImpl.preUpdate
  log.info(" preUpdate Executing")
  try {     java.lang.String vBlockName = system.getCursorBlock();     java.lang.Integer vDcrNumber = toInteger(nameIn(this, vBlockName + ".create_dcr_number"));     java.lang.Integer vProcessingCycle = toInteger(nameIn(this, vBlockName + ".processing_cycle"));     java.lang.String vTable = getBlockProperty(vBlockName, "Query_Data_Source_Name");     java.lang.String vValidateIndNew = null;     java.lang.String vValidateIndOld = null;     java.lang.String query = """      select refresh_ml_utilities.get_validate_ind(?,?) from dual     """;     com.honeywell.coreptdu.utils.oracleutils.Record rec = app.selectInto(query, vTable, vDcrNumber);     vValidateIndOld = rec.getString();     if (java.util.Arrays.asList("Y", "S", "H", "O").contains(vValidateIndOld)) {         refreshMasterLib.deleteFromRefTable(vDcrNumber, null);     }     doValidate(vBlockName, com.honeywell.coreptdu.global.forms.FormConstant.N);     vValidateIndNew = toString(nameIn(this, vBlockName + ".validate_ind"));     if (java.util.Arrays.asList("Y", "S", "H", "O").contains(vValidateIndOld) && java.util.Arrays.asList("W", "N", "I").contains(vValidateIndNew)) {         if (java.util.Objects.equals(refreshMasterLib.checkReferenceInfo(vBlockName, null), "N")) {             throw new com.honeywell.coreptdu.exception.FormTriggerFailureException();         }     }     if (java.util.Objects.equals(global.getLibRefreshed(), "Y") && java.util.Arrays.asList(global.getNewProcessingCycle(), global.getOldProcessingCycle()).contains(toString(vProcessingCycle))) {         if (java.util.Arrays.asList("Y", "S", "H", "O").contains(vValidateIndNew) || java.util.Arrays.asList("Y", "S", "H", "O").contains(vValidateIndOld)) {             refreshMasterLib.setRecordGroup(vDcrNumber, vValidateIndNew, vBlockName, vProcessingCycle, "U");         }     }     log.info(" preUpdate executed successfully"); } catch (java.lang.Exception e) {     log.error("Error while Executing the preUpdate Service");     throw e; }

Method: com.honeywell.coreptdu.datatypes.airport.serviceimpl.AirportTriggerServiceImpl.initializeForm
  log.info("initializeForm Executing")
  java.lang.String query = ""
  com.honeywell.coreptdu.utils.oracleutils.Record rec = null
  try {     java.lang.String fName = getApplicationProperty(com.honeywell.coreptdu.global.forms.FormConstant.CURRENT_FORM_NAME);     com.honeywell.coreptdu.global.forms.window wnid = findWindow(system.getCurrentForm(), "baseWindow");     java.lang.String vName = getWindowProperty(wnid, "title");     java.lang.String vBlock = getFormProperty(system.getCurrentForm(), "FIRST_NAVIGATION_BLOCK");     java.lang.String vErr = null;     defaultValue("J", "global.data_supplier");     defaultValue(com.honeywell.coreptdu.global.forms.FormConstant.I, "global.lib_refreshed");     defaultValue("99999", "global.dcr_number");     defaultValue("200406", "global.processing_cycle");     defaultValue(com.honeywell.coreptdu.global.forms.FormConstant.N, "global.from_error_summary");     defaultValue("200406", "global.recent_cycle");     defaultValue(com.honeywell.coreptdu.global.forms.FormConstant.MAXIMIZE, "global.status_window");     defaultValue(null, "global.customer_ident");     defaultValue(null, "global.allroles");     defaultValue("cpt", "global.user_name");     defaultValue("cpt", "global.password");     defaultValue("cpt", "global.connect_string");     defaultValue("airport", "global.data_type");     defaultValue("airport", "global.table_name");     defaultValue("ml", "global.schema_type");     defaultValue("blank", "global.last_query");     global.setUserName(app.getUserName());     // global.setPassword(app.getPassword());     global.setConnectString(global.getConnectString());     if (java.util.Objects.equals(nameIn(this, "global.status_window"), "MAXIMIZE")) {         setWindowProperty(com.honeywell.coreptdu.global.forms.FormConstant.BASEWINDOW, com.honeywell.coreptdu.global.forms.FormConstant.WINDOW_STATE, com.honeywell.coreptdu.global.forms.FormConstant.MAXIMIZE);     } else {         setWindowProperty(com.honeywell.coreptdu.global.forms.FormConstant.BASEWINDOW, com.honeywell.coreptdu.global.forms.FormConstant.WINDOW_STATE, com.honeywell.coreptdu.global.forms.FormConstant.NORMAL);     }     global.setAllroles("ALL");     vErr = coreptLib.setRole(global.getAllroles());     if (!java.util.Objects.equals(vErr, "PASSED")) {         displayAlert.oneButton("S", "Fatal Error", "The roles cannot be activated.  Contact the COREPT Administrator.");         exitForm();     } else {         if (java.util.Objects.equals(global.getProcessingCycle(), null)) {             try {                 query = """                 select max(processing_cycle)                     from pl_std_airport                 """;                 rec = app.selectInto(query);                 global.setProcessingCycle(rec.getString());             } catch (com.honeywell.coreptdu.exception.NoDataFoundException e) {                 global.setProcessingCycle(null);             }         }         global.setUserName(app.getUserName());         // global.setPassword(app.getPassword());         global.setConnectString(global.getConnectString());         if (java.util.Arrays.asList("PL_", "STD", "TLD").contains(substr(vBlock, 1, 3))) {             if (java.util.Objects.equals(parameter.getRecordType(), "S")) {                 vName = com.honeywell.coreptdu.global.forms.FormConstant.STD + vName;             } else if (java.util.Objects.equals(parameter.getRecordType(), "T")) {                 vName = com.honeywell.coreptdu.global.forms.FormConstant.TLD + vName;             }             if (java.util.Objects.equals(parameter.getLibraryAccess(), "PRE-LIBRARY")) {                 vName = com.honeywell.coreptdu.global.forms.FormConstant.PL + vName;             } else {                 vName = com.honeywell.coreptdu.global.forms.FormConstant.ML + vName;             }         }         setWindowProperty("baseWindow", com.honeywell.coreptdu.global.forms.FormConstant.TITLE, vName);         if (java.util.Objects.equals(parameter.getLibraryAccess(), "PRE-LIBRARY")) {             setItemProperty("display_item_block.processing_cycle", com.honeywell.coreptdu.global.forms.FormConstant.DISPLAYED, com.honeywell.coreptdu.global.forms.FormConstant.PROPERTY_TRUE);             setItemProperty("display_item_block.processing_cycle", com.honeywell.coreptdu.global.forms.FormConstant.WIDTH, "60");             displayItemBlock.setProcessingCycle(global.getProcessingCycle());         } else if (!java.util.Objects.equals(global.getNewProcessingCycle(), "111111")) {             setItemProperty("display_item_block.processing_cycle", com.honeywell.coreptdu.global.forms.FormConstant.DISPLAYED, com.honeywell.coreptdu.global.forms.FormConstant.PROPERTY_TRUE);             setItemProperty("display_item_block.processing_cycle", com.honeywell.coreptdu.global.forms.FormConstant.WIDTH, "80");             displayItemBlock.setProcessingCycle((global.getOldProcessingCycle() + " - ") + global.getNewProcessingCycle());         }         coreptTemplateTriggerService.populateItems(fName);         coreptLib.unsetQueryMenuItems();         com.honeywell.coreptdu.utils.oracleutils.RecordGroup groupId = null;         if (java.util.Objects.equals(global.getLibRefreshed(), "Y") && (!java.util.Objects.equals(parameter.getWorkType(), "VIEW"))) {             groupId = createGroup("refreshRecordsGroup");             addGroupColumn(groupId, "dcrNumber", "numberColumn");             addGroupColumn(groupId, "tableName", "charColumn", 30);             addGroupColumn(groupId, "validaInd", "charColumn", 1);             addGroupColumn(groupId, "procCycle", "numberColumn");             groups.put("refreshRecordsGroup", groupId);         }     }     log.info("initializeForm Executed Successfully"); } catch (java.lang.Exception e) {     log.error("Error while executing initializeForm" + e.getMessage());     throw e; }

Method: com.honeywell.coreptdu.utils.oracleutils.GenericTemplateForm.hideView
  argViewName = com.honeywell.coreptdu.utils.oracleutils.HoneyWellUtils.toCamelCase(argViewName)
  com.honeywell.coreptdu.utils.oracleutils.PropertyHelpers.hideView(event, argViewName)

Method: com.honeywell.coreptdu.pll.CoreptLib.setBlock
  java.lang.String vFirstBlock = null
  java.lang.String vLastBlock = null
  java.lang.String vBlock = null
  java.lang.String vLib = null
  java.lang.String vTable = null
  java.lang.String vRectype = null
  java.lang.String vGoBlock = null
  // String formName = system.getCurrentForm(); // List<OrderDto> blocks = getFormBlocks(system.getCurrentForm()); java.util.List<java.lang.String> blocks = ((java.util.List<java.lang.String>) (nameIn(baseInstance, "blocksOrder")))
  copy(null, "global.new_dcr_no")
  vFirstBlock = getFormProperty(getApplicationProperty(com.honeywell.coreptdu.global.forms.FormConstant.CURRENT_FORM_NAME), "FIRST_BLOCK")
  vBlock = vFirstBlock
  vLastBlock = getFormProperty(getApplicationProperty(com.honeywell.coreptdu.global.forms.FormConstant.CURRENT_FORM_NAME), "LAST_BLOCK")
  for (java.lang.String block : blocks) {     vBlock = block;     vTable = upper(toChar(nameIn(instance, (vBlock + ".") + "query_Data_Source_Name")));     if (vTable != null) {         vLib = substr(vTable, 1, 2);         if ("PL".equals(vLib)) {             vRectype = substr(vTable, 4, 1);         } else {             vRectype = substr(vTable, 1, 1);         }         if ((("PL".equals(vLib) && "PRE-LIBRARY".equals(nameIn(instance, "parameter.library_access"))) || ((!"PL".equals(vLib)) && "MASTER".equals(nameIn(instance, "parameter.library_access")))) && (vRectype.equals(nameIn(instance, "parameter.record_type")) || "A".equals(nameIn(instance, "parameter.record_type")))) {             if (vGoBlock == null) {                 vGoBlock = vBlock;             }         }         if ("VIEW".equals(nameIn(instance, "parameter.work_type"))) {             setBlockProperty(com.honeywell.coreptdu.utils.oracleutils.HoneyWellUtils.toCamelCase(vBlock), com.honeywell.coreptdu.global.forms.FormConstant.INSERT_ALLOWED, com.honeywell.coreptdu.global.forms.FormConstant.PROPERTY_FALSE);             setBlockProperty(com.honeywell.coreptdu.utils.oracleutils.HoneyWellUtils.toCamelCase(vBlock), com.honeywell.coreptdu.global.forms.FormConstant.UPDATE_ALLOWED, com.honeywell.coreptdu.global.forms.FormConstant.PROPERTY_FALSE);             setBlockProperty(com.honeywell.coreptdu.utils.oracleutils.HoneyWellUtils.toCamelCase(vBlock), com.honeywell.coreptdu.global.forms.FormConstant.DELETE_ALLOWED, com.honeywell.coreptdu.global.forms.FormConstant.PROPERTY_FALSE);         }     }     if (vBlock.equals(vLastBlock)) {         break;     } else {         vBlock = block;     } }
  if ("PRE-LIBRARY".equals(nameIn(instance, "parameter.library_access"))) {     setItemProperty("display_item_block.allow_both_cycles", com.honeywell.coreptdu.global.forms.FormConstant.VISIBLE, com.honeywell.coreptdu.global.forms.FormConstant.PROPERTY_TRUE);     setItemProperty("display_item_block.allow_both_cycles", com.honeywell.coreptdu.global.forms.FormConstant.ENABLED, com.honeywell.coreptdu.global.forms.FormConstant.PROPERTY_TRUE);     copy(instance, "N", "display_item_block.allow_both_cycles"); }
  if (vGoBlock == null) {     vGoBlock = vFirstBlock; }
  // log.info(vGoBlock); goBlock(vGoBlock, "")
  // below line added for call forms from another forms. setcurrentAndCursorBlock(vGoBlock)

Method: com.honeywell.coreptdu.pll.CoreptLib.iffromerrorsummary
  // BaseResponse<IffromerrorsummaryResponseDto> responseObj = new // BaseResponse<>(); java.lang.String query = ""
  com.honeywell.coreptdu.utils.oracleutils.Record rec = null
  java.lang.String vBlock = ""
  java.lang.String vWhere = ""
  try {     defaultValue("~~", "global.count_records");     defaultValue("~~", "global.apt_heli");     if (java.util.Objects.equals(nameIn(this, "global.from_error_summary"), "Y")) {         if (!java.util.Objects.equals(nameIn(this, "global.count_records"), "Y")) {             vBlock = com.honeywell.coreptdu.utils.oracleutils.OracleHelpers.toString(nameIn(this, "system.current_block"));             vWhere = ("data_supplier = '" + nameIn(this, "global.data_supplier")) + "' ";             if (((!java.util.Objects.equals(nameIn(this, "global.customer_ident"), null)) && java.util.Objects.equals(nameIn(this, "global.prod_ready_error"), "Y")) && java.util.Objects.equals(nameIn(this, "global.gen_in_house_error"), "N")) {                 vWhere = (((((vWhere + " and generated_in_house_flag = 'N' and customer_ident IN (") + nameIn(this, "global.customer_ident")) + ")") + " and processing_cycle = ") + nameIn(this, "global.processing_cycle")) + " and validate_ind in ('I','Y')";             } else if ((!java.util.Objects.equals(nameIn(this, "global.customer_ident"), null)) && java.util.Objects.equals(nameIn(this, "global.prod_ready_error"), "Y")) {                 vWhere = (((((vWhere + " and customer_ident IN (") + nameIn(this, "global.customer_ident")) + ")") + " and processing_cycle = ") + nameIn(this, "global.processing_cycle")) + " and validate_ind in ('I','Y')";             } else if ((!java.util.Objects.equals(nameIn(this, "global.customer_ident"), null)) && java.util.Objects.equals(nameIn(this, "global.gen_in_house_error"), "N")) {                 vWhere = (((((vWhere + " and generated_in_house_flag = 'N' and customer_ident IN (") + nameIn(this, "global.customer_ident")) + ")") + " and processing_cycle = ") + nameIn(this, "global.processing_cycle")) + " and validate_ind in ('I','Y')";             } else if ((!java.util.Objects.equals(nameIn(this, "global.customer_ident"), null)) && java.util.Objects.equals(nameIn(this, "global.gen_in_house_error"), "Y")) {                 vWhere = (((((vWhere + " and generated_in_house_flag = 'Y' and customer_ident IN (") + nameIn(this, "global.customer_ident")) + ")") + " and processing_cycle = ") + nameIn(this, "global.processing_cycle")) + " and validate_ind in ('I','Y')";             } else if (!java.util.Objects.equals(nameIn(this, "global.customer_ident"), null)) {                 vWhere = (((((vWhere + " and customer_ident = '") + nameIn(this, "global.customer_ident")) + "' ") + " and processing_cycle = ") + nameIn(this, "global.error_cycle")) + " and validate_ind in ('I','Y')";                 copy("Y", "display_item_block.allow_both_cycles");             } else {                 vWhere = ((vWhere + " and processing_cycle = ") + nameIn(this, "global.processing_cycle")) + " and validate_ind in ('I','Y')";             }             if (!java.util.Objects.equals(nvl(getApplicationProperty("calling_form"), "$"), "SHOW_ERRORS")) {                 if (java.util.Objects.equals(nameIn(this, "global.gen_in_house"), "Y")) {                     vWhere = vWhere + " and generated_in_house_flag = 'Y'";                 } else if (java.util.Objects.equals(nameIn(this, "global.gen_in_house"), "N")) {                     vWhere = vWhere + " and generated_in_house_flag = 'N'";                 }             }             setBlockProperty(vBlock, "default_where", vWhere);             global.setCallFormWhere(hashUtils.encrypt(vWhere));             copy("", "global.customer_ident");             copy("", "global.gen_in_house");             coreptexecutequery(this);             setBlockProperty(vBlock, "default_where", "");             copy("N", "global.from_error_summary");             copy("", "global.prod_ready_error");             copy("", "global.gen_in_house_error");         } else {             vBlock = com.honeywell.coreptdu.utils.oracleutils.OracleHelpers.toString(nameIn(this, "system.current_block"));             vWhere = ("data_supplier = '" + nameIn(this, "global.data_supplier")) + "'";             if (java.util.Objects.equals(vBlock, "PL_COMPANY_ROUTE")) {                 vWhere = (((((((((((((((vWhere + " and DECODE( FROM_FIX_IDENT,'") + nameIn(this, "global.airport_ident")) + "',from_Fix_Ident, to_Fix_Ident)= '") + nameIn(this, "global.airport_ident")) + "'") + " and decode( from_Fix_Icao_Code,'") + nameIn(this, "global.airport_icao")) + "',from_Fix_Icao_Code, to_Fix_Icao_Code)= '") + nameIn(this, "global.airport_icao")) + "'") + " and customer_Ident = '") + nameIn(this, "global.navdb_ident")) + "' ") + " and processing_cycle = '") + nameIn(this, "global.error_cycle")) + "' ";             } else if (java.util.Objects.equals(vBlock, "PL_TLD_ALTERNATE_DEST")) {                 vWhere = ((((((((((vWhere + " and airport_fix_ident = '") + nameIn(this, "global.airport_ident")) + "' ") + " and customerIdent = '") + nameIn(this, "global.navdb_ident")) + "' ") + " and processing_cycle = ") + nameIn(this, "global.error_cycle")) + " and icaoCode = '") + nameIn(this, "global.airport_icao")) + "'";             } else if (java.util.Objects.equals(nameIn(this, "global.apt_heli"), "AIRPORT")) {                 vWhere = ((((((((((vWhere + " and airport_ident = '") + nameIn(this, "global.airport_ident")) + "' ") + " and customer_Ident = '") + nameIn(this, "global.navdb_ident")) + "' ") + " and processing_cycle = ") + nameIn(this, "global.error_cycle")) + " and airport_Icao = '") + nameIn(this, "global.airport_icao")) + "'";             } else {                 vWhere = ((((((((((vWhere + " and heliport_ident = '") + nameIn(this, "global.heliport_ident")) + "' ") + " and customerIdent = '") + nameIn(this, "global.navdb_ident")) + "' ") + " and processing_cycle = ") + nameIn(this, "global.error_cycle")) + " and heliportIcao = '") + nameIn(this, "global.heliport_icao")) + "'";             }             if (!java.util.Objects.equals(nvl(getApplicationProperty("calling_Form"), "$"), "SHOW_ERRORS")) {                 if (java.util.Objects.equals(nameIn(this, "global.gen_in_house"), "Y")) {                     vWhere = vWhere + " and generated_in_house_flag = 'Y'";                 } else if (java.util.Objects.equals(nameIn(this, "global.gen_in_house"), "N")) {                     vWhere = vWhere + " and generated_in_house_flag = 'N'";                 }             }             setBlockProperty(vBlock, "default_where", vWhere);             global.setCallFormWhere(hashUtils.encrypt(vWhere));             copy("", "global.navdb_ident");             copy("", "global.airport_ident");             copy("", "global.airport_icao");             copy("", "global.heliport_ident");             copy("", "global.heliport_icao");             executeQuery(instance, vBlock, vWhere, null, null);             // coreptexecutequery(this);             setBlockProperty(vBlock, "default_where", "");             copy("N", "global.from_error_summary");             copy("", "global.count_records");             copy("", "global.gen_in_house");         }     }     log.info("Data Retreived Successfully"); } catch (java.lang.Exception e) {     log.error("Error while receiving data" + e.getMessage());     throw e; }

Method: com.honeywell.coreptdu.utils.oracleutils.GenericTemplateForm.deleteGroup
  com.honeywell.coreptdu.utils.oracleutils.GroupUtils.deleteGroup(groups, name)

Method: com.honeywell.coreptdu.datatypes.airport.serviceimpl.AirportTriggerServiceImpl.whenNewRecordInstance
  log.info(" whenNewRecordInstance Executing")
  com.honeywell.coreptdu.global.dto.BaseResponse<com.honeywell.coreptdu.datatypes.airport.dto.response.AirportTriggerResponseDto> responseObj = new com.honeywell.coreptdu.global.dto.BaseResponse<>()
  com.honeywell.coreptdu.datatypes.airport.dto.response.AirportTriggerResponseDto resDto = new com.honeywell.coreptdu.datatypes.airport.dto.response.AirportTriggerResponseDto()
  try {     com.honeywell.coreptdu.utils.oracleutils.OracleHelpers.bulkClassMapper(reqDto, this);     java.lang.String pBlock = system.getCursorBlock();     java.lang.Integer vAllowUpdate = 0;     if (com.honeywell.coreptdu.utils.oracleutils.OracleHelpers.sqlLike(pBlock, "PL%")) {         // if(OracleHelpers.sqlLike(pBlock, "PL_STD%") && plStdAirportMr.getRow(system.getCursorRecordIndex()).getOldData() != null && genericNativeQueryHelper.isRecordUpdated(PlStdAirportMr.class, plStdAirportMr.getRow(system.getCursorRecordIndex()), plStdAirportMr.getRow(system.getCursorRecordIndex()).getRowid())) {         // coreptLib.dspMsg("Record has been updated by another user.\n Please Re-query to see change");         // throw new RecordModifiedException("Please Refresh");         // }         if (((java.util.Objects.equals(system.getMode(), "NORMAL") && (!java.util.Objects.equals(nvl(nameIn(this, pBlock + ".validate_ind"), "N"), "Y"))) && (!java.util.Objects.equals(nameIn(this, pBlock + ".processing_cycle"), null))) && (!java.util.Objects.equals(toString(nameIn(this, pBlock + ".record_Status")), "DELETED"))) {             doValidate(pBlock, com.honeywell.coreptdu.global.forms.FormConstant.Y);         } else {             coreptLib.setinitialerrordisplay(pBlock);         }         if ((!java.util.Objects.equals(parameter.getWorkType(), "VIEW")) && java.util.Objects.equals(parameter.getRecordType(), "T")) {             if (java.util.Objects.equals(nameIn(this, pBlock + ".generated_in_house_flag"), "N")) {                 setItemProperty(pBlock + ".processing_cycle", com.honeywell.coreptdu.global.forms.FormConstant.UPDATE_ALLOWED, com.honeywell.coreptdu.global.forms.FormConstant.PROPERTY_FALSE);                 setItemProperty(pBlock + ".generated_in_house_flag", com.honeywell.coreptdu.global.forms.FormConstant.UPDATE_ALLOWED, com.honeywell.coreptdu.global.forms.FormConstant.PROPERTY_FALSE);                 setItemProperty(pBlock + ".validate_ind", com.honeywell.coreptdu.global.forms.FormConstant.UPDATE_ALLOWED, com.honeywell.coreptdu.global.forms.FormConstant.PROPERTY_TRUE);                 if (!like("%MR", pBlock)) {                     setItemProperty(pBlock + ".processing_cycle", "current_record_attribute", "notUpdatable");                     setItemProperty(pBlock + ".generated_in_house_flag", "current_record_attribute", "notUpdatable");                     setItemProperty(pBlock + ".validate_ind", "current_record_attribute", "default");                 }             } else {                 setItemProperty(pBlock + ".generated_in_house_flag", com.honeywell.coreptdu.global.forms.FormConstant.UPDATE_ALLOWED, com.honeywell.coreptdu.global.forms.FormConstant.PROPERTY_TRUE);                 setItemProperty(pBlock + ".validate_ind", com.honeywell.coreptdu.global.forms.FormConstant.UPDATE_ALLOWED, com.honeywell.coreptdu.global.forms.FormConstant.PROPERTY_FALSE);                 if (!like("%MR", pBlock)) {                     setItemProperty(pBlock + ".generated_in_house_flag", "current_record_attribute", "default");                     setItemProperty(pBlock + ".validate_ind", "current_record_attribute", "notUpdatable");                 }                 if (java.util.Objects.equals(global.getLibRefreshed(), "Y") && java.util.Objects.equals(nameIn(this, pBlock + ".generated_in_house_flag"), "Y")) {                     setItemProperty(pBlock + ".processing_cycle", com.honeywell.coreptdu.global.forms.FormConstant.UPDATE_ALLOWED, com.honeywell.coreptdu.global.forms.FormConstant.PROPERTY_FALSE);                     if (!like("%MR", pBlock)) {                         setItemProperty(pBlock + ".processing_cycle", "current_record_attribute", "notUpdatable");                     }                 } else {                     setItemProperty(pBlock + ".processing_cycle", com.honeywell.coreptdu.global.forms.FormConstant.UPDATE_ALLOWED, com.honeywell.coreptdu.global.forms.FormConstant.PROPERTY_TRUE);                     if (!like("%MR", pBlock)) {                         setItemProperty(pBlock + ".processing_cycle", "current_record_attribute", "default");                     }                 }             }         }         if (java.util.Objects.equals(parameter.getRecordType(), "T")) {             if (java.util.Objects.equals(nameIn(this, pBlock + ".processing_cycle"), null)) {                 vAllowUpdate = coreptLib.checkValidSuppCust(toInteger(global.getProcessingCycle()), toInteger(global.getProcessingCycle()), toInteger(global.getDcrNumber()), global.getDataSupplier(), parameter.getRecordType(), toString(nameIn(this, pBlock + ".customer_ident")));             } else {                 vAllowUpdate = coreptLib.checkValidSuppCust(toInteger(nameIn(this, pBlock + ".processing_cycle")), toInteger(global.getProcessingCycle()), toInteger(global.getDcrNumber()), global.getDataSupplier(), parameter.getRecordType(), toString(nameIn(this, pBlock + ".customer_ident")));             }         } else if (java.util.Objects.equals(nameIn(this, pBlock + ".processing_cycle"), null)) {             vAllowUpdate = coreptLib.checkValidSuppCust(toInteger(global.getProcessingCycle()), toInteger(global.getProcessingCycle()), toInteger(global.getDcrNumber()), global.getDataSupplier(), parameter.getRecordType(), null);         } else {             vAllowUpdate = coreptLib.checkValidSuppCust(toInteger(nameIn(this, pBlock + ".processing_cycle")), toInteger(global.getProcessingCycle()), toInteger(global.getDcrNumber()), global.getDataSupplier(), parameter.getRecordType(), null);         }         if (java.util.Objects.equals(vAllowUpdate, 1)) {             parameter.setUpdRec(com.honeywell.coreptdu.global.forms.FormConstant.N);             setBlockProperty(pBlock, com.honeywell.coreptdu.global.forms.FormConstant.UPDATE_ALLOWED, com.honeywell.coreptdu.global.forms.FormConstant.PROPERTY_TRUE);         } else {             parameter.setUpdRec(com.honeywell.coreptdu.global.forms.FormConstant.Y);             setBlockProperty(pBlock, com.honeywell.coreptdu.global.forms.FormConstant.UPDATE_ALLOWED, com.honeywell.coreptdu.global.forms.FormConstant.PROPERTY_FALSE);             if (!java.util.Objects.equals(nameIn(this, pBlock + ".processing_cycle"), global.getProcessingCycle())) {                 throw new com.honeywell.coreptdu.exception.FormTriggerFailureException();             }         }     }     com.honeywell.coreptdu.utils.oracleutils.OracleHelpers.ResponseMapper(this, resDto);     log.info(" whenNewRecordInstance executed successfully");     return responseObj.render(responseObj.formSuccessResponse(com.honeywell.coreptdu.utils.common.Constants.RECORD_FETCH, resDto)); } catch (java.lang.Exception e) {     log.error("Error while Executing the whenNewRecordInstance Service");     com.honeywell.coreptdu.utils.oracleutils.OracleHelpers.ResponseMapper(this, resDto);     return com.honeywell.coreptdu.exception.ExceptionUtils.handleException(e, resDto); }

Method: com.honeywell.coreptdu.pll.CoreptLib.validateextrafields
  java.lang.String query = ""
  com.honeywell.coreptdu.utils.oracleutils.Record rec = null
  java.lang.Integer vExist = 0
  java.lang.String vErr = null
  if (!java.util.Objects.equals(rtrim(toString(pCycle)), null)) {     query = """     select count(*) from cycle     where cycle = ?     """;     rec = app.selectInto(query, pCycle);     vExist = rec.getInt();     if (java.util.Objects.equals(vExist, 0)) {         vErr = "Invalid Processing Cycle. ";     } }
  if (!java.util.Objects.equals(rtrim(pInHouse), null)) {     if (!java.util.Arrays.asList("N", "Y").contains(pInHouse)) {         vErr = nvl(vErr, "") + " - Invalid Generated in house flag, not 'N' nor 'Y'.";     } }
  if (!java.util.Objects.equals(vErr, null)) {     dspMsg(vErr);     throw new com.honeywell.coreptdu.exception.FormTriggerFailureException(); }


=== API Methods ===

API: InnerAirportTriggerServiceImpl(com.honeywell.coreptdu.global.dbtype.PlStdAirportType,com.honeywell.coreptdu.global.dbtype.PlTldAirportType)

API: checkToCommit(java.lang.String)
  log.info("checkToCommit Executing")
  try {     java.lang.Integer vButton = 0;     java.lang.Integer totalRows = 0;     java.lang.String vButtonText = null;     java.lang.Integer msgnum = 0;     if (java.util.Objects.equals(system.getFormStatus(), "CHANGED")) {         if (java.util.Objects.equals(pActionType, "COMMIT")) {             vButtonText = com.honeywell.coreptdu.global.forms.FormConstant.CANCEL;         } else if (java.util.Objects.equals(pActionType, "EXIT")) {             vButtonText = com.honeywell.coreptdu.global.forms.FormConstant.EXIT_WITHOUT_SAVE;         } else {             vButtonText = com.honeywell.coreptdu.global.forms.FormConstant.CANCEL_MODIFICATION;         }         if (java.util.Objects.equals(global.getLibRefreshed(), "Y")) {             alertDetails.getCurrent();             if (alertDetails.getAlerts().size() < alertDetails.getCurrentAlert()) {                 vButton = displayAlert.moreButtons("C", "Refresh Record", (("You have modified record(s). Select an option: \n" + " \n") + "1. Save and refresh Master Library\n") + "2. Cancel modification, NO Save, NO Refresh", "Save&Refresh", vButtonText, "");                 com.honeywell.coreptdu.utils.oracleutils.OracleHelpers.ResponseMapper(displayAlert, this);                 alertDetails.createNewRecord("checkToCommit1");                 throw new com.honeywell.coreptdu.exception.AlertException(event, alertDetails);             } else {                 vButton = alertDetails.getAlertValue("checkToCommit1", alertDetails.getCurrentAlert());             }             if (java.util.Arrays.asList(1).contains(vButton)) {                 java.lang.Integer ind = system.getCursorRecordIndex();                 validateBeforeCommit();                 system.setCursorRecordIndex(ind);                 commitForm(this);                 sendUpdatedRowIdDetails();                 system.setFormStatus(com.honeywell.coreptdu.global.forms.FormConstant.QUERIED);                 parameter.setUpdRec(com.honeywell.coreptdu.global.forms.FormConstant.N);                 setBlockProperty(nameIn(this, "system.Cursor_Block", java.lang.String.class), com.honeywell.coreptdu.global.forms.FormConstant.UPDATE_ALLOWED, com.honeywell.coreptdu.global.forms.FormConstant.PROPERTY_TRUE);                 message("Record has been saved successfully");                 system.setFormStatus(com.honeywell.coreptdu.global.forms.FormConstant.NORMAL);                 totalRows = getGroupRowCount(findGroup("refreshRecordsGroup"));                 if (totalRows > 0) {                     refreshMasterLib.refreshRecords(totalRows);                 }                 if (java.util.Objects.equals(msgnum, 40400)) {                     clearMessage();                 }             }         } else {             if (java.util.Objects.equals(pActionType, "COMMIT")) {                 vButton = 1;             } else {                 alertDetails.getCurrent();                 if (alertDetails.getAlerts().size() < alertDetails.getCurrentAlert()) {                     vButton = displayAlert.moreButtons("C", "Refresh Record", "Record is modified or inserted or deleted. Select an option: \n", "Save", vButtonText, null);                     com.honeywell.coreptdu.utils.oracleutils.OracleHelpers.ResponseMapper(displayAlert, this);                     alertDetails.createNewRecord("checkToCommit1");                     throw new com.honeywell.coreptdu.exception.AlertException(event, alertDetails);                 } else {                     vButton = alertDetails.getAlertValue("checkToCommit1", alertDetails.getCurrentAlert());                 }             }             if (java.util.Objects.equals(vButton, 1)) {                 java.lang.Integer ind = system.getCursorRecordIndex();                 validateBeforeCommit();                 system.setCursorRecordIndex(ind);                 commitForm(this);                 system.setFormStatus(com.honeywell.coreptdu.global.forms.FormConstant.QUERIED);                 parameter.setUpdRec(com.honeywell.coreptdu.global.forms.FormConstant.N);                 setBlockProperty(nameIn(this, "system.Cursor_Block", java.lang.String.class), com.honeywell.coreptdu.global.forms.FormConstant.UPDATE_ALLOWED, com.honeywell.coreptdu.global.forms.FormConstant.PROPERTY_TRUE);                 message("Record has been saved successfully");                 system.setFormStatus(com.honeywell.coreptdu.global.forms.FormConstant.NORMAL);                 if (java.util.Objects.equals(msgnum, 40400)) {                     clearMessage();                 }             } else {                 exitForm();             }         }         if ((java.util.Objects.equals(global.getLibRefreshed(), "Y") && java.util.Objects.equals(vButton, 2)) || ((!java.util.Objects.equals(global.getLibRefreshed(), "Y")) && java.util.Objects.equals(vButton, 1))) {             // Changes by code review team.S             if (java.util.Objects.equals(pActionType, "COMMIT"));else if (java.util.Objects.equals(pActionType, "EXIT")) {                 exitForm();             } else {                 system.setFormStatus("NORMAL");             }         } else if (java.util.Objects.equals(system.getFormStatus(), "CHANGED")) {             throw new com.honeywell.coreptdu.exception.FormTriggerFailureException();         } else if (java.util.Objects.equals(pActionType, "EXIT")) {             setApplicationProperty("cursorStyle", "default");             exitForm();         }     } else {         refreshMasterLib.ifRefresh();         if (pActionType.equals("EXIT")) {             exitForm();         }     }     log.info("checkToCommit Executed Successfully"); } catch (java.lang.Exception e) {     log.error("Error while executing checkToCommit" + e.getMessage());     throw e; }

API: commit(com.honeywell.coreptdu.datatypes.airport.dto.request.AirportTriggerRequestDto)
  log.info(" commit Executing")
  com.honeywell.coreptdu.global.dto.BaseResponse<com.honeywell.coreptdu.datatypes.airport.dto.response.AirportTriggerResponseDto> responseObj = new com.honeywell.coreptdu.global.dto.BaseResponse<>()
  com.honeywell.coreptdu.datatypes.airport.dto.response.AirportTriggerResponseDto resDto = new com.honeywell.coreptdu.datatypes.airport.dto.response.AirportTriggerResponseDto()
  try {     com.honeywell.coreptdu.utils.oracleutils.OracleHelpers.bulkClassMapper(reqDto, this);     validateBeforeCommit();     commitForm(this);     com.honeywell.coreptdu.utils.oracleutils.OracleHelpers.ResponseMapper(this, resDto);     log.info(" commit executed successfully");     return responseObj.render(responseObj.formSuccessResponse(com.honeywell.coreptdu.utils.common.Constants.RECORD_FETCH, resDto)); } catch (java.lang.Exception e) {     log.error("Error while Executing the commit Service");     com.honeywell.coreptdu.utils.oracleutils.OracleHelpers.ResponseMapper(this, resDto);     return com.honeywell.coreptdu.exception.ExceptionUtils.handleException(e, resDto); }

API: controlBlockChkUnchkAllWhenCheckboxChanged(com.honeywell.coreptdu.datatypes.airport.dto.request.AirportTriggerRequestDto)
  log.info(" controlBlockChkUnchkAllWhenCheckboxChanged Executing")
  com.honeywell.coreptdu.global.dto.BaseResponse<com.honeywell.coreptdu.datatypes.airport.dto.response.AirportTriggerResponseDto> responseObj = new com.honeywell.coreptdu.global.dto.BaseResponse<>()
  com.honeywell.coreptdu.datatypes.airport.dto.response.AirportTriggerResponseDto resDto = new com.honeywell.coreptdu.datatypes.airport.dto.response.AirportTriggerResponseDto()
  try {     com.honeywell.coreptdu.utils.oracleutils.OracleHelpers.bulkClassMapper(reqDto, this);     com.honeywell.coreptdu.utils.oracleutils.RecordGroup groupId = findGroup("newDcr");     java.lang.Integer lnRow = getGroupRowCount(groupId);     java.lang.Integer colVal = 0;     if (java.util.Objects.equals(controlBlock.getChkUnchkAll(), "Y")) {         if (!java.util.Objects.equals(findGroup("newDcr"), null)) {             deleteGroupRow("newDcr", "ALL_ROWS");         }         for (int i = 1; i <= lnRow; i++) {             deleteDcrNo();         }         lnRow = getGroupRowCount(groupId);         goBlock("plTldAirportMr", "");         system.setCursorRecordIndex(0);         while (true) {             plTldAirportMr.getRow(system.getCursorRecordIndex()).setChk(com.honeywell.coreptdu.global.forms.FormConstant.Y);             parameter.setMultiRecDel(parameter.getMultiRecDel() + 1);             addGroupRow(groupId, "end_of_group");             lnRow = lnRow + 1;             global.setNewDcrNo(rtrim(ltrim((global.getNewDcrNo() + ",") + toInteger(plTldAirportMr.getRow(system.getCursorRecordIndex()).getCreateDcrNumber()), ","), ", "));             if (!java.util.Objects.equals(plTldAirportMr.getRow(system.getCursorRecordIndex()).getCustomerIdent(), null)) {                 nextRecord("");                 system.setCursorRecordIndex(system.getCursorRecordIndex() + 1);             } else {                 clearRecord("");                 plTldAirportMr.getRow(system.getCursorRecordIndex()).setChk(com.honeywell.coreptdu.global.forms.FormConstant.Y);                 break;             }         }          system.setCursorRecordIndex(0);     } else {         parameter.setMultiRecDel(0);         lnRow = getGroupRowCount(groupId) - 1;         goBlock("plTldAirportMr", "");         while (true) {             if (java.util.Objects.equals(plTldAirportMr.getRow(system.getCursorRecordIndex()).getChk(), "Y")) {                 plTldAirportMr.getRow(system.getCursorRecordIndex()).setChk("N");                 for (int i = 1; i <= lnRow; i++) {                     if (java.util.Objects.equals(colVal, toInteger(plTldAirportMr.getRow(system.getCursorRecordIndex()).getCreateDcrNumber()))) {                         break;                     }                 }             }             deleteDcrNo();             break;         }      }     com.honeywell.coreptdu.utils.oracleutils.OracleHelpers.ResponseMapper(this, resDto);     log.info(" controlBlockChkUnchkAllWhenCheckboxChanged executed successfully");     return responseObj.render(responseObj.formSuccessResponse(com.honeywell.coreptdu.utils.common.Constants.RECORD_FETCH, resDto)); } catch (java.lang.Exception e) {     log.error("Error while Executing the controlBlockChkUnchkAllWhenCheckboxChanged Service");     com.honeywell.coreptdu.utils.oracleutils.OracleHelpers.ResponseMapper(this, resDto);     return com.honeywell.coreptdu.exception.ExceptionUtils.handleException(e, resDto); }

API: controlBlockPlotWhenButtonPressed(com.honeywell.coreptdu.datatypes.airport.dto.request.AirportTriggerRequestDto)
  log.info(" controlBlockPlotWhenButtonPressed Executing")
  com.honeywell.coreptdu.global.dto.BaseResponse<com.honeywell.coreptdu.datatypes.airport.dto.response.AirportTriggerResponseDto> responseObj = new com.honeywell.coreptdu.global.dto.BaseResponse<>()
  com.honeywell.coreptdu.datatypes.airport.dto.response.AirportTriggerResponseDto resDto = new com.honeywell.coreptdu.datatypes.airport.dto.response.AirportTriggerResponseDto()
  try {     com.honeywell.coreptdu.utils.oracleutils.OracleHelpers.bulkClassMapper(reqDto, this);     /* if (Objects.equals(system.getCursorBlock(), "PL_STD_AIRPORT_MR")     && Objects.equals(plStdAirportMr.getRow(system.getCursorRecordIndex()).getRowid(), null)) {     coreptLib.dspMsg("Invalid/No Data to plot");     throw new FormTriggerFailureException();     } else if (Objects.equals(system.getCursorBlock(), "PL_TLD_AIRPORT_MR")     && Objects.equals(plTldAir.portMr.getRow(system.getCursorRecordIndex()).getRowid(), null)) {     coreptLib.dspMsg("Invalid/No Data to plot");     throw new FormTriggerFailureException();     } else if (Objects.equals(system.getCursorBlock(), "STD_AIRPORT_MR")     && Objects.equals(stdAirportMr.getRow(system.getCursorRecordIndex()).getRowid(), null)) {     coreptLib.dspMsg("Invalid/No Data to plot");     throw new FormTriggerFailureException();     } else if (Objects.equals(system.getCursorBlock(), "TLD_AIRPORT_MR")     && Objects.equals(tldAirportMr.getRow(system.getCursorRecordIndex()).getRowid(), null)) {     coreptLib.dspMsg("Invalid/No Data to plot");     throw new FormTriggerFailureException();     }      */     java.lang.String lsPlottingFunctionCommand = null;     java.lang.String lsQuery = "";     java.lang.String lsPlottingFunctionDir = "";     java.lang.String lsTableName = "";     java.lang.Integer lnRecordCount = 1;     java.lang.Integer lsCallPlottingFunction = 1;     java.lang.Integer lsCallPlottingFunction1 = 0;     // String ls_Form_Id; FORMMODULE;     // MY_PROCESS_ID WEBUTIL_HOST.PROCESS_ID;     java.lang.String lsPlotUrl = null;     java.lang.String lsDataType = "AIRPORT";     global.setLsPlotUrl(webPlotUrl);     try {         // ls_Plotting_Function_Dir                := PLOT_GLOBAL_PKG.GetInstallationDir;         // Plot_Global_Pkg.ln_Plot_Process_Counter := NVL(PLOT_GLOBAL_PKG.ltab_Process_ID.COUNT, 0) + 1;         throw new com.honeywell.coreptdu.exception.FormTriggerFailureException();     } catch (java.lang.Exception e) {         lsPlottingFunctionDir = "C:\\Program Files\\Honeywell Inc., Aviation Services\\CorePTDU Tool\\";         lnRecordCount = 1;     }     if (java.util.Objects.equals(parameter.getRecordType(), "S") && java.util.Objects.equals(parameter.getLibraryAccess(), "PRE-LIBRARY")) {         lsTableName = "PL_STD_AIRPORT";         lsQuery = plStdAirportMr.getLastQuery();     } else if (java.util.Objects.equals(parameter.getRecordType(), "T") && java.util.Objects.equals(parameter.getLibraryAccess(), "PRE-LIBRARY")) {         lsTableName = "PL_TLD_AIRPORT";         lsQuery = plTldAirportMr.getLastQuery();     } else if (java.util.Objects.equals(parameter.getRecordType(), "S") && java.util.Objects.equals(parameter.getLibraryAccess(), "MASTER")) {         lsTableName = "STD_AIRPORT";         lsQuery = stdAirportMr.getLastQuery();     } else if (java.util.Objects.equals(parameter.getRecordType(), "T") && java.util.Objects.equals(parameter.getLibraryAccess(), "MASTER")) {         lsTableName = "TLD_AIRPORT";         lsQuery = tldAirportMr.getLastQuery();     }     if (!com.honeywell.coreptdu.utils.oracleutils.OracleHelpers.isNullorEmpty(lsQuery)) {         lsQuery = hashUtils.decrypt(lsQuery);     }     if (instr(lsQuery, "FROM") > 0) {         lsQuery = substr(lsQuery, instr(lsQuery, " FROM "));         if (instr(lsQuery, "ORDER BY") >= 1) {             lsQuery = substr(lsQuery, 1, instr(lsQuery, "ORDER BY") - 1);         }     }     if (lnRecordCount >= 10) {         coreptLib.dspMsg("Attn !!!! Maximum of 10 Plot Windows are already opened, please close atleast one Plot Window to open new Plot Window");     } else {         if (!com.honeywell.coreptdu.utils.oracleutils.OracleHelpers.isNullorEmpty(lsQuery)) {             // TODO Fetch_Plotting_Data.Get_Record_Count(ls_Query,ls_Table_Name,ln_Record_Count);             java.util.Map<java.lang.String, java.lang.Object> result = app.executeProcedure("CPTPM", "Get_Record_Count", "Fetch_Plotting_Data", null, new com.honeywell.coreptdu.utils.dbutils.ProcedureInParameter("pi_squery", lsQuery, oracle.jdbc.OracleTypes.VARCHAR), new com.honeywell.coreptdu.utils.dbutils.ProcedureInParameter("pi_sTable_Name", lsTableName, oracle.jdbc.OracleTypes.VARCHAR), new com.honeywell.coreptdu.utils.dbutils.ProcedureOutParameter("po_nRec_Count", oracle.jdbc.OracleTypes.NUMBER));             lnRecordCount = toInteger(result.get("po_nRec_Count"));         } else {             lnRecordCount = 0;         }         if ((lnRecordCount > 0) && (!java.util.Objects.equals(nameIn(this, lsTableName + "_MR.AIRPORT_IDENT"), null))) {             if (like("PL_%", lsTableName)) {                 lsQuery = ((((((" FROM " + lsTableName) + " WHERE (PROCESSING_CYCLE=") + toChar(nameIn(this, (lsTableName + "_MR") + ".PROCESSING_CYCLE"))) + ")") + " AND (DATA_SUPPLIER='") + toChar(nameIn(this, (lsTableName + "_MR") + ".DATA_SUPPLIER"))) + "')";             } else {                 lsQuery = (((" FROM " + lsTableName) + " WHERE (DATA_SUPPLIER='") + toChar(nameIn(this, (lsTableName + "_MR") + ".DATA_SUPPLIER"))) + "')";             }             lsPlotUrl = (((((((((global.getLsPlotUrl() + "?username=") + global.getUserName()) + "&password=") + global.getPassword()) + "&connectstr=") + global.getConnectString()) + "&datatype=") + lsDataType) + "&query=") + lsQuery;             if (java.util.Objects.equals(displayItemBlock.getGearth(), "Y")) {                 // TODO WEB.SHOW_DOCUMENT(ls_Plot_URL,"_blank");                 createPlot(lsPlotUrl);             } else {                 lsPlottingFunctionCommand = (((((((((lsPlottingFunctionDir + "CorePTDU.exe") + " -user:") + global.getUserName()) + " -password:") + global.getPassword()) + " -connectstr:") + global.getConnectString()) + " -datatype:AIRPORT") + " -query:") + lsQuery;                 // TODO MY_PROCESS_ID     := WEBUTIL_HOST.NonBlocking(ls_Plotting_Function_Command)                 try {                     // TODO plotGlobalPkg.ltabProcessId(plotGlobalPkg.lnPlotProcessCounter).lnProcessId = toNumber(myProcessId.handle);                     // plotGlobalPkg.ltabProcessId(plotGlobalPkg.lnPlotProcessCounter).lsDatatype = TO_CHAR(ls_Form_Id.ID);                 } catch (java.lang.Exception e) {                     return null;                 }             }             goBlock(lsTableName + "_MR", "");         } else {             coreptLib.dspMsg("Invalid/No Data to plot");         }     }     com.honeywell.coreptdu.utils.oracleutils.OracleHelpers.ResponseMapper(this, resDto);     log.info(" controlBlockPlotWhenButtonPressed executed successfully");     log.debug(lsPlottingFunctionCommand);     log.debug("lsCallPlottingFunction1", lsCallPlottingFunction1);     log.debug("lsCallPlottingFunction", lsCallPlottingFunction);     return responseObj.render(responseObj.formSuccessResponse(com.honeywell.coreptdu.utils.common.Constants.RECORD_FETCH, resDto)); } catch (java.lang.Exception e) {     log.error("Error while Executing the controlBlockPlotWhenButtonPressed Service");     com.honeywell.coreptdu.utils.oracleutils.OracleHelpers.ResponseMapper(this, resDto);     return com.honeywell.coreptdu.exception.ExceptionUtils.handleException(e, resDto); }

API: deleteDcrNo()
  log.info("deleteDcrNo Executing")
  try {     java.lang.Integer lsLength = 0;     java.lang.String lsDcr1 = null;     java.lang.String lsDcr2 = null;     lsLength = instr(("," + global.getNewDcrNo()) + ",", ("," + toInteger(plTldAirportMr.getRow(system.getCursorRecordIndex()).getCreateDcrNumber())) + ",");     if (java.util.Objects.equals(lsLength, 1)) {         lsDcr1 = null;     } else {         lsDcr1 = rtrim(ltrim(substr(global.getNewDcrNo(), 1, lsLength - 2), ", "), ", ");     }     lsDcr2 = rtrim(ltrim(substr(global.getNewDcrNo(), 1), ", "), ", ");     global.setNewDcrNo(ltrim((lsDcr1 + ",") + lsDcr2, ", "));     log.info("deleteDcrNo Executed Successfully"); } catch (java.lang.Exception e) {     log.error("Error while executing deleteDcrNo" + e.getMessage());     throw e; }

API: displayItemBlockRefreshButtonWhenButtonPressed(com.honeywell.coreptdu.datatypes.airport.dto.request.AirportTriggerRequestDto)
  log.info(" displayItemBlockRefreshButtonWhenButtonPressed Executing")
  com.honeywell.coreptdu.global.dto.BaseResponse<com.honeywell.coreptdu.datatypes.airport.dto.response.AirportTriggerResponseDto> responseObj = new com.honeywell.coreptdu.global.dto.BaseResponse<>()
  com.honeywell.coreptdu.datatypes.airport.dto.response.AirportTriggerResponseDto resDto = new com.honeywell.coreptdu.datatypes.airport.dto.response.AirportTriggerResponseDto()
  try {     com.honeywell.coreptdu.utils.oracleutils.OracleHelpers.bulkClassMapper(reqDto, this);     java.lang.Integer totalRows = 0;     java.lang.Integer vButton = 0;     if (java.util.Objects.equals(system.getFormStatus(), "CHANGED")) {         coreptLib.dspMsg("There is changes in the form, please do commit first.");     } else {         totalRows = getGroupRowCount(findGroup("refreshRecordsGroup"));         alertDetails.getCurrent();         if (alertDetails.getAlerts().size() < alertDetails.getCurrentAlert()) {             displayAlert.moreButtons("S", "Refresh Record", (("You have modified or inserted or deleted \n" + totalRows) + " record(s). \n") + "Do you want to refresh the Master Library now?\n", "Refresh", "Cancel", null);             com.honeywell.coreptdu.utils.oracleutils.OracleHelpers.ResponseMapper(displayAlert, this);             alertDetails.createNewRecord("displayItemBlockRefreshButtonWhenButtonPressed");             throw new com.honeywell.coreptdu.exception.AlertException(event, alertDetails);         } else {             vButton = alertDetails.getAlertValue("displayItemBlockRefreshButtonWhenButtonPressed", alertDetails.getCurrentAlert());         }         if (java.util.Objects.equals(vButton, 1)) {             refreshMasterLib.refreshRecords(totalRows);         }         // Code changes by review team.         // } else {         // ;         // }     }     com.honeywell.coreptdu.utils.oracleutils.OracleHelpers.ResponseMapper(this, resDto);     log.info("displayItemBlockRefreshButtonWhenButtonPressed executed successfully");     return responseObj.render(responseObj.formSuccessResponse(com.honeywell.coreptdu.utils.common.Constants.RECORD_FETCH, resDto)); } catch (java.lang.Exception e) {     log.error("Error while Executing the displayItemBlockRefreshButtonWhenButtonPressed Service");     com.honeywell.coreptdu.utils.oracleutils.OracleHelpers.ResponseMapper(this, resDto);     return com.honeywell.coreptdu.exception.ExceptionUtils.handleException(e, resDto); }

API: doValidate(java.lang.String,java.lang.String)
  log.info("doValidate Executing")
  try {     com.honeywell.coreptdu.global.dbtype.CrAirport vRecord = new com.honeywell.coreptdu.global.dbtype.CrAirport();     java.lang.Integer vErrInd = 0;     java.util.List<java.lang.Integer> vErrList = new java.util.ArrayList<>();     java.lang.String vAllErr = null;     com.honeywell.coreptdu.global.dbtype.PlStdAirportType vSrec = new com.honeywell.coreptdu.global.dbtype.PlStdAirportType();     com.honeywell.coreptdu.global.dbtype.PlTldAirportType vTrec = new com.honeywell.coreptdu.global.dbtype.PlTldAirportType();     java.lang.String vNerr = null;     // String vValid = null;     java.lang.String vInd = com.honeywell.coreptdu.global.forms.FormConstant.Y;     if (!java.util.Objects.equals(nameIn(this, pBlock + ".airport_ident"), null)) {         if (java.util.Objects.equals(parameter.getRecordType(), "S")) {             controlBlock.setStdOverrideErrors(null);         } else {             controlBlock.setTldOverrideErrors(null);         }         vRecord = populateRecord(pBlock, vRecord);         java.util.Map<java.lang.String, java.lang.Object> cst = app.executeProcedure("CPT", "VAIRPORT", "RECSV1", new com.honeywell.coreptdu.utils.dbutils.ProcedureInOutParameter("p_carpt", vRecord, oracle.jdbc.OracleTypes.STRUCT, "SDV_RECORDS.CR_AIRPORT"), new com.honeywell.coreptdu.utils.dbutils.ProcedureOutParameter("p_errlist", oracle.jdbc.OracleTypes.ARRAY, "CPT_TYPES.ERRLIST_TYPE"), new com.honeywell.coreptdu.utils.dbutils.ProcedureOutParameter("p_err_ind", oracle.jdbc.OracleTypes.NUMBER));         java.sql.Struct struct = ((java.sql.Struct) (cst.get("p_carpt")));         vRecord = com.honeywell.coreptdu.utils.oracleutils.OracleHelpers.mapStructToClass(struct, com.honeywell.coreptdu.global.dbtype.CrAirport.class);         vErrInd = toInteger(cst.get("p_err_ind"));         java.sql.Array arr = ((java.sql.Array) (cst.get("p_errlist")));         java.lang.Object[] errRes = ((java.lang.Object[]) (arr.getArray()));         for (java.lang.Object itr : errRes) {             vErrList.add(toInteger(itr));         }         if (!java.util.Objects.equals(vErrInd, 0)) {             for (int i = 0; i < vErrList.size(); i++) {                 if (!coreptLib.isOverride(global.getDataSupplier(), toInteger(nameIn(this, pBlock + ".processing_cycle")), "AIRPORT", vErrList.get(i))) {                     vAllErr = (((getNullClean(vAllErr) + " * ") + toChar(vErrList.get(i))) + " - ") + coreptLib.getErrText(vErrList.get(i));                     vInd = com.honeywell.coreptdu.global.forms.FormConstant.I;                 } else if (!java.util.Objects.equals(vInd, "I")) {                     vInd = com.honeywell.coreptdu.global.forms.FormConstant.O;                 }             }         }         com.honeywell.coreptdu.datatypes.airport.serviceimpl.InnerAirportTriggerServiceImpl res = populateRelRecord(pBlock, vSrec, vTrec);         vSrec = res.plStdAirportType;         vTrec = res.plTldAirportType;         if (((java.util.Objects.equals(parameter.getRecordType(), "S") && (!java.util.Objects.equals(vSrec.getRecommendedNavaidIdent(), null))) || (java.util.Objects.equals(parameter.getRecordType(), "T") && (!java.util.Objects.equals(vTrec.getRecommendedNavaidIdent(), null)))) || ((java.util.Objects.equals(parameter.getRecordType(), "S") && (!java.util.Objects.equals(vSrec.getPublicMilitaryInd(), null))) || (java.util.Objects.equals(parameter.getRecordType(), "T") && (!java.util.Objects.equals(vTrec.getPublicMilitaryInd(), null))))) {             java.util.Map<java.lang.String, java.lang.Object> vairport = app.executeProcedure("CPTS", "vairport_WRAPPER", "RECRV1_WRAPPER", new com.honeywell.coreptdu.utils.dbutils.ProcedureInParameter("p_record_type", parameter.getRecordType(), oracle.jdbc.OracleTypes.VARCHAR), new com.honeywell.coreptdu.utils.dbutils.ProcedureInParameter("cust_p_srec", vSrec, oracle.jdbc.OracleTypes.STRUCT, "RECRV1_WRAPPER.PL_STD_AIRPORT_TYPE"), new com.honeywell.coreptdu.utils.dbutils.ProcedureInParameter("cust_p_trec", vTrec, oracle.jdbc.OracleTypes.STRUCT, "RECRV1_WRAPPER.PL_TLD_AIRPORT_TYPE"), new com.honeywell.coreptdu.utils.dbutils.ProcedureOutParameter("p_err", oracle.jdbc.OracleTypes.VARCHAR), new com.honeywell.coreptdu.utils.dbutils.ProcedureOutParameter("p_valind", oracle.jdbc.OracleTypes.VARCHAR), new com.honeywell.coreptdu.utils.dbutils.ProcedureInParameter("p_view_only", pIgnoreRef, oracle.jdbc.OracleTypes.VARCHAR), new com.honeywell.coreptdu.utils.dbutils.ProcedureInParameter("p_run_loc", "DU", oracle.jdbc.OracleTypes.VARCHAR));             vNerr = toString(vairport.get("p_err"));             if (!java.util.Objects.equals(vNerr, "YY")) {                 if (java.util.Objects.equals(substr(vNerr, 1, 1), "N")) {                     vAllErr = (getNullClean(vAllErr) + " * 218 - ") + coreptLib.getErrText(218);                 }                 if (java.util.Objects.equals(substr(vNerr, 2, 1), "N")) {                     vAllErr = (getNullClean(vAllErr) + " * 5585 - ") + coreptLib.getErrText(5585);                 }             }         }         coreptLib.setindandmessage(pBlock, vAllErr, parameter.getWorkType(), pIgnoreRef, vInd);         if (java.util.Objects.equals(pIgnoreRef, "N")) {             setUpdateDcr(upper(pBlock), vRecord);         }         coreptLib.setoverridebutton(pBlock);     } else {         coreptLib.setinitialerrordisplay(pBlock);     }     log.info("doValidate Executed Successfully"); } catch (java.lang.Exception e) {     log.error("Error while executing doValidate" + e.getMessage());     throw e; }

API: exportDestination(com.honeywell.coreptdu.datatypes.exportdestination.dto.request.ExportDestinationTriggerRequestDto)
  log.info(" whenValidateRecord Executing")
  com.honeywell.coreptdu.global.dto.BaseResponse<com.honeywell.coreptdu.datatypes.exportdestination.dto.response.ExportDestinationTriggerResponseDto> responseObj = new com.honeywell.coreptdu.global.dto.BaseResponse<>()
  com.honeywell.coreptdu.datatypes.exportdestination.dto.response.ExportDestinationTriggerResponseDto resDto = new com.honeywell.coreptdu.datatypes.exportdestination.dto.response.ExportDestinationTriggerResponseDto()
  try {     com.honeywell.coreptdu.utils.oracleutils.OracleHelpers.bulkClassMapper(reqDto, this);     com.honeywell.coreptdu.global.forms.BlockDetail mstBlockData = null;     java.lang.StringBuilder reportfile = new java.lang.StringBuilder();     java.util.List<com.honeywell.coreptdu.utils.oracleutils.Record> recs = null;     // Master Block     if (lower(system.getCursorBlock()).equals("message") && com.honeywell.coreptdu.utils.oracleutils.OracleHelpers.isNullorEmpty(selectOptions.getFileName())) {         coreptLib.dspMsg("Sorry, please give an existing path and a file name with\nextension \'\'.txt\'\'.");         throw new com.honeywell.coreptdu.exception.FormTriggerFailureException();     }     if (com.honeywell.coreptdu.utils.oracleutils.OracleHelpers.isNullorEmpty(selectOptions.getFileName())) {         com.honeywell.coreptdu.utils.oracleutils.PropertyHelpers.setAlertProperty(event, "dsp_msg", "stop", "Forms", "WUT-130: Client file name cannot be null", "ALERT_MESSAGE_TEXT", "OK", null, null);         com.honeywell.coreptdu.utils.oracleutils.PropertyHelpers.setShowAlert(event, "dsp_msg", false);         throw new com.honeywell.coreptdu.exception.FormTriggerFailureException();     }     if (com.honeywell.coreptdu.utils.oracleutils.HoneyWellUtils.toCamelCase(system.getCursorBlock()).equals("plTldAirportMr")) {         mstBlockData = reqDto.getExportDataBlocks().get("plTldAirportMr");         java.util.List<java.lang.String> mstPromptNames = getBlockMetaData(mstBlockData, com.honeywell.coreptdu.global.forms.FormConstant.PROMPT_NAME);         java.util.List<java.lang.String> mstDatabseColumns = getBlockMetaData(mstBlockData, com.honeywell.coreptdu.global.forms.FormConstant.DATABASE_COLUMN);         java.lang.String query = hashUtils.decrypt(mstBlockData.getLastQuery());         if (query.contains(" where rno <=")) {             query = substrWithLen(query, 0, com.honeywell.coreptdu.utils.oracleutils.OracleHelpers.instr(query, " where rno <="));         } else if (query.contains(" OFFSET ")) {             query = substrWithLen(query, 0, com.honeywell.coreptdu.utils.oracleutils.OracleHelpers.instr(query, " OFFSET "));         }         // Header Building..         reportfile.append(getExportHeader(mstPromptNames, 0, selectOptions.getDelimiter()));         // Master Fetching..         recs = app.executeQuery(query);         for (com.honeywell.coreptdu.utils.oracleutils.Record mstRec : recs) {             com.honeywell.coreptdu.datatypes.airport.entity.PlTldAirportMr plTldAirportMr = app.mapResultSetToClass(mstRec, com.honeywell.coreptdu.datatypes.airport.entity.PlTldAirportMr.class);             reportfile.append(getExportData(plTldAirportMr, mstDatabseColumns, 0, selectOptions.getDelimiter(), selectOptions.getGetTextFile()));         }     } else if (com.honeywell.coreptdu.utils.oracleutils.HoneyWellUtils.toCamelCase(system.getCursorBlock()).equals("plStdAirportMr")) {         mstBlockData = reqDto.getExportDataBlocks().get("plStdAirportMr");         java.util.List<java.lang.String> mstPromptNames = getBlockMetaData(mstBlockData, com.honeywell.coreptdu.global.forms.FormConstant.PROMPT_NAME);         java.util.List<java.lang.String> mstDatabseColumns = getBlockMetaData(mstBlockData, com.honeywell.coreptdu.global.forms.FormConstant.DATABASE_COLUMN);         java.lang.String query = hashUtils.decrypt(mstBlockData.getLastQuery());         if (query.contains(" where rno <=")) {             query = substrWithLen(query, 0, com.honeywell.coreptdu.utils.oracleutils.OracleHelpers.instr(query, " where rno <="));         } else if (query.contains(" OFFSET ")) {             query = substrWithLen(query, 0, com.honeywell.coreptdu.utils.oracleutils.OracleHelpers.instr(query, " OFFSET "));         }         reportfile.append(getExportHeader(mstPromptNames, 0, selectOptions.getDelimiter()));         // Master Fetching..         recs = app.executeQuery(query);         for (com.honeywell.coreptdu.utils.oracleutils.Record mstRec : recs) {             com.honeywell.coreptdu.datatypes.airport.entity.PlStdAirportMr plStdAirportMr = app.mapResultSetToClass(mstRec, com.honeywell.coreptdu.datatypes.airport.entity.PlStdAirportMr.class);             reportfile.append(getExportData(plStdAirportMr, mstDatabseColumns, 0, selectOptions.getDelimiter(), selectOptions.getGetTextFile()));         }     } else if (com.honeywell.coreptdu.utils.oracleutils.HoneyWellUtils.toCamelCase(system.getCursorBlock()).equals("stdAirportMr")) {         mstBlockData = reqDto.getExportDataBlocks().get("stdAirportMr");         java.util.List<java.lang.String> mstPromptNames = getBlockMetaData(mstBlockData, com.honeywell.coreptdu.global.forms.FormConstant.PROMPT_NAME);         java.util.List<java.lang.String> mstDatabseColumns = getBlockMetaData(mstBlockData, com.honeywell.coreptdu.global.forms.FormConstant.DATABASE_COLUMN);         java.lang.String query = hashUtils.decrypt(mstBlockData.getLastQuery());         if (query.contains(" where rno <=")) {             query = substrWithLen(query, 0, com.honeywell.coreptdu.utils.oracleutils.OracleHelpers.instr(query, " where rno <="));         } else if (query.contains(" OFFSET ")) {             query = substrWithLen(query, 0, com.honeywell.coreptdu.utils.oracleutils.OracleHelpers.instr(query, " OFFSET "));         }         reportfile.append(getExportHeader(mstPromptNames, 0, selectOptions.getDelimiter()));         // Master Fetching..         recs = app.executeQuery(query);         for (com.honeywell.coreptdu.utils.oracleutils.Record mstRec : recs) {             com.honeywell.coreptdu.datatypes.airport.entity.StdAirportMr stdAirportMr = app.mapResultSetToClass(mstRec, com.honeywell.coreptdu.datatypes.airport.entity.StdAirportMr.class);             reportfile.append(getExportData(stdAirportMr, mstDatabseColumns, 0, selectOptions.getDelimiter(), selectOptions.getGetTextFile()));         }     } else if (com.honeywell.coreptdu.utils.oracleutils.HoneyWellUtils.toCamelCase(system.getCursorBlock()).equals("tldAirportMr")) {         mstBlockData = reqDto.getExportDataBlocks().get("tldAirportMr");         java.util.List<java.lang.String> mstPromptNames = getBlockMetaData(mstBlockData, com.honeywell.coreptdu.global.forms.FormConstant.PROMPT_NAME);         java.util.List<java.lang.String> mstDatabseColumns = getBlockMetaData(mstBlockData, com.honeywell.coreptdu.global.forms.FormConstant.DATABASE_COLUMN);         java.lang.String query = hashUtils.decrypt(mstBlockData.getLastQuery());         if (query.contains(" where rno <=")) {             query = substrWithLen(query, 0, com.honeywell.coreptdu.utils.oracleutils.OracleHelpers.instr(query, " where rno <="));         } else if (query.contains(" OFFSET ")) {             query = substrWithLen(query, 0, com.honeywell.coreptdu.utils.oracleutils.OracleHelpers.instr(query, " OFFSET "));         }         reportfile.append(getExportHeader(mstPromptNames, 0, selectOptions.getDelimiter()));         // Master Fetching..         recs = app.executeQuery(query);         for (com.honeywell.coreptdu.utils.oracleutils.Record mstRec : recs) {             com.honeywell.coreptdu.datatypes.airport.entity.TldAirportMr tldAirportMr = app.mapResultSetToClass(mstRec, com.honeywell.coreptdu.datatypes.airport.entity.TldAirportMr.class);             reportfile.append(getExportData(tldAirportMr, mstDatabseColumns, 0, selectOptions.getDelimiter(), selectOptions.getGetTextFile()));         }     } else if (lower(system.getCursorBlock()).equals("message")) {         java.util.List<java.lang.String> messageLogs = new java.util.ArrayList<>();         java.lang.String dateQuery = """              SELECT TO_CHAR(SYSDATE , 'Month DD,YYYY') as formatted_date  FROM DUAL         """;         java.lang.String timeQuery = """         SELECT  to_char(sysdate,'HH24:MI') FROM DUAL         """;         com.honeywell.coreptdu.utils.oracleutils.Record dateRec = app.selectInto(dateQuery);         com.honeywell.coreptdu.utils.oracleutils.Record timeRec = app.selectInto(timeQuery);         reportfile.append("Generated on ").append(dateRec.getObject()).append(" at ").append(timeRec.getObject()).append("\n").append("\n");         mstBlockData = reqDto.getExportDataBlocks().get("message");         messageLogs = mstBlockData.getMessageLogs();         for (int i = 0; i <= (messageLogs.size() - 1); i++) {             reportfile.append(messageLogs.get(i)).append("\n");         }     }     com.honeywell.coreptdu.utils.oracleutils.OracleHelpers.ResponseMapper(this, resDto);     java.lang.String base64 = java.util.Base64.getEncoder().encodeToString(reportfile.toString().getBytes(java.nio.charset.StandardCharsets.UTF_8));     com.honeywell.coreptdu.global.dto.ReportDetail reportDetail = new com.honeywell.coreptdu.global.dto.ReportDetail();     reportDetail.setData(base64);     resDto.setReport(reportDetail);     goBlock(system.getCursorBlock(), "firstItem");     log.info(" displayItemBlockRefreshButtonWhenButtonPressed executed successfully");     return responseObj.render(responseObj.formSuccessResponse(com.honeywell.coreptdu.utils.common.Constants.RECORD_FETCH, resDto)); } catch (java.lang.RuntimeException e) {     log.info("RuntimeException captured");     com.honeywell.coreptdu.utils.oracleutils.OracleHelpers.ResponseMapper(this, resDto);     return com.honeywell.coreptdu.exception.ExceptionUtils.handleException(e, resDto); } catch (java.lang.Exception e) {     log.error("Error while Executing the displayItemBlockRefreshButtonWhenButtonPressed Service");     com.honeywell.coreptdu.utils.oracleutils.OracleHelpers.ResponseMapper(this, resDto);     return com.honeywell.coreptdu.exception.ExceptionUtils.handleException(e, resDto); }

API: initializeForm()
  log.info("initializeForm Executing")
  java.lang.String query = ""
  com.honeywell.coreptdu.utils.oracleutils.Record rec = null
  try {     java.lang.String fName = getApplicationProperty(com.honeywell.coreptdu.global.forms.FormConstant.CURRENT_FORM_NAME);     com.honeywell.coreptdu.global.forms.window wnid = findWindow(system.getCurrentForm(), "baseWindow");     java.lang.String vName = getWindowProperty(wnid, "title");     java.lang.String vBlock = getFormProperty(system.getCurrentForm(), "FIRST_NAVIGATION_BLOCK");     java.lang.String vErr = null;     defaultValue("J", "global.data_supplier");     defaultValue(com.honeywell.coreptdu.global.forms.FormConstant.I, "global.lib_refreshed");     defaultValue("99999", "global.dcr_number");     defaultValue("200406", "global.processing_cycle");     defaultValue(com.honeywell.coreptdu.global.forms.FormConstant.N, "global.from_error_summary");     defaultValue("200406", "global.recent_cycle");     defaultValue(com.honeywell.coreptdu.global.forms.FormConstant.MAXIMIZE, "global.status_window");     defaultValue(null, "global.customer_ident");     defaultValue(null, "global.allroles");     defaultValue("cpt", "global.user_name");     defaultValue("cpt", "global.password");     defaultValue("cpt", "global.connect_string");     defaultValue("airport", "global.data_type");     defaultValue("airport", "global.table_name");     defaultValue("ml", "global.schema_type");     defaultValue("blank", "global.last_query");     global.setUserName(app.getUserName());     // global.setPassword(app.getPassword());     global.setConnectString(global.getConnectString());     if (java.util.Objects.equals(nameIn(this, "global.status_window"), "MAXIMIZE")) {         setWindowProperty(com.honeywell.coreptdu.global.forms.FormConstant.BASEWINDOW, com.honeywell.coreptdu.global.forms.FormConstant.WINDOW_STATE, com.honeywell.coreptdu.global.forms.FormConstant.MAXIMIZE);     } else {         setWindowProperty(com.honeywell.coreptdu.global.forms.FormConstant.BASEWINDOW, com.honeywell.coreptdu.global.forms.FormConstant.WINDOW_STATE, com.honeywell.coreptdu.global.forms.FormConstant.NORMAL);     }     global.setAllroles("ALL");     vErr = coreptLib.setRole(global.getAllroles());     if (!java.util.Objects.equals(vErr, "PASSED")) {         displayAlert.oneButton("S", "Fatal Error", "The roles cannot be activated.  Contact the COREPT Administrator.");         exitForm();     } else {         if (java.util.Objects.equals(global.getProcessingCycle(), null)) {             try {                 query = """                 select max(processing_cycle)                     from pl_std_airport                 """;                 rec = app.selectInto(query);                 global.setProcessingCycle(rec.getString());             } catch (com.honeywell.coreptdu.exception.NoDataFoundException e) {                 global.setProcessingCycle(null);             }         }         global.setUserName(app.getUserName());         // global.setPassword(app.getPassword());         global.setConnectString(global.getConnectString());         if (java.util.Arrays.asList("PL_", "STD", "TLD").contains(substr(vBlock, 1, 3))) {             if (java.util.Objects.equals(parameter.getRecordType(), "S")) {                 vName = com.honeywell.coreptdu.global.forms.FormConstant.STD + vName;             } else if (java.util.Objects.equals(parameter.getRecordType(), "T")) {                 vName = com.honeywell.coreptdu.global.forms.FormConstant.TLD + vName;             }             if (java.util.Objects.equals(parameter.getLibraryAccess(), "PRE-LIBRARY")) {                 vName = com.honeywell.coreptdu.global.forms.FormConstant.PL + vName;             } else {                 vName = com.honeywell.coreptdu.global.forms.FormConstant.ML + vName;             }         }         setWindowProperty("baseWindow", com.honeywell.coreptdu.global.forms.FormConstant.TITLE, vName);         if (java.util.Objects.equals(parameter.getLibraryAccess(), "PRE-LIBRARY")) {             setItemProperty("display_item_block.processing_cycle", com.honeywell.coreptdu.global.forms.FormConstant.DISPLAYED, com.honeywell.coreptdu.global.forms.FormConstant.PROPERTY_TRUE);             setItemProperty("display_item_block.processing_cycle", com.honeywell.coreptdu.global.forms.FormConstant.WIDTH, "60");             displayItemBlock.setProcessingCycle(global.getProcessingCycle());         } else if (!java.util.Objects.equals(global.getNewProcessingCycle(), "111111")) {             setItemProperty("display_item_block.processing_cycle", com.honeywell.coreptdu.global.forms.FormConstant.DISPLAYED, com.honeywell.coreptdu.global.forms.FormConstant.PROPERTY_TRUE);             setItemProperty("display_item_block.processing_cycle", com.honeywell.coreptdu.global.forms.FormConstant.WIDTH, "80");             displayItemBlock.setProcessingCycle((global.getOldProcessingCycle() + " - ") + global.getNewProcessingCycle());         }         coreptTemplateTriggerService.populateItems(fName);         coreptLib.unsetQueryMenuItems();         com.honeywell.coreptdu.utils.oracleutils.RecordGroup groupId = null;         if (java.util.Objects.equals(global.getLibRefreshed(), "Y") && (!java.util.Objects.equals(parameter.getWorkType(), "VIEW"))) {             groupId = createGroup("refreshRecordsGroup");             addGroupColumn(groupId, "dcrNumber", "numberColumn");             addGroupColumn(groupId, "tableName", "charColumn", 30);             addGroupColumn(groupId, "validaInd", "charColumn", 1);             addGroupColumn(groupId, "procCycle", "numberColumn");             groups.put("refreshRecordsGroup", groupId);         }     }     log.info("initializeForm Executed Successfully"); } catch (java.lang.Exception e) {     log.error("Error while executing initializeForm" + e.getMessage());     throw e; }

API: keyCommit(com.honeywell.coreptdu.datatypes.airport.dto.request.AirportTriggerRequestDto)
  log.info(" keyCommit Executing")
  com.honeywell.coreptdu.global.dto.BaseResponse<com.honeywell.coreptdu.datatypes.airport.dto.response.AirportTriggerResponseDto> responseObj = new com.honeywell.coreptdu.global.dto.BaseResponse<>()
  com.honeywell.coreptdu.datatypes.airport.dto.response.AirportTriggerResponseDto resDto = new com.honeywell.coreptdu.datatypes.airport.dto.response.AirportTriggerResponseDto()
  try {     com.honeywell.coreptdu.utils.oracleutils.OracleHelpers.bulkClassMapper(reqDto, this);     if ((global.getClearBlock() != null) && global.getClearBlock()) {         validateBeforeCommit();         commitForm(this);         sendUpdatedRowIdDetails();         global.setClearBlock(false);     } else // Changes by code review team.     if (!java.util.Objects.equals(parameter.getWorkType(), "VIEW")) {         checkToCommit("COMMIT");     }     com.honeywell.coreptdu.utils.oracleutils.OracleHelpers.ResponseMapper(this, resDto);     log.info(" keyCommit executed successfully");     return responseObj.render(responseObj.formSuccessResponse(com.honeywell.coreptdu.utils.common.Constants.RECORD_FETCH, resDto)); } catch (java.lang.Exception e) {     log.error("Error while Executing the keyCommit Service");     com.honeywell.coreptdu.utils.oracleutils.OracleHelpers.ResponseMapper(this, resDto);     return com.honeywell.coreptdu.exception.ExceptionUtils.handleException(e, resDto); }

API: keyDelrec(com.honeywell.coreptdu.datatypes.airport.dto.request.AirportTriggerRequestDto)
  log.info(" keyDelrec Executing")
  com.honeywell.coreptdu.global.dto.BaseResponse<com.honeywell.coreptdu.datatypes.airport.dto.response.AirportTriggerResponseDto> responseObj = new com.honeywell.coreptdu.global.dto.BaseResponse<>()
  com.honeywell.coreptdu.datatypes.airport.dto.response.AirportTriggerResponseDto resDto = new com.honeywell.coreptdu.datatypes.airport.dto.response.AirportTriggerResponseDto()
  java.lang.Boolean isChecked = false
  try {     com.honeywell.coreptdu.utils.oracleutils.OracleHelpers.bulkClassMapper(reqDto, this);     java.lang.Integer vAllowUpdate = null;     java.lang.String lsBlockName = system.getCursorBlock();     java.lang.Integer lnDcrNo = null;     java.lang.String lsTableName = null;     java.lang.Object lsAirportIdent = null;     java.lang.Object lsAirportIcao = null;     java.lang.Integer lnProcessingCycle = null;     java.lang.String lsRefInfo = null;     lsAirportIdent = nameIn(this, lsBlockName + ".airport_ident");     lsAirportIcao = nameIn(this, lsBlockName + ".airport_icao");     lnProcessingCycle = toInteger(nameIn(this, lsBlockName + ".processing_cycle"));     if (!java.util.Objects.equals(parameter.getWorkType(), "VIEW")) {         if (!java.util.Arrays.asList("NEW", "INSERT").contains(system.getRecordStatus())) {             if (java.util.Objects.equals(parameter.getRecordType(), "T")) {                 if (java.util.Objects.equals(nameIn(this, lsBlockName + ".processing_cycle"), null)) {                     vAllowUpdate = coreptLib.checkValidSuppCust(toInteger(global.getProcessingCycle()), toInteger(global.getProcessingCycle()), toInteger(global.getDcrNumber()), global.getDataSupplier(), parameter.getRecordType(), toString(nameIn(this, lsBlockName + ".customer_ident")));                 } else {                     vAllowUpdate = coreptLib.checkValidSuppCust(toInteger(nameIn(this, lsBlockName + ".processing_cycle")), toInteger(global.getProcessingCycle()), toInteger(global.getDcrNumber()), global.getDataSupplier(), parameter.getRecordType(), toString(nameIn(this, lsBlockName + ".customer_ident")));                 }             } else if (java.util.Objects.equals(nameIn(this, lsBlockName + ".processing_cycle"), null)) {                 vAllowUpdate = coreptLib.checkValidSuppCust(toInteger(global.getProcessingCycle()), toInteger(global.getProcessingCycle()), toInteger(global.getDcrNumber()), global.getDataSupplier(), parameter.getRecordType(), null);             } else {                 vAllowUpdate = coreptLib.checkValidSuppCust(toInteger(nameIn(this, lsBlockName + ".processing_cycle")), toInteger(global.getProcessingCycle()), toInteger(global.getDcrNumber()), global.getDataSupplier(), parameter.getRecordType(), null);             }             if (java.util.Objects.equals(vAllowUpdate, 1)) {                 java.lang.Integer aButton = 0;                 if (!java.util.Arrays.asList("NEW", "INSERT").contains(system.getRecordStatus())) {                     alertDetails.getCurrent();                     if (alertDetails.getAlerts().size() < alertDetails.getCurrentAlert()) {                         aButton = displayAlert.moreButtons("S", "Delete Record", ("You are going to delete this record. Please be sure." + chr(10)) + " ", "Delete It", "Cancel", "");                         com.honeywell.coreptdu.utils.oracleutils.OracleHelpers.ResponseMapper(displayAlert, this);                         alertDetails.createNewRecord("keyDelrec1");                         throw new com.honeywell.coreptdu.exception.AlertException(event, alertDetails);                     } else {                         aButton = alertDetails.getAlertValue("keyDelrec1", alertDetails.getCurrentAlert());                     }                     if (java.util.Objects.equals(aButton, 1)) {                         java.lang.String pTableType = "M2C";                         lsBlockName = system.getCursorBlock();                         java.lang.String pTableName = ltrim(upper(getBlockProperty(lsBlockName, "Query_Data_Source_Name")), "PL_");                         java.lang.Integer vDcrNumber = toInteger(nameIn(this, lsBlockName + ".create_dcr_number"));                         java.lang.Integer vProcessingCycle = toInteger(nameIn(this, lsBlockName + ".processing_cycle"));                         java.lang.String vValidateInd = toString(nameIn(this, lsBlockName + ".validate_ind"));                         java.lang.String vStatus = system.getRecordStatus();                         if (java.util.Objects.equals(vStatus, "CHANGED")) {                             vValidateInd = app.executeFunction(java.lang.String.class, "CPTM", "get_validate_ind", "refresh_ml_utilities", OracleTypes.VARCHAR, new com.honeywell.coreptdu.utils.dbutils.ProcedureInParameter("p_table", getBlockProperty(lsBlockName, "QUERY_DATA_SOURCE_NAME"), oracle.jdbc.OracleTypes.VARCHAR), new com.honeywell.coreptdu.utils.dbutils.ProcedureInParameter("p_dcr", toInteger(nameIn(this, lsBlockName + ".create_dcr_number")), oracle.jdbc.OracleTypes.NUMBER));                         }                         if (java.util.Arrays.asList("Y", "S", "H", "O").contains(vValidateInd)) {                             if (java.util.Objects.equals(refreshMasterLib.checkReferenceInfo(lsBlockName, "D"), "N")) {                                 java.util.Map<java.lang.String, java.lang.Object> cst = app.executeProcedure("CPTS", "Du_Std_Tld_Fix_Prc", "Forms_Utilities", new com.honeywell.coreptdu.utils.dbutils.ProcedureInParameter("pi_Fix_Ident", null, oracle.jdbc.OracleTypes.VARCHAR), new com.honeywell.coreptdu.utils.dbutils.ProcedureInParameter("pi_Fix_Icao", null, oracle.jdbc.OracleTypes.VARCHAR), new com.honeywell.coreptdu.utils.dbutils.ProcedureInParameter("pi_Airport_Ident", lsAirportIdent, oracle.jdbc.OracleTypes.VARCHAR), new com.honeywell.coreptdu.utils.dbutils.ProcedureInParameter("pi_Airport_Icao", lsAirportIcao, oracle.jdbc.OracleTypes.VARCHAR), new com.honeywell.coreptdu.utils.dbutils.ProcedureInParameter("pi_Sec", "P", oracle.jdbc.OracleTypes.VARCHAR), new com.honeywell.coreptdu.utils.dbutils.ProcedureInParameter("pi_Sub_Sec", "A", oracle.jdbc.OracleTypes.VARCHAR), new com.honeywell.coreptdu.utils.dbutils.ProcedureInParameter("pi_Data_Supplier", global.getDataSupplier(), oracle.jdbc.OracleTypes.VARCHAR), new com.honeywell.coreptdu.utils.dbutils.ProcedureInParameter("pi_Processing_Cycle", lnProcessingCycle, oracle.jdbc.OracleTypes.NUMBER), new com.honeywell.coreptdu.utils.dbutils.ProcedureOutParameter("po_Dcr_No", oracle.jdbc.OracleTypes.NUMBER), new com.honeywell.coreptdu.utils.dbutils.ProcedureOutParameter("po_Table_Name", oracle.jdbc.OracleTypes.VARCHAR));                                 lnDcrNo = (cst.get("po_Dcr_No") != null) ? toInteger(cst.get("po_Dcr_No")) : null;                                 lsTableName = toString(cst.get("po_Table_Name"));                                 lsRefInfo = com.honeywell.coreptdu.global.forms.FormConstant.N;                                 // showView("stdTldFixStk");                                 // hideView("stdTldFixStk");                             }                         }                         if (!java.util.Objects.equals(lnDcrNo, null)) {                             java.lang.Integer dcrButton = 0;                             alertDetails.getCurrent();                             if (alertDetails.getAlerts().size() < alertDetails.getCurrentAlert()) {                                 dcrButton = displayAlert.moreButtons("S", "Reference Record", ("This Fix has Reference.Do You Want to Delete the Fix?" + chr(10)) + " ", "Yes", "No", "");                                 com.honeywell.coreptdu.utils.oracleutils.OracleHelpers.ResponseMapper(displayAlert, this);                                 alertDetails.createNewRecord("keyDelrec2");                                 throw new com.honeywell.coreptdu.exception.AlertException(event, alertDetails);                             } else {                                 dcrButton = alertDetails.getAlertValue("keyDelrec2", alertDetails.getCurrentAlert());                             }                             if (java.util.Objects.equals(dcrButton, 1)) {                                 app.executeProcedure("CPTS", "Du_Update_Ref_Table_Prc", "Forms_Utilities", new com.honeywell.coreptdu.utils.dbutils.ProcedureInParameter("pi_Old_Dcr_Number", toInteger(nameIn(this, lsBlockName + ".Create_DCR_Number")), oracle.jdbc.OracleTypes.NUMBER), new com.honeywell.coreptdu.utils.dbutils.ProcedureInParameter("pi_New_Dcr_Number", lnDcrNo, oracle.jdbc.OracleTypes.NUMBER), new com.honeywell.coreptdu.utils.dbutils.ProcedureInParameter("pi_Table_Name", lsTableName, oracle.jdbc.OracleTypes.VARCHAR));                             } else {                                 throw new com.honeywell.coreptdu.exception.FormTriggerFailureException();                             }                         } else if (java.util.Objects.equals(lsRefInfo, "N")) {                             throw new com.honeywell.coreptdu.exception.FormTriggerFailureException();                         }                         if (java.util.Arrays.asList("Y", "S", "H", "O").contains(vValidateInd)) {                             refreshMasterLib.deleteFromRefTable(vDcrNumber, null);                         }                         if ((java.util.Objects.equals(global.getLibRefreshed(), "Y") && java.util.Arrays.asList(global.getNewProcessingCycle(), global.getOldProcessingCycle()).contains(toString(vProcessingCycle))) && java.util.Arrays.asList("Y", "S", "H", "O").contains(vValidateInd)) {                             pTableType = refreshMasterLib.refreshARecord(pTableType, vDcrNumber, vProcessingCycle, pTableName, com.honeywell.coreptdu.global.forms.FormConstant.I, null);                             deleteRecord("");                             if (parameter.getMultiRecDel() > 0) {                                 if (system.getCursorBlock().equals("PL_TLD_AIRPORT_MR")) {                                     chkSelectAll(isChecked, nameIn(this, system.getCursorBlock()));                                     for (com.honeywell.coreptdu.datatypes.airport.entity.PlTldAirportMr plTldAirportMr : this.plTldAirportMr.getData()) {                                         if (java.util.Objects.equals(plTldAirportMr.getRecordStatus(), "DELETED")) {                                             pTableName = ltrim(upper(getBlockProperty("PL_TLD_AIRPORT_MR", "Query_Data_Source_Name")), "PL_");                                             vDcrNumber = toInteger(plTldAirportMr.getCreateDcrNumber());                                             vProcessingCycle = toInteger(plTldAirportMr.getProcessingCycle());                                             pTableType = refreshMasterLib.refreshARecord(pTableType, vDcrNumber, vProcessingCycle, pTableName, com.honeywell.coreptdu.global.forms.FormConstant.I, null);                                         }                                     }                                     validateBeforeCommit();                                     commitForm(this);                                     sendUpdatedRowIdDetails();                                     system.setFormStatus(com.honeywell.coreptdu.global.forms.FormConstant.QUERIED);                                     coreptLib.dspMsg("The refresh master library table for this deletion is done \n and all changes are commited.");                                     refreshMasterLib.setRecordGroup(vDcrNumber, com.honeywell.coreptdu.global.forms.FormConstant.I, lsBlockName, vProcessingCycle, "D");                                     filterNonInsertedRecords(nameIn(this, system.getCursorBlock()));                                 }                                 controlBlock.setChkUnchkAll(com.honeywell.coreptdu.global.forms.FormConstant.N);                                 parameter.setMultiRecDel(0);                             } else {                                 // Delete status changing                                 copy("DELETED", lsBlockName + ".record_status");                                 java.lang.Integer value = system.getCursorRecordIndex();                                 validateBeforeCommit();                                 commitForm(this);                                 sendUpdatedRowIdDetails();                                 system.setCursorRecordIndex(value);                                 system.setFormStatus(com.honeywell.coreptdu.global.forms.FormConstant.QUERIED);                                 message("Record has been saved successfully");                                 refreshMasterLib.setRecordGroup(vDcrNumber, com.honeywell.coreptdu.global.forms.FormConstant.I, lsBlockName, vProcessingCycle, "D");                                 coreptLib.dspMsg("The refresh master library table for this deletion is done \nand all changes are commited.");                             }                         } else if (parameter.getMultiRecDel() > 0) {                             if (system.getCursorBlock().equals("PL_TLD_AIRPORT_MR")) {                                 chkSelectAll(isChecked, nameIn(this, system.getCursorBlock()));                             }                             validateBeforeCommit();                             commitForm(this);                             sendUpdatedRowIdDetails();                             system.setFormStatus(com.honeywell.coreptdu.global.forms.FormConstant.QUERIED);                             if (system.getCursorBlock().equals("PL_TLD_AIRPORT_MR")) {                                 filterNonInsertedRecords(nameIn(this, system.getCursorBlock()));                             }                             controlBlock.setChkUnchkAll(com.honeywell.coreptdu.global.forms.FormConstant.N);                             parameter.setMultiRecDel(0);                             coreptLib.dspMsg("The refresh master library table for this deletion is done \nand all changes are commited.");                         } else {                             deleteRecord("");                             copy("DELETED", lsBlockName + ".record_status");                             java.lang.String _rowId = toString(nameIn(this, lsBlockName + ".rowid"));                             sendLockRowIdDetails(_rowId);                             system.setRecordStatus(com.honeywell.coreptdu.global.forms.FormConstant.DELETED);                             system.setFormStatus(com.honeywell.coreptdu.global.forms.FormConstant.CHANGED);                         }                     }                 }             } else if (java.util.Objects.equals(parameter.getRecordType(), "T")) {                 coreptLib.dspActionMsg("D", parameter.getRecordType(), toInteger(nameIn(this, "global.dcr_number")), toInteger(nvl(nameIn(this, lsBlockName + ".processing_cycle"), global.getProcessingCycle())), toString(nameIn(this, system.getCursorBlock() + ".CUSTOMER_IDENT")));             } else {                 coreptLib.dspActionMsg("D", parameter.getRecordType(), toInteger(nameIn(this, "global.dcr_number")), toInteger(nvl(nameIn(this, lsBlockName + ".processing_cycle"), global.getProcessingCycle())), null);             }         } else {             if (java.util.Arrays.asList("Y", "S", "H", "O").contains(nameIn(this, system.getCursorBlock() + ".validate_ind"))) {                 refreshMasterLib.deleteFromRefTable(toInteger(nameIn(this, system.getCursorBlock() + ".create_dcr_number")), null);             }             deleteRecord("");             // Delete status changing             copy("DELETED", lsBlockName + ".record_status");             system.setFormStatus(com.honeywell.coreptdu.global.forms.FormConstant.CHANGED);             system.setRecordStatus("DELETED");         }     }     // plTldAirportMr.filterNonDeletedRecords();     // plStdAirportMr.filterNonDeletedRecords();     // mergeDelete();     com.honeywell.coreptdu.utils.oracleutils.OracleHelpers.ResponseMapper(this, resDto);     log.info(" keyDelrec executed successfully");     return responseObj.render(responseObj.formSuccessResponse(com.honeywell.coreptdu.utils.common.Constants.RECORD_FETCH, resDto)); } catch (java.lang.Exception e) {     log.error("Error while Executing the keyDelrec Service");     com.honeywell.coreptdu.utils.oracleutils.OracleHelpers.ResponseMapper(this, resDto);     return com.honeywell.coreptdu.exception.ExceptionUtils.handleException(e, resDto); }

API: keyEntqry(com.honeywell.coreptdu.datatypes.airport.dto.request.AirportTriggerRequestDto)
  log.info(" keyEntqry Executing")
  com.honeywell.coreptdu.global.dto.BaseResponse<com.honeywell.coreptdu.datatypes.airport.dto.response.AirportTriggerResponseDto> responseObj = new com.honeywell.coreptdu.global.dto.BaseResponse<>()
  com.honeywell.coreptdu.datatypes.airport.dto.response.AirportTriggerResponseDto resDto = new com.honeywell.coreptdu.datatypes.airport.dto.response.AirportTriggerResponseDto()
  try {     com.honeywell.coreptdu.utils.oracleutils.OracleHelpers.bulkClassMapper(reqDto, this);     if (java.util.Objects.equals(system.getMode(), "NORMAL") && (!java.util.Objects.equals(parameter.getWorkType(), "VIEW"))) {         checkToCommit(com.honeywell.coreptdu.global.forms.FormConstant.ENTER_QUERY);     }     controlBlock.setChkUnchkAll(com.honeywell.coreptdu.global.forms.FormConstant.N);     global.setNewDcrNo("");     coreptLib.coreptenterquery();     system.setMode("ENTER_QUERY");     system.setFormStatus("NORMAL");     if (java.util.Objects.equals(system.getMode(), "NORMAL")) {         coreptLib.unsetQueryMenuItems();     }     com.honeywell.coreptdu.utils.oracleutils.OracleHelpers.ResponseMapper(this, resDto);     log.info(" keyEntqry executed successfully");     return responseObj.render(responseObj.formSuccessResponse(com.honeywell.coreptdu.utils.common.Constants.RECORD_FETCH, resDto)); } catch (java.lang.Exception e) {     log.error("Error while Executing the keyEntqry Service");     com.honeywell.coreptdu.utils.oracleutils.OracleHelpers.ResponseMapper(this, resDto);     return com.honeywell.coreptdu.exception.ExceptionUtils.handleException(e, resDto); }

API: keyExeqry(com.honeywell.coreptdu.datatypes.airport.dto.request.AirportTriggerRequestDto)
  log.info(" keyExeqry Executing")
  com.honeywell.coreptdu.global.dto.BaseResponse<com.honeywell.coreptdu.datatypes.airport.dto.response.AirportTriggerResponseDto> responseObj = new com.honeywell.coreptdu.global.dto.BaseResponse<>()
  com.honeywell.coreptdu.datatypes.airport.dto.response.AirportTriggerResponseDto resDto = new com.honeywell.coreptdu.datatypes.airport.dto.response.AirportTriggerResponseDto()
  try {     com.honeywell.coreptdu.utils.oracleutils.OracleHelpers.bulkClassMapper(reqDto, this);     if (java.util.Objects.equals(system.getMode(), "NORMAL") && (!java.util.Objects.equals(parameter.getWorkType(), "VIEW"))) {         checkToCommit(com.honeywell.coreptdu.global.forms.FormConstant.EXECUTE_QUERY);     }     if (java.util.Objects.equals(system.getMode(), "NORMAL")) {         system.setCursorRecordIndex(0);         if (java.util.Objects.equals(com.honeywell.coreptdu.utils.oracleutils.GenericTemplateForm.toSnakeCase(system.getCursorBlock()), "PL_STD_AIRPORT_MR")) {             plStdAirportMr.getData().add(0, new com.honeywell.coreptdu.datatypes.airport.entity.PlStdAirportMr());             plStdAirportMrPreQuery();         } else if (java.util.Objects.equals(com.honeywell.coreptdu.utils.oracleutils.GenericTemplateForm.toSnakeCase(system.getCursorBlock()), "PL_TLD_AIRPORT_MR")) {             plTldAirportMr.getData().add(0, new com.honeywell.coreptdu.datatypes.airport.entity.PlTldAirportMr());             plTldAirportMrPreQuery();         } else if (java.util.Objects.equals(com.honeywell.coreptdu.utils.oracleutils.GenericTemplateForm.toSnakeCase(system.getCursorBlock()), "TLD_AIRPORT_MR")) {             tldAirportMr.getData().add(0, new com.honeywell.coreptdu.datatypes.airport.entity.TldAirportMr());             tldAirportMrPreQuery();         } else if (java.util.Objects.equals(com.honeywell.coreptdu.utils.oracleutils.GenericTemplateForm.toSnakeCase(system.getCursorBlock()), "STD_AIRPORT_MR")) {             stdAirportMr.getData().add(0, new com.honeywell.coreptdu.datatypes.airport.entity.StdAirportMr());             stdAirportMrPreQuery();         }     } else {         system.setCursorRecordIndex(0);         if (java.util.Objects.equals(com.honeywell.coreptdu.utils.oracleutils.GenericTemplateForm.toSnakeCase(system.getCursorBlock()), "PL_STD_AIRPORT_MR")) {             plStdAirportMrPreQuery();         } else if (java.util.Objects.equals(com.honeywell.coreptdu.utils.oracleutils.GenericTemplateForm.toSnakeCase(system.getCursorBlock()), "PL_TLD_AIRPORT_MR")) {             plTldAirportMrPreQuery();         } else if (java.util.Objects.equals(com.honeywell.coreptdu.utils.oracleutils.GenericTemplateForm.toSnakeCase(system.getCursorBlock()), "TLD_AIRPORT_MR")) {             tldAirportMrPreQuery();         } else if (java.util.Objects.equals(com.honeywell.coreptdu.utils.oracleutils.GenericTemplateForm.toSnakeCase(system.getCursorBlock()), "STD_AIRPORT_MR")) {             stdAirportMrPreQuery();         }     }     coreptLib.coreptexecutequery(this);     controlBlock.setChkUnchkAll("N");     global.setNewDcrNo("");     if (!system.getFormStatus().equals("NEW")) {         global.setCreateDcrNumber(toString(nameIn(this, com.honeywell.coreptdu.utils.oracleutils.HoneyWellUtils.toCamelCase(system.getCursorBlock()) + ".createDcrNumber")));     }     com.honeywell.coreptdu.utils.oracleutils.OracleHelpers.ResponseMapper(this, resDto);     log.info(" keyExeqry executed successfully");     return responseObj.render(responseObj.formSuccessResponse(com.honeywell.coreptdu.utils.common.Constants.RECORD_FETCH, resDto)); } catch (java.lang.Exception e) {     if (e instanceof com.honeywell.coreptdu.exception.FormTriggerFailureException) {         if (java.util.Objects.equals(upper(system.getCursorBlock()), "PL_STD_AIRPORT_MR") && (toInteger(plStdAirportMr.getQueryHits()) >= 1)) {             plStdAirportMr.getRow(0).setProcessingCycle(null);             plStdAirportMr.getRow(0).setDataSupplier(null);         } else if (java.util.Objects.equals(upper(system.getCursorBlock()), "PL_TLD_AIRPORT_MR") && (toInteger(plTldAirportMr.getQueryHits()) >= 1)) {             plTldAirportMr.getRow(0).setProcessingCycle(null);             plTldAirportMr.getRow(0).setDataSupplier(null);         } else if (java.util.Objects.equals(upper(system.getCursorBlock()), "TLD_AIRPORT_MR") && (toInteger(tldAirportMr.getQueryHits()) >= 1)) {             tldAirportMr.getRow(0).setDataSupplier(null);         } else if (java.util.Objects.equals(upper(system.getCursorBlock()), "STD_AIRPORT_MR") && (toInteger(stdAirportMr.getQueryHits()) >= 1)) {             stdAirportMr.getRow(0).setDataSupplier(null);         } else if (nameIn(this, system.getCursorBlock() + ".QUERY_WHERE") != null) {             if (nameIn(this, system.getCursorBlock() + ".PROCESSING_CYCLE") != null) {                 copy(this, null, system.getCursorBlock() + ".PROCESSING_CYCLE");             }         }     }     log.error("Error while Executing the keyExeqry Service");     com.honeywell.coreptdu.utils.oracleutils.OracleHelpers.ResponseMapper(this, resDto);     return com.honeywell.coreptdu.exception.ExceptionUtils.handleException(e, resDto); }

API: keyExit(com.honeywell.coreptdu.datatypes.airport.dto.request.AirportTriggerRequestDto)
  log.info(" keyExit Executing")
  com.honeywell.coreptdu.global.dto.BaseResponse<com.honeywell.coreptdu.datatypes.airport.dto.response.AirportTriggerResponseDto> responseObj = new com.honeywell.coreptdu.global.dto.BaseResponse<>()
  com.honeywell.coreptdu.datatypes.airport.dto.response.AirportTriggerResponseDto resDto = new com.honeywell.coreptdu.datatypes.airport.dto.response.AirportTriggerResponseDto()
  try {     com.honeywell.coreptdu.utils.oracleutils.OracleHelpers.bulkClassMapper(reqDto, this);     if (java.util.Objects.equals(system.getMode(), "NORMAL") && (!java.util.Objects.equals(parameter.getWorkType(), "VIEW"))) {         checkToCommit(com.honeywell.coreptdu.global.forms.FormConstant.EXIT);     } else {         exitForm();     }     // if (Objects.equals(system.getFormStatus(), "NORMAL")     // || system.getFormStatus().equals("NEW") && Objects.equals(system.getMode(), "NORMAL")     // || Objects.equals(system.getMode(), "DATA") && !parameter.getWorkType().equals("CHANGED")) {     // exitForm();     // }     com.honeywell.coreptdu.utils.oracleutils.OracleHelpers.ResponseMapper(this, resDto);     log.info(" keyExit executed successfully");     return responseObj.render(responseObj.formSuccessResponse(com.honeywell.coreptdu.utils.common.Constants.RECORD_FETCH, resDto)); } catch (java.lang.Exception e) {     log.error("Error while Executing the keyExit Service");     com.honeywell.coreptdu.utils.oracleutils.OracleHelpers.ResponseMapper(this, resDto);     return com.honeywell.coreptdu.exception.ExceptionUtils.handleException(e, resDto); }

API: mergeDelete()
  if ((plTldAirportMr != null) && (plTldAirportMr.getDeletedRecords().size() > 0)) {     plTldAirportMr.getData().addAll(plTldAirportMr.getDeletedRecords()); }
  if ((plStdAirportMr != null) && (plStdAirportMr.getDeletedRecords().size() > 0)) {     plStdAirportMr.getData().addAll(plStdAirportMr.getDeletedRecords()); }

API: onError(com.honeywell.coreptdu.datatypes.airport.dto.request.AirportTriggerRequestDto)
  log.info(" onError Executing")
  com.honeywell.coreptdu.global.dto.BaseResponse<com.honeywell.coreptdu.datatypes.airport.dto.response.AirportTriggerResponseDto> responseObj = new com.honeywell.coreptdu.global.dto.BaseResponse<>()
  com.honeywell.coreptdu.datatypes.airport.dto.response.AirportTriggerResponseDto resDto = new com.honeywell.coreptdu.datatypes.airport.dto.response.AirportTriggerResponseDto()
  try {     com.honeywell.coreptdu.utils.oracleutils.OracleHelpers.bulkClassMapper(reqDto, this);     java.lang.Integer msgnum = 0;     java.lang.String msgtxt = null;     java.lang.String msgtyp = null;     java.lang.String vBlockName = system.getCursorBlock();     if ((java.util.Objects.equals(msgnum, 40400) || java.util.Objects.equals(msgnum, 40406)) || java.util.Objects.equals(msgnum, 40407)) {         message("changes saved successfully");     } else if ((((java.util.Objects.equals(msgnum, 40100) && (!java.util.Arrays.asList(41051, 40350, 47316, 40353).contains(msgnum))) && (!java.util.Objects.equals(msgnum, 41050))) && (!java.util.Objects.equals(parameter.getWorkType(), "VIEW"))) && (!java.util.Arrays.asList(40401, 40405).contains(msgnum))) {         clearMessage();         message("at the first record.");     } else if (java.util.Objects.equals(msgnum, 40735) && like("%01031%", msgtxt)) {         clearMessage();         coreptLib.dspMsg(msgtxt + " Insufficient privileges. ");     } else if (java.util.Arrays.asList(40508, 40509).contains(msgnum)) {         coreptLib.dspMsg(msgtxt + "Please check the exact error\n    message from the \"Display Error\" in the \"HELP\" menu");     } else if (java.util.Arrays.asList(40200).contains(global.getErrorCode())) {         if (java.util.Objects.equals(parameter.getUpdRec(), "Y")) {             if (!java.util.Objects.equals(parameter.getWorkType(), "VIEW")) {                 if (java.util.Objects.equals(parameter.getRecordType(), "T")) {                     coreptLib.dspActionMsg("U", parameter.getRecordType(), toInteger(nameIn(this, "global.dcr_number")), toInteger(nvl(nameIn(this, vBlockName + ".processing_cycle"), global.getProcessingCycle())), toString(nameIn(this, system.getCursorBlock() + ".CUSTOMER_IDENT")));                 } else {                     coreptLib.dspActionMsg("U", parameter.getRecordType(), toInteger(nameIn(this, "global.dcr_number")), toInteger(nvl(nameIn(this, vBlockName + ".processing_cycle"), global.getProcessingCycle())), null);                 }             } else {                 coreptLib.dspMsg(msgtxt + "Oracle Frm Error.");                 throw new com.honeywell.coreptdu.exception.FormTriggerFailureException();             }         } else {             coreptLib.dspMsg(msgtxt + "Oracle Frm Error.");             throw new com.honeywell.coreptdu.exception.FormTriggerFailureException();         }     } else if (java.util.Objects.equals(msgnum, 41050) && (!java.util.Objects.equals(parameter.getWorkType(), "VIEW"))) {         if (!java.util.Objects.equals(parameter.getUpdRec(), "Y")) {             coreptLib.dspMsg(msgtxt + "Oracle Frm Error.");             throw new com.honeywell.coreptdu.exception.FormTriggerFailureException();         }     } else {         displayAlert.oneButton("S", "Error", (((msgtyp + "-") + msgnum) + ": ") + msgtxt);     }     com.honeywell.coreptdu.utils.oracleutils.OracleHelpers.ResponseMapper(this, resDto);     log.info(" onError executed successfully");     return responseObj.render(responseObj.formSuccessResponse(com.honeywell.coreptdu.utils.common.Constants.RECORD_FETCH, resDto)); } catch (java.lang.Exception e) {     log.error("Error while Executing the onError Service");     com.honeywell.coreptdu.utils.oracleutils.OracleHelpers.ResponseMapper(this, resDto);     return com.honeywell.coreptdu.exception.ExceptionUtils.handleException(e, resDto); }

API: plStdAirportMrPreQuery()
  if (!java.util.Objects.equals(global.getFromErrorSummary(), "Y")) {     plStdAirportMr.getRow(0).setDataSupplier(global.getDataSupplier());     if (java.util.Objects.equals(displayItemBlock.getAllowBothCycles(), "N")) {         plStdAirportMr.getRow(0).setProcessingCycle(global.getProcessingCycle());     } }

API: plStdAirportMrPreQuery(com.honeywell.coreptdu.datatypes.airport.dto.request.AirportTriggerRequestDto)
  log.info(" plStdAirportMrPreQuery Executing")
  com.honeywell.coreptdu.global.dto.BaseResponse<com.honeywell.coreptdu.datatypes.airport.dto.response.AirportTriggerResponseDto> responseObj = new com.honeywell.coreptdu.global.dto.BaseResponse<>()
  com.honeywell.coreptdu.datatypes.airport.dto.response.AirportTriggerResponseDto resDto = new com.honeywell.coreptdu.datatypes.airport.dto.response.AirportTriggerResponseDto()
  try {     com.honeywell.coreptdu.utils.oracleutils.OracleHelpers.bulkClassMapper(reqDto, this);     if (!java.util.Objects.equals(global.getFromErrorSummary(), "Y")) {         plStdAirportMr.getRow(system.getCursorRecordIndex()).setDataSupplier(global.getDataSupplier());         if (java.util.Objects.equals(displayItemBlock.getAllowBothCycles(), "N")) {             plStdAirportMr.getRow(system.getCursorRecordIndex()).setProcessingCycle(global.getProcessingCycle());         }     }     com.honeywell.coreptdu.utils.oracleutils.OracleHelpers.ResponseMapper(this, resDto);     log.info(" plStdAirportMrPreQuery executed successfully");     return responseObj.render(responseObj.formSuccessResponse(com.honeywell.coreptdu.utils.common.Constants.RECORD_FETCH, resDto)); } catch (java.lang.Exception e) {     log.error("Error while Executing the plStdAirportMrPreQuery Service");     com.honeywell.coreptdu.utils.oracleutils.OracleHelpers.ResponseMapper(this, resDto);     return com.honeywell.coreptdu.exception.ExceptionUtils.handleException(e, resDto); }

API: plTldAirportMrChkWhenCheckboxChanged(com.honeywell.coreptdu.datatypes.airport.dto.request.AirportTriggerRequestDto)
  log.info(" plTldAirportMrChkWhenCheckboxChanged Executing")
  com.honeywell.coreptdu.global.dto.BaseResponse<com.honeywell.coreptdu.datatypes.airport.dto.response.AirportTriggerResponseDto> responseObj = new com.honeywell.coreptdu.global.dto.BaseResponse<>()
  com.honeywell.coreptdu.datatypes.airport.dto.response.AirportTriggerResponseDto resDto = new com.honeywell.coreptdu.datatypes.airport.dto.response.AirportTriggerResponseDto()
  try {     com.honeywell.coreptdu.utils.oracleutils.OracleHelpers.bulkClassMapper(reqDto, this);     if (java.util.Objects.equals(plTldAirportMr.getRow(system.getCursorRecordIndex()).getChk(), "Y")) {         parameter.setMultiRecDel(parameter.getMultiRecDel() + 1);     } else if (java.util.Objects.equals(plTldAirportMr.getRow(system.getCursorRecordIndex()).getChk(), com.honeywell.coreptdu.global.forms.FormConstant.N)) {         parameter.setMultiRecDel(parameter.getMultiRecDel() - 1);     }     java.lang.String lsGroup = "newDcr";     com.honeywell.coreptdu.utils.oracleutils.RecordGroup groupId = findGroup(lsGroup);     java.lang.Integer lnRow = getGroupRowCount(groupId);     com.honeywell.coreptdu.utils.oracleutils.RecordGroupColumn colId = com.honeywell.coreptdu.utils.oracleutils.GroupUtils.findColumn(groups, "newDcr.dcrNo");     java.lang.Number colVal = 0;     if (java.util.Objects.equals(plTldAirportMr.getRow(system.getCursorRecordIndex()).getChk(), "Y")) {         addGroupRow(groupId, "end_of_group");         // lnRow = lnRow+1;         setGroupNumberCell(groupId, "dcrNo", lnRow, toInteger(plTldAirportMr.getRow(system.getCursorRecordIndex()).getCreateDcrNumber()));         global.setNewDcrNo(rtrim(ltrim((rtrim(global.getNewDcrNo(), ", ") + ",") + toInteger(plTldAirportMr.getRow(system.getCursorRecordIndex()).getCreateDcrNumber()), ","), ", "));     } else if (java.util.Objects.equals(nvl(plTldAirportMr.getRow(system.getCursorRecordIndex()).getChk(), "N"), "N")) {         for (int i = 0; i < lnRow; i++) {             colVal = getGroupNumberCell(colId, i);             if (java.util.Objects.equals(toInteger(colVal), toInteger(plTldAirportMr.getRow(system.getCursorRecordIndex()).getCreateDcrNumber()))) {                 deleteGroupRow(groupId.getName(), i);                 break;             }         }         deleteDcrNo();     }     com.honeywell.coreptdu.utils.oracleutils.OracleHelpers.ResponseMapper(this, resDto);     log.info(" plTldAirportMrChkWhenCheckboxChanged executed successfully");     return responseObj.render(responseObj.formSuccessResponse(com.honeywell.coreptdu.utils.common.Constants.RECORD_FETCH, resDto)); } catch (java.lang.Exception e) {     log.error("Error while Executing the plTldAirportMrChkWhenCheckboxChanged Service");     com.honeywell.coreptdu.utils.oracleutils.OracleHelpers.ResponseMapper(this, resDto);     return com.honeywell.coreptdu.exception.ExceptionUtils.handleException(e, resDto); }

API: plTldAirportMrCustomerIdentWhenValidateItem(com.honeywell.coreptdu.datatypes.airport.dto.request.AirportTriggerRequestDto)
  log.info(" plTldAirportMrCustomerIdentWhenValidateItem Executing")
  com.honeywell.coreptdu.global.dto.BaseResponse<com.honeywell.coreptdu.datatypes.airport.dto.response.AirportTriggerResponseDto> responseObj = new com.honeywell.coreptdu.global.dto.BaseResponse<>()
  com.honeywell.coreptdu.datatypes.airport.dto.response.AirportTriggerResponseDto resDto = new com.honeywell.coreptdu.datatypes.airport.dto.response.AirportTriggerResponseDto()
  try {     com.honeywell.coreptdu.utils.oracleutils.OracleHelpers.bulkClassMapper(reqDto, this);     java.lang.Integer vFlag = 0;     java.lang.Integer vAllowUpdate = 0;     java.lang.String vBlockName = system.getCursorBlock();     vAllowUpdate = 0;     if (java.util.Arrays.asList("NEW", "INSERT").contains(system.getRecordStatus())) {         if (java.util.Objects.equals(parameter.getRecordType(), "T")) {             if (java.util.Objects.equals(nameIn(this, vBlockName + ".processing_cycle"), null)) {                 vFlag = coreptLib.validateCustomer(toInteger(global.getDcrNumber()), toInteger(global.getProcessingCycle()), global.getDataSupplier(), parameter.getRecordType(), toString(nameIn(this, vBlockName + ".customer_ident")));             } else {                 vFlag = coreptLib.validateCustomer(toInteger(global.getDcrNumber()), toInteger(nameIn(this, vBlockName + ".processing_cycle")), global.getDataSupplier(), parameter.getRecordType(), toString(nameIn(this, vBlockName + ".customer_ident")));             }         } else if (java.util.Objects.equals(nameIn(this, vBlockName + ".processing_cycle"), null)) {             vFlag = coreptLib.validateCustomer(toInteger(global.getDcrNumber()), toInteger(global.getProcessingCycle()), global.getDataSupplier(), parameter.getRecordType(), null);         } else {             vFlag = coreptLib.validateCustomer(toInteger(global.getDcrNumber()), toInteger(nameIn(this, vBlockName + ".processing_cycle")), global.getDataSupplier(), parameter.getRecordType(), null);         }         if (java.util.Arrays.asList("J", "L", "E").contains(global.getDataSupplier())) {             if (java.util.Arrays.asList(6, 4, 3, 2, 1).contains(vFlag)) {                 vAllowUpdate = 1;             } else if (java.util.Objects.equals(vFlag, 0)) {                 if (java.util.Objects.equals(nameIn(this, vBlockName + ".processing_cycle"), null)) {                     coreptLib.dspMsg((("Customer is not associated with DCR# " + global.getDcrNumber()) + " Or\n with processing cycle ") + global.getProcessingCycle());                 } else {                     coreptLib.dspMsg((("Customer is not associated with DCR# " + global.getDcrNumber()) + " Or\n with processing cycle ") + nameIn(this, vBlockName + ".processing_cycle"));                 }                 throw new com.honeywell.coreptdu.exception.FormTriggerFailureException();             }         } else if (java.util.Arrays.asList("Q", "N").contains(global.getDataSupplier())) {             if (java.util.Objects.equals(vFlag, 5)) {                 vAllowUpdate = 1;             }         }         log.info("V Allow Update " + vAllowUpdate);     }     com.honeywell.coreptdu.utils.oracleutils.OracleHelpers.ResponseMapper(this, resDto);     log.info(" plTldAirportMrCustomerIdentWhenValidateItem executed successfully");     return responseObj.render(responseObj.formSuccessResponse(com.honeywell.coreptdu.utils.common.Constants.RECORD_FETCH, resDto)); } catch (java.lang.Exception e) {     log.error("Error while Executing the plTldAirportMrCustomerIdentWhenValidateItem Service");     com.honeywell.coreptdu.utils.oracleutils.OracleHelpers.ResponseMapper(this, resDto);     return com.honeywell.coreptdu.exception.ExceptionUtils.handleException(e, resDto); }

API: plTldAirportMrPreQuery()
  if (!java.util.Objects.equals(global.getFromErrorSummary(), "Y")) {     plTldAirportMr.getRow(0).setDataSupplier(global.getDataSupplier());     if (java.util.Objects.equals(displayItemBlock.getAllowBothCycles(), "N")) {         plTldAirportMr.getRow(0).setProcessingCycle(global.getProcessingCycle());     } }

API: plTldAirportMrPreQuery(com.honeywell.coreptdu.datatypes.airport.dto.request.AirportTriggerRequestDto)
  log.info(" plTldAirportMrPreQuery Executing")
  com.honeywell.coreptdu.global.dto.BaseResponse<com.honeywell.coreptdu.datatypes.airport.dto.response.AirportTriggerResponseDto> responseObj = new com.honeywell.coreptdu.global.dto.BaseResponse<>()
  com.honeywell.coreptdu.datatypes.airport.dto.response.AirportTriggerResponseDto resDto = new com.honeywell.coreptdu.datatypes.airport.dto.response.AirportTriggerResponseDto()
  try {     com.honeywell.coreptdu.utils.oracleutils.OracleHelpers.bulkClassMapper(reqDto, this);     if (!java.util.Objects.equals(global.getFromErrorSummary(), "Y")) {         plTldAirportMr.getRow(system.getCursorRecordIndex()).setDataSupplier(global.getDataSupplier());         if (java.util.Objects.equals(displayItemBlock.getAllowBothCycles(), "N")) {             plTldAirportMr.getRow(system.getCursorRecordIndex()).setProcessingCycle(global.getProcessingCycle());         }     }     com.honeywell.coreptdu.utils.oracleutils.OracleHelpers.ResponseMapper(this, resDto);     log.info(" plTldAirportMrPreQuery executed successfully");     return responseObj.render(responseObj.formSuccessResponse(com.honeywell.coreptdu.utils.common.Constants.RECORD_FETCH, resDto)); } catch (java.lang.Exception e) {     log.error("Error while Executing the plTldAirportMrPreQuery Service");     com.honeywell.coreptdu.utils.oracleutils.OracleHelpers.ResponseMapper(this, resDto);     return com.honeywell.coreptdu.exception.ExceptionUtils.handleException(e, resDto); }

API: plTldAirportMrProcessingCycleWhenValidateItem(com.honeywell.coreptdu.datatypes.airport.dto.request.AirportTriggerRequestDto)
  log.info(" plTldAirportMrProcessingCycleWhenValidateItem Executing")
  com.honeywell.coreptdu.global.dto.BaseResponse<com.honeywell.coreptdu.datatypes.airport.dto.response.AirportTriggerResponseDto> responseObj = new com.honeywell.coreptdu.global.dto.BaseResponse<>()
  com.honeywell.coreptdu.datatypes.airport.dto.response.AirportTriggerResponseDto resDto = new com.honeywell.coreptdu.datatypes.airport.dto.response.AirportTriggerResponseDto()
  try {     com.honeywell.coreptdu.utils.oracleutils.OracleHelpers.bulkClassMapper(reqDto, this);     if (java.util.Objects.equals(plTldAirportMr.getRow(system.getCursorRecordIndex()).getProcessingCycle(), null)) {         plTldAirportMr.getRow(system.getCursorRecordIndex()).setProcessingCycle(global.getProcessingCycle());     }     if (!java.util.Objects.equals(system.getRecordStatus(), "NEW")) {         if (!java.util.Objects.equals(plTldAirportMr.getRow(system.getCursorRecordIndex()).getProcessingCycle(), toString(plTldAirportMr.getRow(system.getCursorRecordIndex()).getOldProcessingCycle()))) {             if (java.util.Objects.equals(refreshMasterLib.checkReferenceInfo("PL_TLD_AIRPORT_MR", "P"), "N")) {                 plTldAirportMr.getRow(system.getCursorRecordIndex()).setProcessingCycle(toString(plTldAirportMr.getRow(system.getCursorRecordIndex()).getOldProcessingCycle()));             }         }     }     plTldAirportMr.getRow(system.getCursorRecordIndex()).setOldProcessingCycle(toInteger(plTldAirportMr.getRow(system.getCursorRecordIndex()).getProcessingCycle()));     com.honeywell.coreptdu.utils.oracleutils.OracleHelpers.ResponseMapper(this, resDto);     log.info("plTldAirportMrProcessingCycleWhenValidateItem executed successfully");     return responseObj.render(responseObj.formSuccessResponse(com.honeywell.coreptdu.utils.common.Constants.RECORD_FETCH, resDto)); } catch (java.lang.Exception e) {     log.error("Error while Executing the plTldAirportMrProcessingCycleWhenValidateItem Service");     com.honeywell.coreptdu.utils.oracleutils.OracleHelpers.ResponseMapper(this, resDto);     return com.honeywell.coreptdu.exception.ExceptionUtils.handleException(e, resDto); }

API: populateRecord(java.lang.String,com.honeywell.coreptdu.global.dbtype.CrAirport)
  log.info("populateRecord Executing")
  try {     if (java.util.Objects.equals(upper(pBlock), "PL_STD_AIRPORT_MR")) {         pRecord.setRecordType(parameter.getRecordType());         pRecord.setAirportElevation(toChar(plStdAirportMr.getRow(system.getCursorRecordIndex()).getAirportElevation()));         pRecord.setAirportIcao(plStdAirportMr.getRow(system.getCursorRecordIndex()).getAirportIcao());         pRecord.setAirportIdent(plStdAirportMr.getRow(system.getCursorRecordIndex()).getAirportIdent());         pRecord.setAirportName(plStdAirportMr.getRow(system.getCursorRecordIndex()).getAirportName());         pRecord.setAptRefPtLatitude(plStdAirportMr.getRow(system.getCursorRecordIndex()).getAptRefPtLatitude());         pRecord.setAptRefPtLongitude(plStdAirportMr.getRow(system.getCursorRecordIndex()).getAptRefPtLongitude());         pRecord.setCustAreaCode(plStdAirportMr.getRow(system.getCursorRecordIndex()).getAreaCode());         pRecord.setAtaIataDesignator(rpad(nvl(plStdAirportMr.getRow(system.getCursorRecordIndex()).getAtaIataDesignator(), ' '), 3));         pRecord.setCycleData(plStdAirportMr.getRow(system.getCursorRecordIndex()).getCycleData());         pRecord.setDatumCode(rpad(nvl(plStdAirportMr.getRow(system.getCursorRecordIndex()).getDatumCode(), " "), 3));         pRecord.setDaylightInd(nvl(plStdAirportMr.getRow(system.getCursorRecordIndex()).getDaylightInd(), " "));         pRecord.setFileRecno(lpad(toChar(plStdAirportMr.getRow(system.getCursorRecordIndex()).getFileRecno()), 5, '0'));         pRecord.setIfrCapability(nvl(plStdAirportMr.getRow(system.getCursorRecordIndex()).getIfrCapability(), " "));         pRecord.setLongestRunway(nvl(lpad(toChar(plStdAirportMr.getRow(system.getCursorRecordIndex()).getLongestRunway()), 3, '0'), "   "));         pRecord.setLongestRunwaySurfaceCode(nvl(plStdAirportMr.getRow(system.getCursorRecordIndex()).getLongestRunwaySurfaceCode(), " "));         pRecord.setMagneticTrueInd(nvl(plStdAirportMr.getRow(system.getCursorRecordIndex()).getMagneticTrueInd(), " "));         pRecord.setMagneticVariation(rpad(nvl(plStdAirportMr.getRow(system.getCursorRecordIndex()).getMagneticVariation(), " "), 5));         pRecord.setPublicMilitaryInd(nvl(plStdAirportMr.getRow(system.getCursorRecordIndex()).getPublicMilitaryInd(), " "));         pRecord.setRecommendedNavaidIcaoCode(plStdAirportMr.getRow(system.getCursorRecordIndex()).getRecommendedNavaidIcaoCode());         pRecord.setRecommendedNavaidIdent(plStdAirportMr.getRow(system.getCursorRecordIndex()).getRecommendedNavaidIdent());         pRecord.setSpeedLimit(nvl(lpad(toChar(plStdAirportMr.getRow(system.getCursorRecordIndex()).getSpeedLimit()), 3, '0'), "   "));         pRecord.setSpeedLimitAltitude(rpad(nvl(plStdAirportMr.getRow(system.getCursorRecordIndex()).getSpeedLimitAltitude(), " "), 5));         pRecord.setTimeZone(rpad(nvl(plStdAirportMr.getRow(system.getCursorRecordIndex()).getTimeZone(), " "), 3));         pRecord.setTransitionAltitude(nvl(lpad(toChar(plStdAirportMr.getRow(system.getCursorRecordIndex()).getTransitionAltitude()), 5, '0'), "     "));         pRecord.setTransitionLevel(nvl(lpad(toChar(plStdAirportMr.getRow(system.getCursorRecordIndex()).getTransitionLevel()), 5, '0'), "     "));         pRecord.setCtldArspInd(nvl(plStdAirportMr.getRow(system.getCursorRecordIndex()).getCtldArspInd(), " "));     } else if (java.util.Objects.equals(upper(pBlock), "PL_TLD_AIRPORT_MR")) {         pRecord.setRecordType(parameter.getRecordType());         pRecord.setAirportElevation(toChar(plTldAirportMr.getRow(system.getCursorRecordIndex()).getAirportElevation()));         pRecord.setAirportIcao(plTldAirportMr.getRow(system.getCursorRecordIndex()).getAirportIcao());         pRecord.setAirportIdent(plTldAirportMr.getRow(system.getCursorRecordIndex()).getAirportIdent());         pRecord.setAirportName(plTldAirportMr.getRow(system.getCursorRecordIndex()).getAirportName());         pRecord.setAptRefPtLatitude(plTldAirportMr.getRow(system.getCursorRecordIndex()).getAptRefPtLatitude());         pRecord.setAptRefPtLongitude(plTldAirportMr.getRow(system.getCursorRecordIndex()).getAptRefPtLongitude());         pRecord.setCustAreaCode(plTldAirportMr.getRow(system.getCursorRecordIndex()).getCustomerIdent());         pRecord.setAtaIataDesignator(rpad(nvl(plTldAirportMr.getRow(system.getCursorRecordIndex()).getAtaIataDesignator(), " "), 3));         pRecord.setCycleData(plTldAirportMr.getRow(system.getCursorRecordIndex()).getCycleData());         pRecord.setDatumCode(rpad(nvl(plTldAirportMr.getRow(system.getCursorRecordIndex()).getDatumCode(), " "), 3));         pRecord.setDaylightInd(nvl(plTldAirportMr.getRow(system.getCursorRecordIndex()).getDaylightInd(), " "));         pRecord.setFileRecno(lpad(toChar(plTldAirportMr.getRow(system.getCursorRecordIndex()).getFileRecno()), 5, '0'));         pRecord.setIfrCapability(nvl(plTldAirportMr.getRow(system.getCursorRecordIndex()).getIfrCapability(), " "));         pRecord.setLongestRunway(nvl(lpad(toChar(plTldAirportMr.getRow(system.getCursorRecordIndex()).getLongestRunway()), 3, '0'), "   "));         pRecord.setLongestRunwaySurfaceCode(nvl(plTldAirportMr.getRow(system.getCursorRecordIndex()).getLongestRunwaySurfaceCode(), " "));         pRecord.setMagneticTrueInd(nvl(plTldAirportMr.getRow(system.getCursorRecordIndex()).getMagneticTrueInd(), " "));         pRecord.setMagneticVariation(rpad(nvl(plTldAirportMr.getRow(system.getCursorRecordIndex()).getMagneticVariation(), " "), 5));         pRecord.setPublicMilitaryInd(nvl(plTldAirportMr.getRow(system.getCursorRecordIndex()).getPublicMilitaryInd(), " "));         pRecord.setRecommendedNavaidIcaoCode(plTldAirportMr.getRow(system.getCursorRecordIndex()).getRecommendedNavaidIcaoCode());         pRecord.setRecommendedNavaidIdent(plTldAirportMr.getRow(system.getCursorRecordIndex()).getRecommendedNavaidIdent());         pRecord.setSpeedLimit(nvl(lpad(toChar(plTldAirportMr.getRow(system.getCursorRecordIndex()).getSpeedLimit()), 3, '0'), "   "));         pRecord.setSpeedLimitAltitude(rpad(nvl(plTldAirportMr.getRow(system.getCursorRecordIndex()).getSpeedLimitAltitude(), " "), 5));         pRecord.setTimeZone(rpad(nvl(plTldAirportMr.getRow(system.getCursorRecordIndex()).getTimeZone(), " "), 3));         pRecord.setTransitionAltitude(nvl(lpad(toChar(plTldAirportMr.getRow(system.getCursorRecordIndex()).getTransitionAltitude()), 5, '0'), "     "));         pRecord.setTransitionLevel(nvl(lpad(toChar(plTldAirportMr.getRow(system.getCursorRecordIndex()).getTransitionLevel()), 5, '0'), "     "));         pRecord.setCtldArspInd(nvl(plTldAirportMr.getRow(system.getCursorRecordIndex()).getCtldArspInd(), " "));     }     log.info("populateRecord Executed Successfully"); } catch (java.lang.Exception e) {     log.error("Error while executing populateRecord" + e.getMessage());     throw e; }
  return pRecord

API: populateRelRecord(java.lang.String,com.honeywell.coreptdu.global.dbtype.PlStdAirportType,com.honeywell.coreptdu.global.dbtype.PlTldAirportType)
  log.info("populateRelRecord Executing")
  try {     // if (Objects.equals(upper(pBlock), "PL_STD_AIRPORT_SR")) {     // pSrec.setRecommendedNavaidIdent(plStdAirportSr.getRecommendedNavaidIdent());     // pSrec.setRecommendedNavaidIcaoCode(plStdAirportSr.getRecommendedNavaidIcaoCode());     // pSrec.setValidateInd(plStdAirportSr.getValidateInd());     // if (Objects.equals(toInteger(global.getRecentCycle()), plStdAirportSr.getProcessingCycle())) {     // pSrec.setProcessingCycle(plStdAirportSr.getProcessingCycle());     //      // } else {     // pSrec.setProcessingCycle(toInteger(global.getRecentCycle()));     //      // }     // pSrec.setDataSupplier(plStdAirportSr.getDataSupplier());     // pSrec.setCreateDcrNumber(plStdAirportSr.getCreateDcrNumber());     // pSrec.setAirportIdent(plStdAirportSr.getAirportIdent());     // pSrec.setAirportIcao(plStdAirportSr.getAirportIcao());     // pSrec.setPublicMilitaryInd(plStdAirportSr.getPublicMilitaryInd());     //      // } else     if (java.util.Objects.equals(upper(pBlock), "PL_STD_AIRPORT_MR")) {         pSrec.setRecommendedNavaidIdent(plStdAirportMr.getRow(system.getCursorRecordIndex()).getRecommendedNavaidIdent());         pSrec.setRecommendedNavaidIcaoCode(plStdAirportMr.getRow(system.getCursorRecordIndex()).getRecommendedNavaidIcaoCode());         pSrec.setValidateInd(plStdAirportMr.getRow(system.getCursorRecordIndex()).getValidateInd());         if (java.util.Objects.equals(toInteger(global.getRecentCycle()), toInteger(plStdAirportMr.getRow(system.getCursorRecordIndex()).getProcessingCycle()))) {             pSrec.setProcessingCycle(toInteger(plStdAirportMr.getRow(system.getCursorRecordIndex()).getProcessingCycle()));         } else {             pSrec.setProcessingCycle(toInteger(global.getRecentCycle()));         }         pSrec.setDataSupplier(plStdAirportMr.getRow(system.getCursorRecordIndex()).getDataSupplier());         pSrec.setCreateDcrNumber(toInteger(plStdAirportMr.getRow(system.getCursorRecordIndex()).getCreateDcrNumber()));         pSrec.setAirportIdent(plStdAirportMr.getRow(system.getCursorRecordIndex()).getAirportIdent());         pSrec.setAirportIcao(plStdAirportMr.getRow(system.getCursorRecordIndex()).getAirportIcao());         pSrec.setPublicMilitaryInd(plStdAirportMr.getRow(system.getCursorRecordIndex()).getPublicMilitaryInd());     } else if (java.util.Objects.equals(upper(pBlock), "PL_TLD_AIRPORT_MR")) {         pTrec.setRecommendedNavaidIdent(plTldAirportMr.getRow(system.getCursorRecordIndex()).getRecommendedNavaidIdent());         pTrec.setRecommendedNavaidIcaoCode(plTldAirportMr.getRow(system.getCursorRecordIndex()).getRecommendedNavaidIcaoCode());         pTrec.setValidateInd(plTldAirportMr.getRow(system.getCursorRecordIndex()).getValidateInd());         pTrec.setCustomerIdent(plTldAirportMr.getRow(system.getCursorRecordIndex()).getCustomerIdent());         pTrec.setDataSupplier(plTldAirportMr.getRow(system.getCursorRecordIndex()).getDataSupplier());         pTrec.setGeneratedInHouseFlag(plTldAirportMr.getRow(system.getCursorRecordIndex()).getGeneratedInHouseFlag());         pTrec.setProcessingCycle(toInteger(plTldAirportMr.getRow(system.getCursorRecordIndex()).getProcessingCycle()));         pTrec.setCreateDcrNumber(null);         pTrec.setAirportIdent(plTldAirportMr.getRow(system.getCursorRecordIndex()).getAirportIdent());         pTrec.setAirportIcao(plTldAirportMr.getRow(system.getCursorRecordIndex()).getAirportIcao());         pTrec.setPublicMilitaryInd(plTldAirportMr.getRow(system.getCursorRecordIndex()).getPublicMilitaryInd());     }     log.info("populateRelRecord Executed Successfully"); } catch (java.lang.Exception e) {     log.error("Error while executing populateRelRecord" + e.getMessage());     throw e; }
  return new com.honeywell.coreptdu.datatypes.airport.serviceimpl.InnerAirportTriggerServiceImpl(pSrec, pTrec)

API: preInsert()
  log.info(" preInsert Executing")
  java.lang.String query = ""
  com.honeywell.coreptdu.utils.oracleutils.Record rec = null
  try {     java.lang.String vValidateInd = null;     java.lang.Integer vDcrNumber = 0;     java.lang.Integer vProcessingCycle = 0;     java.lang.String vBlockName = com.honeywell.coreptdu.utils.oracleutils.GenericTemplateForm.toSnakeCase(system.getCursorBlock());     java.lang.Integer vAllowUpdate = 0;     // coreptLib.checkwildcardforkeys(vBlockName);     coreptLib.checkwildcardforkeys(vBlockName);     if (java.util.Arrays.asList("CHANGED", "INSERT").contains(system.getRecordStatus())) {         if (java.util.Objects.equals(parameter.getRecordType(), "T")) {             if (java.util.Objects.equals(nameIn(this, vBlockName + ".processing_cycle"), null)) {                 vAllowUpdate = coreptLib.checkValidSuppCust(toInteger(global.getProcessingCycle()), toInteger(global.getProcessingCycle()), toInteger(global.getDcrNumber()), global.getDataSupplier(), parameter.getRecordType(), toString(nameIn(this, vBlockName + ".customer_ident")));             } else {                 vAllowUpdate = coreptLib.checkValidSuppCust(toInteger(nameIn(this, vBlockName + ".processing_cycle")), toInteger(global.getProcessingCycle()), toInteger(global.getDcrNumber()), global.getDataSupplier(), parameter.getRecordType(), toString(nameIn(this, vBlockName + ".customer_ident")));             }         } else if (java.util.Objects.equals(nameIn(this, vBlockName + ".processing_cycle"), null)) {             vAllowUpdate = coreptLib.checkValidSuppCust(toInteger(global.getProcessingCycle()), toInteger(global.getProcessingCycle()), toInteger(global.getDcrNumber()), global.getDataSupplier(), parameter.getRecordType(), null);         } else {             vAllowUpdate = coreptLib.checkValidSuppCust(toInteger(nameIn(this, vBlockName + ".processing_cycle")), toInteger(global.getProcessingCycle()), toInteger(global.getDcrNumber()), global.getDataSupplier(), parameter.getRecordType(), null);         }     }     if (java.util.Objects.equals(vAllowUpdate, 1)) {         copy(global.getDataSupplier(), vBlockName + ".data_supplier");         copy(0, vBlockName + ".file_recno");         query = """         select dcr_number_seq.nextval from dual         """;         rec = app.selectInto(query);         vDcrNumber = rec.getInt();         copy(vDcrNumber, vBlockName + ".create_dcr_number");         doValidate(vBlockName, com.honeywell.coreptdu.global.forms.FormConstant.N);         vValidateInd = toString(nameIn(this, vBlockName + ".validate_ind"));         vProcessingCycle = toInteger(nvl(nameIn(this, vBlockName + ".processing_cycle"), global.getProcessingCycle()));         if ((java.util.Objects.equals(global.getLibRefreshed(), "Y") && java.util.Arrays.asList(global.getNewProcessingCycle(), global.getOldProcessingCycle()).contains(toString(vProcessingCycle))) && java.util.Arrays.asList("Y", "S", "H", "O").contains(vValidateInd)) {             refreshMasterLib.setRecordGroup(vDcrNumber, vValidateInd, vBlockName, vProcessingCycle, com.honeywell.coreptdu.global.forms.FormConstant.I);         }     } else if (java.util.Objects.equals(parameter.getRecordType(), "T")) {         coreptLib.dspActionMsg(com.honeywell.coreptdu.global.forms.FormConstant.I, parameter.getRecordType(), toInteger(nameIn(this, "global.dcr_number")), toInteger(nvl(nameIn(this, vBlockName + ".processing_cycle"), global.getProcessingCycle())), toString(nameIn(this, system.getCursorBlock() + ".CUSTOMER_IDENT")));     } else {         coreptLib.dspActionMsg(com.honeywell.coreptdu.global.forms.FormConstant.I, parameter.getRecordType(), toInteger(nameIn(this, "global.dcr_number")), toInteger(nvl(nameIn(this, vBlockName + ".processing_cycle"), global.getProcessingCycle())), null);     }     log.info(" preInsert executed successfully"); } catch (java.lang.Exception e) {     log.error("Error while Executing the preInsert Service");     throw e; }

API: preUpdate()
  log.info(" preUpdate Executing")
  try {     java.lang.String vBlockName = system.getCursorBlock();     java.lang.Integer vDcrNumber = toInteger(nameIn(this, vBlockName + ".create_dcr_number"));     java.lang.Integer vProcessingCycle = toInteger(nameIn(this, vBlockName + ".processing_cycle"));     java.lang.String vTable = getBlockProperty(vBlockName, "Query_Data_Source_Name");     java.lang.String vValidateIndNew = null;     java.lang.String vValidateIndOld = null;     java.lang.String query = """      select refresh_ml_utilities.get_validate_ind(?,?) from dual     """;     com.honeywell.coreptdu.utils.oracleutils.Record rec = app.selectInto(query, vTable, vDcrNumber);     vValidateIndOld = rec.getString();     if (java.util.Arrays.asList("Y", "S", "H", "O").contains(vValidateIndOld)) {         refreshMasterLib.deleteFromRefTable(vDcrNumber, null);     }     doValidate(vBlockName, com.honeywell.coreptdu.global.forms.FormConstant.N);     vValidateIndNew = toString(nameIn(this, vBlockName + ".validate_ind"));     if (java.util.Arrays.asList("Y", "S", "H", "O").contains(vValidateIndOld) && java.util.Arrays.asList("W", "N", "I").contains(vValidateIndNew)) {         if (java.util.Objects.equals(refreshMasterLib.checkReferenceInfo(vBlockName, null), "N")) {             throw new com.honeywell.coreptdu.exception.FormTriggerFailureException();         }     }     if (java.util.Objects.equals(global.getLibRefreshed(), "Y") && java.util.Arrays.asList(global.getNewProcessingCycle(), global.getOldProcessingCycle()).contains(toString(vProcessingCycle))) {         if (java.util.Arrays.asList("Y", "S", "H", "O").contains(vValidateIndNew) || java.util.Arrays.asList("Y", "S", "H", "O").contains(vValidateIndOld)) {             refreshMasterLib.setRecordGroup(vDcrNumber, vValidateIndNew, vBlockName, vProcessingCycle, "U");         }     }     log.info(" preUpdate executed successfully"); } catch (java.lang.Exception e) {     log.error("Error while Executing the preUpdate Service");     throw e; }

API: setUpdateDcr(java.lang.String,com.honeywell.coreptdu.global.dbtype.CrAirport)
  log.info("setUpdateDcr Executing")
  java.lang.String query = ""
  try {     com.honeywell.coreptdu.global.dbtype.PlTldAirportType rtldAirport = null;     com.honeywell.coreptdu.global.dbtype.PlStdAirportType rstdAirport = null;     java.lang.Integer vDcr = toInteger(nameIn(this, pBlock + ".create_dcr_number"));     java.lang.String vCycleData = substr(toString(nameIn(this, pBlock + ".processing_cycle")), 3);     java.lang.Integer vCount = 0;     java.util.List<com.honeywell.coreptdu.utils.oracleutils.Record> recs = null;     if (com.honeywell.coreptdu.utils.oracleutils.OracleHelpers.sqlLike(pBlock, "PL_STD%")) {         query = "select * from pl_std_airport where create_dcr_number=?";         recs = app.executeQuery(query, vDcr);         for (com.honeywell.coreptdu.utils.oracleutils.Record rc : recs) {             rstdAirport = app.mapResultSetToClass(rc, com.honeywell.coreptdu.global.dbtype.PlStdAirportType.class);             vCount = vCount + 1;             if ((((((((((((((((((((((!java.util.Objects.equals(nvl(pRecord.getAirportElevation(), 0), nvl(rstdAirport.getAirportElevation(), 0))) || (!java.util.Objects.equals(nvl(pRecord.getAirportName(), " "), nvl(rstdAirport.getAirportName(), " ")))) || (!java.util.Objects.equals(nvl(pRecord.getAptRefPtLatitude(), " "), nvl(rstdAirport.getAptRefPtLatitude(), " ")))) || (!java.util.Objects.equals(nvl(pRecord.getAptRefPtLongitude(), " "), nvl(rstdAirport.getAptRefPtLongitude(), " ")))) || (!java.util.Objects.equals(nvl(pRecord.getCustAreaCode(), " "), nvl(rstdAirport.getAreaCode(), " ")))) || (!java.util.Objects.equals(pRecord.getAtaIataDesignator(), rpad(nvl(rstdAirport.getAtaIataDesignator(), " "), 3)))) || (!java.util.Objects.equals(pRecord.getDatumCode(), rpad(nvl(rstdAirport.getDatumCode(), " "), 3)))) || (!java.util.Objects.equals(pRecord.getDaylightInd(), nvl(rstdAirport.getDaylightInd(), " ")))) || (!java.util.Objects.equals(pRecord.getCtldArspInd(), nvl(rstdAirport.getCtldArspInd(), " ")))) || (!java.util.Objects.equals(pRecord.getIfrCapability(), nvl(rstdAirport.getIfrCapability(), " ")))) || (!java.util.Objects.equals(pRecord.getLongestRunway(), nvl(lpad(toChar(rstdAirport.getLongestRunway()), 3, '0'), " ")))) || (!java.util.Objects.equals(pRecord.getLongestRunwaySurfaceCode(), nvl(rstdAirport.getLongestRunwaySurfaceCode(), " ")))) || (!java.util.Objects.equals(pRecord.getMagneticTrueInd(), nvl(rstdAirport.getMagneticTrueInd(), " ")))) || (!java.util.Objects.equals(pRecord.getMagneticVariation(), rpad(nvl(rstdAirport.getMagneticVariation(), " "), 5)))) || (!java.util.Objects.equals(pRecord.getPublicMilitaryInd(), nvl(rstdAirport.getPublicMilitaryInd(), " ")))) || (!java.util.Objects.equals(nvl(pRecord.getRecommendedNavaidIcaoCode(), " "), nvl(rstdAirport.getRecommendedNavaidIcaoCode(), " ")))) || (!java.util.Objects.equals(nvl(pRecord.getRecommendedNavaidIdent(), " "), nvl(rstdAirport.getRecommendedNavaidIdent(), " ")))) || (!java.util.Objects.equals(pRecord.getSpeedLimit(), nvl(lpad(toChar(rstdAirport.getSpeedLimit()), 3, '0'), " ")))) || (!java.util.Objects.equals(pRecord.getSpeedLimitAltitude(), rpad(nvl(rstdAirport.getSpeedLimitAltitude(), " "), 5)))) || (!java.util.Objects.equals(pRecord.getTimeZone(), rpad(nvl(rstdAirport.getTimeZone(), " "), 3)))) || (!java.util.Objects.equals(pRecord.getTransitionAltitude(), nvl(lpad(toChar(rstdAirport.getTransitionAltitude()), 5, '0'), " ")))) || (!java.util.Objects.equals(pRecord.getTransitionLevel(), nvl(lpad(toChar(rstdAirport.getTransitionLevel()), 5, '0'), " ")))) {                 copy(toInteger(global.getDcrNumber()), pBlock + ".update_dcr_number");                 copy(vCycleData, pBlock + ".cycle_data");             }         }     } else if (like(pBlock, "PL_TLD%")) {         query = "select * from pl_tld_airport where create_dcr_number=?";         recs = app.executeQuery(query, vDcr);         for (com.honeywell.coreptdu.utils.oracleutils.Record rc : recs) {             rtldAirport = app.mapResultSetToClass(rc, com.honeywell.coreptdu.global.dbtype.PlTldAirportType.class);             vCount = vCount + 1;             if (((((((((((((((((((((!java.util.Objects.equals(nvl(pRecord.getAirportElevation(), 0), nvl(rtldAirport.getAirportElevation(), 0))) || (!java.util.Objects.equals(nvl(pRecord.getAirportName(), " "), nvl(rtldAirport.getAirportName(), " ")))) || (!java.util.Objects.equals(nvl(pRecord.getAptRefPtLatitude(), " "), nvl(rtldAirport.getAptRefPtLatitude(), " ")))) || (!java.util.Objects.equals(nvl(pRecord.getAptRefPtLatitude(), " "), nvl(rtldAirport.getAptRefPtLongitude(), " ")))) || (!java.util.Objects.equals(pRecord.getAptRefPtLongitude(), rpad(nvl(rtldAirport.getAtaIataDesignator(), " "), 3)))) || (!java.util.Objects.equals(pRecord.getDatumCode(), rpad(nvl(rtldAirport.getDatumCode(), " "), 3)))) || (!java.util.Objects.equals(pRecord.getDaylightInd(), nvl(rtldAirport.getDaylightInd(), " ")))) || (!java.util.Objects.equals(pRecord.getCtldArspInd(), nvl(rtldAirport.getCtldArspInd(), " ")))) || (!java.util.Objects.equals(pRecord.getIfrCapability(), nvl(rtldAirport.getIfrCapability(), " ")))) || (!java.util.Objects.equals(pRecord.getLongestRunway(), nvl(lpad(toChar(rtldAirport.getLongestRunway()), 3, '0'), " ")))) || (!java.util.Objects.equals(pRecord.getLongestRunwaySurfaceCode(), nvl(rtldAirport.getLongestRunwaySurfaceCode(), " ")))) || (!java.util.Objects.equals(pRecord.getMagneticTrueInd(), nvl(rtldAirport.getMagneticTrueInd(), " ")))) || (!java.util.Objects.equals(pRecord.getMagneticVariation(), rpad(nvl(rtldAirport.getMagneticVariation(), " "), 5)))) || (!java.util.Objects.equals(pRecord.getPublicMilitaryInd(), nvl(rtldAirport.getPublicMilitaryInd(), " ")))) || (!java.util.Objects.equals(nvl(pRecord.getRecommendedNavaidIcaoCode(), " "), nvl(rtldAirport.getRecommendedNavaidIcaoCode(), " ")))) || (!java.util.Objects.equals(nvl(pRecord.getRecommendedNavaidIcaoCode(), " "), nvl(rtldAirport.getRecommendedNavaidIdent(), " ")))) || (!java.util.Objects.equals(pRecord.getSpeedLimit(), nvl(lpad(toChar(rtldAirport.getSpeedLimit()), 3, '0'), " ")))) || (!java.util.Objects.equals(pRecord.getSpeedLimitAltitude(), rpad(nvl(rtldAirport.getSpeedLimitAltitude(), " "), 5)))) || (!java.util.Objects.equals(pRecord.getTimeZone(), rpad(nvl(rtldAirport.getTimeZone(), " "), 3)))) || (!java.util.Objects.equals(pRecord.getTransitionAltitude(), nvl(lpad(toChar(rtldAirport.getTransitionAltitude()), 5, '0'), " ")))) || (!java.util.Objects.equals(pRecord.getTransitionLevel(), nvl(lpad(toChar(rtldAirport.getTransitionLevel()), 5, '0'), " ")))) {                 copy(toInteger(global.getDcrNumber()), pBlock + ".update_dcr_number");                 copy(vCycleData, pBlock + ".cycle_data");             }         }     }     if (java.util.Objects.equals(vCount, 0)) {         copy(toInteger(global.getDcrNumber()), pBlock + ".update_dcr_number");         copy(vCycleData, pBlock + ".cycle_data");     }     log.info("setUpdateDcr Executed Successfully"); } catch (java.lang.Exception e) {     log.error("Error while executing setUpdateDcr" + e.getMessage());     throw e; }

API: stdAirportMrPreQuery()
  stdAirportMr.getRow(system.getCursorRecordIndex()).setDataSupplier(global.getDataSupplier())

API: stdAirportMrPreQuery(com.honeywell.coreptdu.datatypes.airport.dto.request.AirportTriggerRequestDto)
  log.info(" stdAirportMrPreQuery Executing")
  com.honeywell.coreptdu.global.dto.BaseResponse<com.honeywell.coreptdu.datatypes.airport.dto.response.AirportTriggerResponseDto> responseObj = new com.honeywell.coreptdu.global.dto.BaseResponse<>()
  com.honeywell.coreptdu.datatypes.airport.dto.response.AirportTriggerResponseDto resDto = new com.honeywell.coreptdu.datatypes.airport.dto.response.AirportTriggerResponseDto()
  try {     com.honeywell.coreptdu.utils.oracleutils.OracleHelpers.bulkClassMapper(reqDto, this);     stdAirportMr.getRow(system.getCursorRecordIndex()).setDataSupplier(global.getDataSupplier());     com.honeywell.coreptdu.utils.oracleutils.OracleHelpers.ResponseMapper(this, resDto);     log.info(" stdAirportMrPreQuery executed successfully");     return responseObj.render(responseObj.formSuccessResponse(com.honeywell.coreptdu.utils.common.Constants.RECORD_FETCH, resDto)); } catch (java.lang.Exception e) {     log.error("Error while Executing the stdAirportMrPreQuery Service");     com.honeywell.coreptdu.utils.oracleutils.OracleHelpers.ResponseMapper(this, resDto);     return com.honeywell.coreptdu.exception.ExceptionUtils.handleException(e, resDto); }

API: tldAirportMrPreQuery()
  tldAirportMr.getRow(system.getCursorRecordIndex()).setDataSupplier(global.getDataSupplier())

API: tldAirportMrPreQuery(com.honeywell.coreptdu.datatypes.airport.dto.request.AirportTriggerRequestDto)
  log.info(" tldAirportMrPreQuery Executing")
  com.honeywell.coreptdu.global.dto.BaseResponse<com.honeywell.coreptdu.datatypes.airport.dto.response.AirportTriggerResponseDto> responseObj = new com.honeywell.coreptdu.global.dto.BaseResponse<>()
  com.honeywell.coreptdu.datatypes.airport.dto.response.AirportTriggerResponseDto resDto = new com.honeywell.coreptdu.datatypes.airport.dto.response.AirportTriggerResponseDto()
  try {     com.honeywell.coreptdu.utils.oracleutils.OracleHelpers.bulkClassMapper(reqDto, this);     tldAirportMr.getRow(system.getCursorRecordIndex()).setDataSupplier(global.getDataSupplier());     com.honeywell.coreptdu.utils.oracleutils.OracleHelpers.ResponseMapper(this, resDto);     log.info(" tldAirportMrPreQuery executed successfully");     return responseObj.render(responseObj.formSuccessResponse(com.honeywell.coreptdu.utils.common.Constants.RECORD_FETCH, resDto)); } catch (java.lang.Exception e) {     log.error("Error while Executing the tldAirportMrPreQuery Service");     com.honeywell.coreptdu.utils.oracleutils.OracleHelpers.ResponseMapper(this, resDto);     return com.honeywell.coreptdu.exception.ExceptionUtils.handleException(e, resDto); }

API: toolsDuplicate(com.honeywell.coreptdu.datatypes.airport.dto.request.AirportTriggerRequestDto)
  log.info(" whenValidateRecord Executing")
  com.honeywell.coreptdu.global.dto.BaseResponse<com.honeywell.coreptdu.datatypes.airport.dto.response.AirportTriggerResponseDto> responseObj = new com.honeywell.coreptdu.global.dto.BaseResponse<>()
  com.honeywell.coreptdu.datatypes.airport.dto.response.AirportTriggerResponseDto resDto = new com.honeywell.coreptdu.datatypes.airport.dto.response.AirportTriggerResponseDto()
  try {     com.honeywell.coreptdu.utils.oracleutils.OracleHelpers.bulkClassMapper(reqDto, this);     com.honeywell.coreptdu.utils.oracleutils.OracleHelpers.bulkClassMapper(this, coreptMenuMmbServiceImpl);     coreptMenuMmbServiceImpl.toolsDuplicate(this);     com.honeywell.coreptdu.utils.oracleutils.OracleHelpers.ResponseMapper(this, resDto);     log.info(" displayItemBlockRefreshButtonWhenButtonPressed executed successfully");     return responseObj.render(responseObj.formSuccessResponse(com.honeywell.coreptdu.utils.common.Constants.RECORD_FETCH, resDto)); } catch (java.lang.Exception e) {     log.error("Error while Executing the displayItemBlockRefreshButtonWhenButtonPressed Service");     com.honeywell.coreptdu.utils.oracleutils.OracleHelpers.ResponseMapper(this, resDto);     return com.honeywell.coreptdu.exception.ExceptionUtils.handleException(e, resDto); }

API: toolsExportDestination(com.honeywell.coreptdu.datatypes.airport.dto.request.AirportTriggerRequestDto)
  log.info(" whenValidateRecord Executing")
  com.honeywell.coreptdu.global.dto.BaseResponse<com.honeywell.coreptdu.datatypes.airport.dto.response.AirportTriggerResponseDto> responseObj = new com.honeywell.coreptdu.global.dto.BaseResponse<>()
  com.honeywell.coreptdu.datatypes.airport.dto.response.AirportTriggerResponseDto resDto = new com.honeywell.coreptdu.datatypes.airport.dto.response.AirportTriggerResponseDto()
  try {     com.honeywell.coreptdu.utils.oracleutils.OracleHelpers.bulkClassMapper(reqDto, this);     com.honeywell.coreptdu.utils.oracleutils.OracleHelpers.bulkClassMapper(this, coreptMenuMmbServiceImpl);     coreptMenuMmbServiceImpl.toolsExportFormData(this);     com.honeywell.coreptdu.utils.oracleutils.OracleHelpers.ResponseMapper(this, resDto);     log.info(" displayItemBlockRefreshButtonWhenButtonPressed executed successfully");     return responseObj.render(responseObj.formSuccessResponse(com.honeywell.coreptdu.utils.common.Constants.RECORD_FETCH, resDto)); } catch (java.lang.Exception e) {     log.error("Error while Executing the displayItemBlockRefreshButtonWhenButtonPressed Service");     com.honeywell.coreptdu.utils.oracleutils.OracleHelpers.ResponseMapper(this, resDto);     return com.honeywell.coreptdu.exception.ExceptionUtils.handleException(e, resDto); }

API: updateAppInstance()
  super.app = this.app
  super.baseInstance = this
  super.groups = this.groups
  super.genericNativeQueryHelper = this.genericNativeQueryHelper
  super.event = this.event
  super.parameter = this.parameter
  super.displayAlert = this.displayAlert
  super.alertDetails = this.alertDetails
  super.system = this.system
  super.global = this.global
  super.blocksOrder = this.blocksOrder
  super.windows = this.windows
  com.honeywell.coreptdu.utils.oracleutils.OracleHelpers.bulkClassMapper(this, displayAlert)
  com.honeywell.coreptdu.utils.oracleutils.OracleHelpers.bulkClassMapper(this, coreptLib)
  coreptLib.initialization(this)
  com.honeywell.coreptdu.utils.oracleutils.OracleHelpers.bulkClassMapper(this, coreptTemplateTriggerService)
  coreptTemplateTriggerService.initialization(this)
  com.honeywell.coreptdu.utils.oracleutils.OracleHelpers.bulkClassMapper(this, coreptMenuMmbServiceImpl)
  coreptMenuMmbServiceImpl.initialization(this)
  com.honeywell.coreptdu.utils.oracleutils.OracleHelpers.bulkClassMapper(this, refreshMasterLib)
  refreshMasterLib.initialization(this)

API: validateBeforeCommit()
  int oldIndex = system.getCursorRecordIndex()
  com.honeywell.coreptdu.utils.oracleutils.Block<?> recs = ((com.honeywell.coreptdu.utils.oracleutils.Block<?>) (nameIn(this, system.getCursorBlock())))
  system.setCursorRecordIndex(0)
  for (java.lang.Object rec : recs.getData()) {     if (java.util.Objects.equals(nameIn(rec, "recordStatus"), "INSERT")) {         system.setRecordStatus(com.honeywell.coreptdu.global.forms.FormConstant.INSERT);         preInsert();         whenValidateRecordBL();     }     system.setCursorRecordIndex(system.getCursorRecordIndex() + 1); }
  system.setCursorRecordIndex(0)
  for (java.lang.Object rec : recs.getData()) {     if (java.util.Objects.equals(nameIn(rec, "recordStatus"), "CHANGED")) {         preUpdate();         whenValidateRecordBL();     }     system.setCursorRecordIndex(system.getCursorRecordIndex() + 1); }
  system.setCursorRecordIndex(oldIndex)
  whenValidateRecordBL()

API: whenNewFormInstance(com.honeywell.coreptdu.datatypes.airport.dto.request.AirportTriggerRequestDto)
  log.info(" whenNewFormInstance Executing")
  com.honeywell.coreptdu.global.dto.BaseResponse<com.honeywell.coreptdu.datatypes.airport.dto.response.AirportTriggerResponseDto> responseObj = new com.honeywell.coreptdu.global.dto.BaseResponse<>()
  com.honeywell.coreptdu.datatypes.airport.dto.response.AirportTriggerResponseDto resDto = new com.honeywell.coreptdu.datatypes.airport.dto.response.AirportTriggerResponseDto()
  try {     com.honeywell.coreptdu.utils.oracleutils.OracleHelpers.bulkClassMapper(reqDto, this);     initializeForm();     global.setNewDcrNo("");     hideView("stdTldFixStk");     coreptLib.setBlock();     coreptLib.iffromerrorsummary();     if (!java.util.Objects.equals(parameter.getWorkType(), "VIEW")) {         setItemProperty("control_block.chk_unchk_all", com.honeywell.coreptdu.global.forms.FormConstant.DISPLAYED, com.honeywell.coreptdu.global.forms.FormConstant.PROPERTY_TRUE);         setItemProperty("pl_tld_airport_mr.chk", com.honeywell.coreptdu.global.forms.FormConstant.DISPLAYED, com.honeywell.coreptdu.global.forms.FormConstant.PROPERTY_TRUE);     } else {         setItemProperty("control_block.chk_unchk_all", com.honeywell.coreptdu.global.forms.FormConstant.DISPLAYED, com.honeywell.coreptdu.global.forms.FormConstant.PROPERTY_FALSE);         setItemProperty("pl_tld_airport_mr.chk", com.honeywell.coreptdu.global.forms.FormConstant.DISPLAYED, com.honeywell.coreptdu.global.forms.FormConstant.PROPERTY_FALSE);     }     com.honeywell.coreptdu.utils.oracleutils.RecordGroup groupId = null;     java.lang.String vGroup = "newDcr";     groupId = findGroup(vGroup);     if (groupId != null) {         deleteGroup(groups, vGroup);     } else {         groupId = createGroup(vGroup);         addGroupColumn(groupId, "dcrNo", "numberColumn");     }     java.lang.String queryHits = toString(plTldAirportMr.getQueryHits());     com.honeywell.coreptdu.utils.oracleutils.OracleHelpers.ResponseMapper(this, reqDto);     whenNewRecordInstance(reqDto);     plTldAirportMr.setQueryHits(queryHits);     if (!system.getFormStatus().equals("NEW")) {         global.setCreateDcrNumber(toString(nameIn(this, com.honeywell.coreptdu.utils.oracleutils.HoneyWellUtils.toCamelCase(system.getCursorBlock()) + ".createDcrNumber")));     }     com.honeywell.coreptdu.utils.oracleutils.OracleHelpers.ResponseMapper(this, resDto);     log.info(" whenNewFormInstance executed successfully");     return responseObj.render(responseObj.formSuccessResponse(com.honeywell.coreptdu.utils.common.Constants.RECORD_FETCH, resDto)); } catch (java.lang.Exception e) {     log.error("Error while Executing the whenNewFormInstance Service");     com.honeywell.coreptdu.utils.oracleutils.OracleHelpers.ResponseMapper(this, resDto);     return com.honeywell.coreptdu.exception.ExceptionUtils.handleException(e, resDto); }

API: whenNewRecordInstance(com.honeywell.coreptdu.datatypes.airport.dto.request.AirportTriggerRequestDto)
  log.info(" whenNewRecordInstance Executing")
  com.honeywell.coreptdu.global.dto.BaseResponse<com.honeywell.coreptdu.datatypes.airport.dto.response.AirportTriggerResponseDto> responseObj = new com.honeywell.coreptdu.global.dto.BaseResponse<>()
  com.honeywell.coreptdu.datatypes.airport.dto.response.AirportTriggerResponseDto resDto = new com.honeywell.coreptdu.datatypes.airport.dto.response.AirportTriggerResponseDto()
  try {     com.honeywell.coreptdu.utils.oracleutils.OracleHelpers.bulkClassMapper(reqDto, this);     java.lang.String pBlock = system.getCursorBlock();     java.lang.Integer vAllowUpdate = 0;     if (com.honeywell.coreptdu.utils.oracleutils.OracleHelpers.sqlLike(pBlock, "PL%")) {         // if(OracleHelpers.sqlLike(pBlock, "PL_STD%") && plStdAirportMr.getRow(system.getCursorRecordIndex()).getOldData() != null && genericNativeQueryHelper.isRecordUpdated(PlStdAirportMr.class, plStdAirportMr.getRow(system.getCursorRecordIndex()), plStdAirportMr.getRow(system.getCursorRecordIndex()).getRowid())) {         // coreptLib.dspMsg("Record has been updated by another user.\n Please Re-query to see change");         // throw new RecordModifiedException("Please Refresh");         // }         if (((java.util.Objects.equals(system.getMode(), "NORMAL") && (!java.util.Objects.equals(nvl(nameIn(this, pBlock + ".validate_ind"), "N"), "Y"))) && (!java.util.Objects.equals(nameIn(this, pBlock + ".processing_cycle"), null))) && (!java.util.Objects.equals(toString(nameIn(this, pBlock + ".record_Status")), "DELETED"))) {             doValidate(pBlock, com.honeywell.coreptdu.global.forms.FormConstant.Y);         } else {             coreptLib.setinitialerrordisplay(pBlock);         }         if ((!java.util.Objects.equals(parameter.getWorkType(), "VIEW")) && java.util.Objects.equals(parameter.getRecordType(), "T")) {             if (java.util.Objects.equals(nameIn(this, pBlock + ".generated_in_house_flag"), "N")) {                 setItemProperty(pBlock + ".processing_cycle", com.honeywell.coreptdu.global.forms.FormConstant.UPDATE_ALLOWED, com.honeywell.coreptdu.global.forms.FormConstant.PROPERTY_FALSE);                 setItemProperty(pBlock + ".generated_in_house_flag", com.honeywell.coreptdu.global.forms.FormConstant.UPDATE_ALLOWED, com.honeywell.coreptdu.global.forms.FormConstant.PROPERTY_FALSE);                 setItemProperty(pBlock + ".validate_ind", com.honeywell.coreptdu.global.forms.FormConstant.UPDATE_ALLOWED, com.honeywell.coreptdu.global.forms.FormConstant.PROPERTY_TRUE);                 if (!like("%MR", pBlock)) {                     setItemProperty(pBlock + ".processing_cycle", "current_record_attribute", "notUpdatable");                     setItemProperty(pBlock + ".generated_in_house_flag", "current_record_attribute", "notUpdatable");                     setItemProperty(pBlock + ".validate_ind", "current_record_attribute", "default");                 }             } else {                 setItemProperty(pBlock + ".generated_in_house_flag", com.honeywell.coreptdu.global.forms.FormConstant.UPDATE_ALLOWED, com.honeywell.coreptdu.global.forms.FormConstant.PROPERTY_TRUE);                 setItemProperty(pBlock + ".validate_ind", com.honeywell.coreptdu.global.forms.FormConstant.UPDATE_ALLOWED, com.honeywell.coreptdu.global.forms.FormConstant.PROPERTY_FALSE);                 if (!like("%MR", pBlock)) {                     setItemProperty(pBlock + ".generated_in_house_flag", "current_record_attribute", "default");                     setItemProperty(pBlock + ".validate_ind", "current_record_attribute", "notUpdatable");                 }                 if (java.util.Objects.equals(global.getLibRefreshed(), "Y") && java.util.Objects.equals(nameIn(this, pBlock + ".generated_in_house_flag"), "Y")) {                     setItemProperty(pBlock + ".processing_cycle", com.honeywell.coreptdu.global.forms.FormConstant.UPDATE_ALLOWED, com.honeywell.coreptdu.global.forms.FormConstant.PROPERTY_FALSE);                     if (!like("%MR", pBlock)) {                         setItemProperty(pBlock + ".processing_cycle", "current_record_attribute", "notUpdatable");                     }                 } else {                     setItemProperty(pBlock + ".processing_cycle", com.honeywell.coreptdu.global.forms.FormConstant.UPDATE_ALLOWED, com.honeywell.coreptdu.global.forms.FormConstant.PROPERTY_TRUE);                     if (!like("%MR", pBlock)) {                         setItemProperty(pBlock + ".processing_cycle", "current_record_attribute", "default");                     }                 }             }         }         if (java.util.Objects.equals(parameter.getRecordType(), "T")) {             if (java.util.Objects.equals(nameIn(this, pBlock + ".processing_cycle"), null)) {                 vAllowUpdate = coreptLib.checkValidSuppCust(toInteger(global.getProcessingCycle()), toInteger(global.getProcessingCycle()), toInteger(global.getDcrNumber()), global.getDataSupplier(), parameter.getRecordType(), toString(nameIn(this, pBlock + ".customer_ident")));             } else {                 vAllowUpdate = coreptLib.checkValidSuppCust(toInteger(nameIn(this, pBlock + ".processing_cycle")), toInteger(global.getProcessingCycle()), toInteger(global.getDcrNumber()), global.getDataSupplier(), parameter.getRecordType(), toString(nameIn(this, pBlock + ".customer_ident")));             }         } else if (java.util.Objects.equals(nameIn(this, pBlock + ".processing_cycle"), null)) {             vAllowUpdate = coreptLib.checkValidSuppCust(toInteger(global.getProcessingCycle()), toInteger(global.getProcessingCycle()), toInteger(global.getDcrNumber()), global.getDataSupplier(), parameter.getRecordType(), null);         } else {             vAllowUpdate = coreptLib.checkValidSuppCust(toInteger(nameIn(this, pBlock + ".processing_cycle")), toInteger(global.getProcessingCycle()), toInteger(global.getDcrNumber()), global.getDataSupplier(), parameter.getRecordType(), null);         }         if (java.util.Objects.equals(vAllowUpdate, 1)) {             parameter.setUpdRec(com.honeywell.coreptdu.global.forms.FormConstant.N);             setBlockProperty(pBlock, com.honeywell.coreptdu.global.forms.FormConstant.UPDATE_ALLOWED, com.honeywell.coreptdu.global.forms.FormConstant.PROPERTY_TRUE);         } else {             parameter.setUpdRec(com.honeywell.coreptdu.global.forms.FormConstant.Y);             setBlockProperty(pBlock, com.honeywell.coreptdu.global.forms.FormConstant.UPDATE_ALLOWED, com.honeywell.coreptdu.global.forms.FormConstant.PROPERTY_FALSE);             if (!java.util.Objects.equals(nameIn(this, pBlock + ".processing_cycle"), global.getProcessingCycle())) {                 throw new com.honeywell.coreptdu.exception.FormTriggerFailureException();             }         }     }     com.honeywell.coreptdu.utils.oracleutils.OracleHelpers.ResponseMapper(this, resDto);     log.info(" whenNewRecordInstance executed successfully");     return responseObj.render(responseObj.formSuccessResponse(com.honeywell.coreptdu.utils.common.Constants.RECORD_FETCH, resDto)); } catch (java.lang.Exception e) {     log.error("Error while Executing the whenNewRecordInstance Service");     com.honeywell.coreptdu.utils.oracleutils.OracleHelpers.ResponseMapper(this, resDto);     return com.honeywell.coreptdu.exception.ExceptionUtils.handleException(e, resDto); }

API: whenValidateRecord(com.honeywell.coreptdu.datatypes.airport.dto.request.AirportTriggerRequestDto)
  log.info(" whenValidateRecord Executing")
  com.honeywell.coreptdu.global.dto.BaseResponse<com.honeywell.coreptdu.datatypes.airport.dto.response.AirportTriggerResponseDto> responseObj = new com.honeywell.coreptdu.global.dto.BaseResponse<>()
  com.honeywell.coreptdu.datatypes.airport.dto.response.AirportTriggerResponseDto resDto = new com.honeywell.coreptdu.datatypes.airport.dto.response.AirportTriggerResponseDto()
  try {     com.honeywell.coreptdu.utils.oracleutils.OracleHelpers.bulkClassMapper(reqDto, this);     whenValidateRecordBL();     // preUpdate();     com.honeywell.coreptdu.utils.oracleutils.OracleHelpers.ResponseMapper(this, resDto);     log.info(" whenValidateRecord executed successfully");     return responseObj.render(responseObj.formSuccessResponse(com.honeywell.coreptdu.utils.common.Constants.RECORD_FETCH, resDto)); } catch (java.lang.Exception e) {     log.error("Error while Executing the whenValidateRecord Service");     com.honeywell.coreptdu.utils.oracleutils.OracleHelpers.ResponseMapper(this, resDto);     return com.honeywell.coreptdu.exception.ExceptionUtils.handleException(e, resDto); }

API: whenValidateRecordBL()
  java.lang.String pBlock = system.getCursorBlock()
  if (com.honeywell.coreptdu.utils.oracleutils.OracleHelpers.sqlLike(pBlock, "PL_%") && java.util.Arrays.asList("CHANGED", "INSERT").contains(system.getRecordStatus())) {     if (!java.util.Arrays.asList("Y", "S", "H", "W", "N", "I", "O").contains(nvl(nameIn(this, pBlock + ".validate_ind"), "Y"))) {         coreptLib.dspMsg("Validate indicator can only 'Y','S','H','W','N' or 'I'");         throw new com.honeywell.coreptdu.exception.FormTriggerFailureException();     }     if (!java.util.Arrays.asList("A", "C", "M", "R", "T").contains(nvl(nameIn(this, pBlock + ".ctld_arsp_ind"), "A"))) {         coreptLib.dspMsg("Controlled Airspace Indicator can only 'A','C','M','R' or 'T'");         throw new com.honeywell.coreptdu.exception.FormTriggerFailureException();     }     if (java.util.Objects.equals(parameter.getRecordType(), "T")) {         coreptLib.validateextrafields(toInteger(nameIn(this, pBlock + ".processing_cycle")), toString(nameIn(this, pBlock + ".generated_in_house_flag")));     }     if ((!java.util.Objects.equals(nameIn(this, pBlock + ".processing_cycle"), null)) && java.util.Objects.equals(nameIn(this, pBlock + ".data_supplier"), null)) {         copy(global.getDataSupplier(), pBlock + ".data_supplier");     }     doValidate(pBlock, com.honeywell.coreptdu.global.forms.FormConstant.Y);     if ((!java.util.Objects.equals(parameter.getWorkType(), "VIEW")) && java.util.Objects.equals(parameter.getRecordType(), "T")) {         if (java.util.Objects.equals(nameIn(this, pBlock + ".generated_in_house_flag"), "N")) {             setItemProperty(pBlock + ".processing_cycle", com.honeywell.coreptdu.global.forms.FormConstant.UPDATE_ALLOWED, com.honeywell.coreptdu.global.forms.FormConstant.PROPERTY_FALSE);             setItemProperty(pBlock + ".generated_in_house_flag", com.honeywell.coreptdu.global.forms.FormConstant.UPDATE_ALLOWED, com.honeywell.coreptdu.global.forms.FormConstant.PROPERTY_FALSE);             setItemProperty(pBlock + ".validate_ind", com.honeywell.coreptdu.global.forms.FormConstant.UPDATE_ALLOWED, com.honeywell.coreptdu.global.forms.FormConstant.PROPERTY_TRUE);             if (!like("%MR", pBlock)) {                 setItemProperty(pBlock + ".processing_cycle", "current_record_attribute", "notUpdatable");                 setItemProperty(pBlock + ".generated_in_house_flag", "current_record_attribute", "notUpdatable");                 setItemProperty(pBlock + ".validate_ind", "current_record_attribute", "default");             }         } else {             setItemProperty(pBlock + ".processing_cycle", com.honeywell.coreptdu.global.forms.FormConstant.UPDATE_ALLOWED, com.honeywell.coreptdu.global.forms.FormConstant.PROPERTY_TRUE);             setItemProperty(pBlock + ".generated_in_house_flag", com.honeywell.coreptdu.global.forms.FormConstant.UPDATE_ALLOWED, com.honeywell.coreptdu.global.forms.FormConstant.PROPERTY_TRUE);             setItemProperty(pBlock + ".validate_ind", com.honeywell.coreptdu.global.forms.FormConstant.UPDATE_ALLOWED, com.honeywell.coreptdu.global.forms.FormConstant.PROPERTY_FALSE);             if (!like("%MR", pBlock)) {                 setItemProperty(pBlock + ".processing_cycle", "current_record_attribute", "default");                 setItemProperty(pBlock + ".generated_in_house_flag", "current_record_attribute", "default");                 setItemProperty(pBlock + ".validate_ind", "current_record_attribute", "notUpdatable");             }         }     } }

